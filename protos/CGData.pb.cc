// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGData.proto

#include "CGData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CGData {
constexpr CGGmeTypeRequest::CGGmeTypeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct CGGmeTypeRequestDefaultTypeInternal {
  constexpr CGGmeTypeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGGmeTypeRequestDefaultTypeInternal() {}
  union {
    CGGmeTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGGmeTypeRequestDefaultTypeInternal _CGGmeTypeRequest_default_instance_;
constexpr StringPub::StringPub(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringPubDefaultTypeInternal {
  constexpr StringPubDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringPubDefaultTypeInternal() {}
  union {
    StringPub _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringPubDefaultTypeInternal _StringPub_default_instance_;
constexpr UploadGidDataRequest::UploadGidDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pet_data_()
  , items_()
  , gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_data_(nullptr)
  , role_type_(0)
  , big_line_(0){}
struct UploadGidDataRequestDefaultTypeInternal {
  constexpr UploadGidDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadGidDataRequestDefaultTypeInternal() {}
  union {
    UploadGidDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadGidDataRequestDefaultTypeInternal _UploadGidDataRequest_default_instance_;
constexpr UploadGidDataResponse::UploadGidDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UploadGidDataResponseDefaultTypeInternal {
  constexpr UploadGidDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadGidDataResponseDefaultTypeInternal() {}
  union {
    UploadGidDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadGidDataResponseDefaultTypeInternal _UploadGidDataResponse_default_instance_;
constexpr UploadGidBankDataRequest::UploadGidBankDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pet_data_()
  , items_()
  , gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gold_(0)
  , role_type_(0)
  , big_line_(0){}
struct UploadGidBankDataRequestDefaultTypeInternal {
  constexpr UploadGidBankDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadGidBankDataRequestDefaultTypeInternal() {}
  union {
    UploadGidBankDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadGidBankDataRequestDefaultTypeInternal _UploadGidBankDataRequest_default_instance_;
constexpr UploadGidBankDataResponse::UploadGidBankDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UploadGidBankDataResponseDefaultTypeInternal {
  constexpr UploadGidBankDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadGidBankDataResponseDefaultTypeInternal() {}
  union {
    UploadGidBankDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadGidBankDataResponseDefaultTypeInternal _UploadGidBankDataResponse_default_instance_;
constexpr UploadMapDataRequest::UploadMapDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maptype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filetime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imagedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UploadMapDataRequestDefaultTypeInternal {
  constexpr UploadMapDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadMapDataRequestDefaultTypeInternal() {}
  union {
    UploadMapDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadMapDataRequestDefaultTypeInternal _UploadMapDataRequest_default_instance_;
constexpr UploadMapDataResponse::UploadMapDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UploadMapDataResponseDefaultTypeInternal {
  constexpr UploadMapDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadMapDataResponseDefaultTypeInternal() {}
  union {
    UploadMapDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadMapDataResponseDefaultTypeInternal _UploadMapDataResponse_default_instance_;
constexpr DownloadMapDataRequest::DownloadMapDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maptype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DownloadMapDataRequestDefaultTypeInternal {
  constexpr DownloadMapDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadMapDataRequestDefaultTypeInternal() {}
  union {
    DownloadMapDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadMapDataRequestDefaultTypeInternal _DownloadMapDataRequest_default_instance_;
constexpr DownloadMapDataResponse::DownloadMapDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maptype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filetime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imagedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DownloadMapDataResponseDefaultTypeInternal {
  constexpr DownloadMapDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadMapDataResponseDefaultTypeInternal() {}
  union {
    DownloadMapDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadMapDataResponseDefaultTypeInternal _DownloadMapDataResponse_default_instance_;
constexpr UploadCharcterServerRequest::UploadCharcterServerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0)
  , port_(0)
  , online_(0){}
struct UploadCharcterServerRequestDefaultTypeInternal {
  constexpr UploadCharcterServerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadCharcterServerRequestDefaultTypeInternal() {}
  union {
    UploadCharcterServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadCharcterServerRequestDefaultTypeInternal _UploadCharcterServerRequest_default_instance_;
constexpr UploadCharcterServerResponse::UploadCharcterServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UploadCharcterServerResponseDefaultTypeInternal {
  constexpr UploadCharcterServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadCharcterServerResponseDefaultTypeInternal() {}
  union {
    UploadCharcterServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadCharcterServerResponseDefaultTypeInternal _UploadCharcterServerResponse_default_instance_;
constexpr CGAccountGidData::CGAccountGidData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(0)
  , big_server_(0)
  , server_line_(0u)
  , character_(0){}
struct CGAccountGidDataDefaultTypeInternal {
  constexpr CGAccountGidDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGAccountGidDataDefaultTypeInternal() {}
  union {
    CGAccountGidData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGAccountGidDataDefaultTypeInternal _CGAccountGidData_default_instance_;
constexpr SelectAccountGidDataRequest::SelectAccountGidDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SelectAccountGidDataRequestDefaultTypeInternal {
  constexpr SelectAccountGidDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectAccountGidDataRequestDefaultTypeInternal() {}
  union {
    SelectAccountGidDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectAccountGidDataRequestDefaultTypeInternal _SelectAccountGidDataRequest_default_instance_;
constexpr SelectGidDataRequest::SelectGidDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_type_(0){}
struct SelectGidDataRequestDefaultTypeInternal {
  constexpr SelectGidDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectGidDataRequestDefaultTypeInternal() {}
  union {
    SelectGidDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectGidDataRequestDefaultTypeInternal _SelectGidDataRequest_default_instance_;
constexpr SelectCharacterDataRequest::SelectCharacterDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0){}
struct SelectCharacterDataRequestDefaultTypeInternal {
  constexpr SelectCharacterDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectCharacterDataRequestDefaultTypeInternal() {}
  union {
    SelectCharacterDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectCharacterDataRequestDefaultTypeInternal _SelectCharacterDataRequest_default_instance_;
constexpr SelectCharacterDataResponse::SelectCharacterDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pet_data_()
  , items_()
  , character_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_data_(nullptr)
  , big_line_(0){}
struct SelectCharacterDataResponseDefaultTypeInternal {
  constexpr SelectCharacterDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectCharacterDataResponseDefaultTypeInternal() {}
  union {
    SelectCharacterDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectCharacterDataResponseDefaultTypeInternal _SelectCharacterDataResponse_default_instance_;
constexpr SelectCharacterServerRequest::SelectCharacterServerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0){}
struct SelectCharacterServerRequestDefaultTypeInternal {
  constexpr SelectCharacterServerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectCharacterServerRequestDefaultTypeInternal() {}
  union {
    SelectCharacterServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectCharacterServerRequestDefaultTypeInternal _SelectCharacterServerRequest_default_instance_;
constexpr SelectCharacterServerResponse::SelectCharacterServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0)
  , port_(0)
  , online_(0){}
struct SelectCharacterServerResponseDefaultTypeInternal {
  constexpr SelectCharacterServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectCharacterServerResponseDefaultTypeInternal() {}
  union {
    SelectCharacterServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectCharacterServerResponseDefaultTypeInternal _SelectCharacterServerResponse_default_instance_;
constexpr SelectTaskInfoRequest::SelectTaskInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0)
  , line_(0){}
struct SelectTaskInfoRequestDefaultTypeInternal {
  constexpr SelectTaskInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectTaskInfoRequestDefaultTypeInternal() {}
  union {
    SelectTaskInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectTaskInfoRequestDefaultTypeInternal _SelectTaskInfoRequest_default_instance_;
constexpr SelectTaskInfoResponse::SelectTaskInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , big_line_(0)
  , line_(0)
  , npc_pos_x_(0)
  , npc_pos_y_(0)
  , last_time_(0)
  , last_map_first_num_(0)
  , last_map_first_width_(0)
  , last_map_first_height_(0){}
struct SelectTaskInfoResponseDefaultTypeInternal {
  constexpr SelectTaskInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectTaskInfoResponseDefaultTypeInternal() {}
  union {
    SelectTaskInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectTaskInfoResponseDefaultTypeInternal _SelectTaskInfoResponse_default_instance_;
constexpr SelectAccountGidDataResponse::SelectAccountGidDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : giddata_(){}
struct SelectAccountGidDataResponseDefaultTypeInternal {
  constexpr SelectAccountGidDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectAccountGidDataResponseDefaultTypeInternal() {}
  union {
    SelectAccountGidDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectAccountGidDataResponseDefaultTypeInternal _SelectAccountGidDataResponse_default_instance_;
constexpr SelectGidDataResponse::SelectGidDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pet_data_()
  , items_()
  , gid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_data_(nullptr)
  , role_type_(0){}
struct SelectGidDataResponseDefaultTypeInternal {
  constexpr SelectGidDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectGidDataResponseDefaultTypeInternal() {}
  union {
    SelectGidDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectGidDataResponseDefaultTypeInternal _SelectGidDataResponse_default_instance_;
constexpr CGBaseData::CGBaseData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hp_(0)
  , mp_(0)
  , maxhp_(0)
  , maxmp_(0)
  , level_(0)
  , xp_(0)
  , maxxp_(0)
  , health_(0){}
struct CGBaseDataDefaultTypeInternal {
  constexpr CGBaseDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGBaseDataDefaultTypeInternal() {}
  union {
    CGBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGBaseDataDefaultTypeInternal _CGBaseData_default_instance_;
constexpr CGSkillBaseData::CGSkillBaseData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subskills_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , cost_(0)
  , flags_(0)
  , index_(0)
  , level_(0)
  , maxlevel_(0)
  , available_(false)
  , xp_(0)
  , maxxp_(0){}
struct CGSkillBaseDataDefaultTypeInternal {
  constexpr CGSkillBaseDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGSkillBaseDataDefaultTypeInternal() {}
  union {
    CGSkillBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGSkillBaseDataDefaultTypeInternal _CGSkillBaseData_default_instance_;
constexpr CGAttrBaseData::CGAttrBaseData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_remain_(0)
  , points_endurance_(0)
  , points_strength_(0)
  , points_defense_(0)
  , points_agility_(0)
  , points_magical_(0)
  , value_attack_(0)
  , value_defensive_(0)
  , value_agility_(0)
  , value_spirit_(0)
  , value_recovery_(0)
  , resist_poison_(0)
  , resist_sleep_(0)
  , resist_medusa_(0)
  , resist_drunk_(0)
  , resist_chaos_(0)
  , resist_forget_(0)
  , fix_critical_(0)
  , fix_strikeback_(0)
  , fix_accurancy_(0)
  , fix_dodge_(0)
  , element_earth_(0)
  , element_water_(0)
  , element_fire_(0)
  , element_wind_(0){}
struct CGAttrBaseDataDefaultTypeInternal {
  constexpr CGAttrBaseDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGAttrBaseDataDefaultTypeInternal() {}
  union {
    CGAttrBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGAttrBaseDataDefaultTypeInternal _CGAttrBaseData_default_instance_;
constexpr CGCharacterPersDesc::CGCharacterPersDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sellstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buystring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wantstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , descstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , changebits_(0)
  , sellicon_(0)
  , buyicon_(0)
  , wanticon_(0){}
struct CGCharacterPersDescDefaultTypeInternal {
  constexpr CGCharacterPersDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCharacterPersDescDefaultTypeInternal() {}
  union {
    CGCharacterPersDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCharacterPersDescDefaultTypeInternal _CGCharacterPersDesc_default_instance_;
constexpr CGCharacterData::CGCharacterData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : titles_()
  , skill_()
  , job_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_data_(nullptr)
  , detail_(nullptr)
  , pers_desc_(nullptr)
  , souls_(0)
  , level_(0)
  , gold_(0)
  , image_id_(0)
  , score_(0)
  , skillslots_(0)
  , use_title_(0)
  , avatar_id_(0)
  , unitid_(0)
  , petid_(0)
  , direction_(0)
  , petriding_(false)
  , usingpunchclock_(false)
  , punchclock_(0)
  , manu_endurance_(0)
  , manu_skillful_(0)
  , manu_intelligence_(0)
  , value_charisma_(0)
  , x_(0)
  , y_(0)
  , map_number_(0)
  , server_line_(0)
  , battle_position_(0)
  , bank_gold_(0)
  , big_line_(0){}
struct CGCharacterDataDefaultTypeInternal {
  constexpr CGCharacterDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCharacterDataDefaultTypeInternal() {}
  union {
    CGCharacterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCharacterDataDefaultTypeInternal _CGCharacterData_default_instance_;
constexpr CGPetData::CGPetData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skill_()
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_data_(nullptr)
  , detail_(nullptr)
  , index_(0)
  , flags_(0)
  , battle_flags_(0)
  , loyality_(0)
  , default_battle_(false)
  , state_(0)
  , grade_(0)
  , lossmingrade_(0)
  , lossmaxgrade_(0)
  , race_(0)
  , skillslots_(0){}
struct CGPetDataDefaultTypeInternal {
  constexpr CGPetDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGPetDataDefaultTypeInternal() {}
  union {
    CGPetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGPetDataDefaultTypeInternal _CGPetData_default_instance_;
constexpr CGItemData::CGItemData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_id_(0)
  , item_id_(0)
  , type_(0)
  , level_(0)
  , pos_(0)
  , assessed_(false)
  , count_(0){}
struct CGItemDataDefaultTypeInternal {
  constexpr CGItemDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGItemDataDefaultTypeInternal() {}
  union {
    CGItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGItemDataDefaultTypeInternal _CGItemData_default_instance_;
constexpr CGStoreMapRequest::CGStoreMapRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_number_(0){}
struct CGStoreMapRequestDefaultTypeInternal {
  constexpr CGStoreMapRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGStoreMapRequestDefaultTypeInternal() {}
  union {
    CGStoreMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGStoreMapRequestDefaultTypeInternal _CGStoreMapRequest_default_instance_;
constexpr CGStoreMapResponse::CGStoreMapResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGStoreMapResponseDefaultTypeInternal {
  constexpr CGStoreMapResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGStoreMapResponseDefaultTypeInternal() {}
  union {
    CGStoreMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGStoreMapResponseDefaultTypeInternal _CGStoreMapResponse_default_instance_;
constexpr CGMapDataRequest::CGMapDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGMapDataRequestDefaultTypeInternal {
  constexpr CGMapDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGMapDataRequestDefaultTypeInternal() {}
  union {
    CGMapDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGMapDataRequestDefaultTypeInternal _CGMapDataRequest_default_instance_;
constexpr CGMapDataResponse::CGMapDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : maps_(){}
struct CGMapDataResponseDefaultTypeInternal {
  constexpr CGMapDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGMapDataResponseDefaultTypeInternal() {}
  union {
    CGMapDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGMapDataResponseDefaultTypeInternal _CGMapDataResponse_default_instance_;
constexpr CGMapData::CGMapData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , map_number_(0)
  , often_(0){}
struct CGMapDataDefaultTypeInternal {
  constexpr CGMapDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGMapDataDefaultTypeInternal() {}
  union {
    CGMapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGMapDataDefaultTypeInternal _CGMapData_default_instance_;
constexpr CGPetGradeCalcRequest::CGPetGradeCalcRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGPetGradeCalcRequestDefaultTypeInternal {
  constexpr CGPetGradeCalcRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGPetGradeCalcRequestDefaultTypeInternal() {}
  union {
    CGPetGradeCalcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGPetGradeCalcRequestDefaultTypeInternal _CGPetGradeCalcRequest_default_instance_;
constexpr CGPetGradeCalcResponse::CGPetGradeCalcResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pet_(){}
struct CGPetGradeCalcResponseDefaultTypeInternal {
  constexpr CGPetGradeCalcResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGPetGradeCalcResponseDefaultTypeInternal() {}
  union {
    CGPetGradeCalcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGPetGradeCalcResponseDefaultTypeInternal _CGPetGradeCalcResponse_default_instance_;
constexpr CGPetGradeCalcData::CGPetGradeCalcData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bestbpgrade_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , racetypename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , number_(0)
  , racetype_(0)
  , basebp_(0)
  , totalgrade_(0)
  , can_catch_(0)
  , card_type_(0)
  , image_id_(0)
  , rate_endurance_(0)
  , rate_strength_(0)
  , rate_defense_(0)
  , rate_agility_(0)
  , rate_magical_(0)
  , element_earth_(0)
  , element_water_(0)
  , element_fire_(0)
  , element_wind_(0)
  , skill_slots_(0){}
struct CGPetGradeCalcDataDefaultTypeInternal {
  constexpr CGPetGradeCalcDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGPetGradeCalcDataDefaultTypeInternal() {}
  union {
    CGPetGradeCalcData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGPetGradeCalcDataDefaultTypeInternal _CGPetGradeCalcData_default_instance_;
constexpr CGItemRequest::CGItemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(0){}
struct CGItemRequestDefaultTypeInternal {
  constexpr CGItemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGItemRequestDefaultTypeInternal() {}
  union {
    CGItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGItemRequestDefaultTypeInternal _CGItemRequest_default_instance_;
constexpr CGItemResponse::CGItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , item_id_(0)
  , type_(0)
  , price_(0)
  , maxpile_(0)
  , level_(0)
  , selllimitcount_(0)
  , exist_(false){}
struct CGItemResponseDefaultTypeInternal {
  constexpr CGItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGItemResponseDefaultTypeInternal() {}
  union {
    CGItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGItemResponseDefaultTypeInternal _CGItemResponse_default_instance_;
constexpr CGStoreItemRequest::CGStoreItemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attribute_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(0)
  , type_(0)
  , price_(0)
  , maxpile_(0)
  , level_(0)
  , selllimitcount_(0)
  , assessed_(false){}
struct CGStoreItemRequestDefaultTypeInternal {
  constexpr CGStoreItemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGStoreItemRequestDefaultTypeInternal() {}
  union {
    CGStoreItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGStoreItemRequestDefaultTypeInternal _CGStoreItemRequest_default_instance_;
constexpr CGStoreItemResponse::CGStoreItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : maybename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct CGStoreItemResponseDefaultTypeInternal {
  constexpr CGStoreItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGStoreItemResponseDefaultTypeInternal() {}
  union {
    CGStoreItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGStoreItemResponseDefaultTypeInternal _CGStoreItemResponse_default_instance_;
constexpr CGVoidData::CGVoidData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGVoidDataDefaultTypeInternal {
  constexpr CGVoidDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGVoidDataDefaultTypeInternal() {}
  union {
    CGVoidData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGVoidDataDefaultTypeInternal _CGVoidData_default_instance_;
constexpr CGBoolData::CGBoolData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(false){}
struct CGBoolDataDefaultTypeInternal {
  constexpr CGBoolDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGBoolDataDefaultTypeInternal() {}
  union {
    CGBoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGBoolDataDefaultTypeInternal _CGBoolData_default_instance_;
constexpr CGIntData::CGIntData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(0){}
struct CGIntDataDefaultTypeInternal {
  constexpr CGIntDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGIntDataDefaultTypeInternal() {}
  union {
    CGIntData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGIntDataDefaultTypeInternal _CGIntData_default_instance_;
constexpr CGSysTimeResponse::CGSysTimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : years_(0)
  , month_(0)
  , days_(0)
  , hours_(0)
  , mins_(0)
  , secs_(0)
  , local_time_(0)
  , server_time_(0){}
struct CGSysTimeResponseDefaultTypeInternal {
  constexpr CGSysTimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGSysTimeResponseDefaultTypeInternal() {}
  union {
    CGSysTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGSysTimeResponseDefaultTypeInternal _CGSysTimeResponse_default_instance_;
constexpr CGPlayerFlagEnabledData::CGPlayerFlagEnabledData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)
  , enable_(false){}
struct CGPlayerFlagEnabledDataDefaultTypeInternal {
  constexpr CGPlayerFlagEnabledDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGPlayerFlagEnabledDataDefaultTypeInternal() {}
  union {
    CGPlayerFlagEnabledData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGPlayerFlagEnabledDataDefaultTypeInternal _CGPlayerFlagEnabledData_default_instance_;
}  // namespace CGData
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CGData_2eproto[47];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CGData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CGData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CGData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGGmeTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGGmeTypeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::StringPub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::StringPub, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, gid_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, character_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, character_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, pet_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, items_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, role_type_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataRequest, big_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, gid_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, character_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, gold_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, pet_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, items_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, role_type_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataRequest, big_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadGidBankDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, serverline_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, maptype_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, filetime_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataRequest, imagedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadMapDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataRequest, serverline_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataRequest, maptype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, serverline_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, maptype_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, filetime_),
  PROTOBUF_FIELD_OFFSET(::CGData::DownloadMapDataResponse, imagedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, char_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, big_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, port_),
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerRequest, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::UploadCharcterServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, account_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, gid_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, game_type_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, big_server_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, server_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAccountGidData, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectAccountGidDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectAccountGidDataRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataRequest, gid_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataRequest, role_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataRequest, char_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataRequest, big_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, character_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, big_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, character_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, pet_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterDataResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerRequest, char_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerRequest, big_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, char_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, big_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, port_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectCharacterServerResponse, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoRequest, task_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoRequest, big_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoRequest, line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, task_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, big_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, line_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, npc_pos_x_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, npc_pos_y_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, last_time_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, last_map_first_num_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, last_map_first_width_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectTaskInfoResponse, last_map_first_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectAccountGidDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectAccountGidDataResponse, giddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, gid_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, role_type_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, character_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, character_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, pet_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::SelectGidDataResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, hp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, mp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, maxhp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, maxmp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, xp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, maxxp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGBaseData, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, info_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, cost_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, flags_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, index_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, maxlevel_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, available_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, xp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, maxxp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSkillBaseData, subskills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_remain_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_endurance_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_strength_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_defense_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_agility_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, points_magical_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, value_attack_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, value_defensive_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, value_agility_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, value_spirit_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, value_recovery_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_poison_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_sleep_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_medusa_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_drunk_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_chaos_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, resist_forget_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, fix_critical_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, fix_strikeback_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, fix_accurancy_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, fix_dodge_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, element_earth_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, element_water_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, element_fire_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGAttrBaseData, element_wind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, changebits_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, sellicon_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, sellstring_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, buyicon_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, buystring_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, wanticon_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, wantstring_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterPersDesc, descstring_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, base_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, souls_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, gold_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, image_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, score_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, skillslots_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, use_title_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, avatar_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, unitid_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, petid_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, petriding_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, direction_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, punchclock_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, usingpunchclock_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, job_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, titles_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, manu_endurance_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, manu_skillful_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, manu_intelligence_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, value_charisma_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, x_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, y_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, map_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, map_number_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, server_line_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, detail_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, skill_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, nick_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, pers_desc_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, battle_position_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, bank_gold_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGCharacterData, big_line_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, base_data_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, index_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, flags_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, battle_flags_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, loyality_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, default_battle_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, state_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, grade_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, lossmingrade_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, lossmaxgrade_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, skill_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, detail_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, real_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, race_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetData, skillslots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, image_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, item_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, type_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, attr_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, info_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, pos_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, assessed_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemData, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreMapRequest, map_number_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreMapRequest, map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapDataResponse, maps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, map_number_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, map_name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, desc_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGMapData, often_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcResponse, pet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, number_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, racetype_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, racetypename_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, basebp_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, totalgrade_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, bestbpgrade_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, can_catch_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, card_type_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, image_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, rate_endurance_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, rate_strength_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, rate_defense_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, rate_agility_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, rate_magical_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, element_earth_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, element_water_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, element_fire_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, element_wind_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPetGradeCalcData, skill_slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemRequest, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, type_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, price_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, maxpile_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, selllimitcount_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, attribute_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, desc_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGItemResponse, exist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, item_id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, name_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, type_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, price_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, maxpile_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, level_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, selllimitcount_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, attribute_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, desc_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemRequest, assessed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemResponse, id_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGStoreItemResponse, maybename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGVoidData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGBoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGBoolData, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGIntData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGIntData, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, years_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, month_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, days_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, hours_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, mins_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, secs_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, local_time_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGSysTimeResponse, server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPlayerFlagEnabledData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGData::CGPlayerFlagEnabledData, index_),
  PROTOBUF_FIELD_OFFSET(::CGData::CGPlayerFlagEnabledData, enable_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CGData::CGGmeTypeRequest)},
  { 6, -1, sizeof(::CGData::StringPub)},
  { 12, -1, sizeof(::CGData::UploadGidDataRequest)},
  { 24, -1, sizeof(::CGData::UploadGidDataResponse)},
  { 29, -1, sizeof(::CGData::UploadGidBankDataRequest)},
  { 41, -1, sizeof(::CGData::UploadGidBankDataResponse)},
  { 46, -1, sizeof(::CGData::UploadMapDataRequest)},
  { 56, -1, sizeof(::CGData::UploadMapDataResponse)},
  { 61, -1, sizeof(::CGData::DownloadMapDataRequest)},
  { 69, -1, sizeof(::CGData::DownloadMapDataResponse)},
  { 79, -1, sizeof(::CGData::UploadCharcterServerRequest)},
  { 89, -1, sizeof(::CGData::UploadCharcterServerResponse)},
  { 94, -1, sizeof(::CGData::CGAccountGidData)},
  { 105, -1, sizeof(::CGData::SelectAccountGidDataRequest)},
  { 111, -1, sizeof(::CGData::SelectGidDataRequest)},
  { 118, -1, sizeof(::CGData::SelectCharacterDataRequest)},
  { 125, -1, sizeof(::CGData::SelectCharacterDataResponse)},
  { 135, -1, sizeof(::CGData::SelectCharacterServerRequest)},
  { 142, -1, sizeof(::CGData::SelectCharacterServerResponse)},
  { 152, -1, sizeof(::CGData::SelectTaskInfoRequest)},
  { 160, -1, sizeof(::CGData::SelectTaskInfoResponse)},
  { 174, -1, sizeof(::CGData::SelectAccountGidDataResponse)},
  { 180, -1, sizeof(::CGData::SelectGidDataResponse)},
  { 191, -1, sizeof(::CGData::CGBaseData)},
  { 205, -1, sizeof(::CGData::CGSkillBaseData)},
  { 222, -1, sizeof(::CGData::CGAttrBaseData)},
  { 252, -1, sizeof(::CGData::CGCharacterPersDesc)},
  { 265, 303, sizeof(::CGData::CGCharacterData)},
  { 336, -1, sizeof(::CGData::CGPetData)},
  { 356, -1, sizeof(::CGData::CGItemData)},
  { 371, -1, sizeof(::CGData::CGStoreMapRequest)},
  { 378, -1, sizeof(::CGData::CGStoreMapResponse)},
  { 383, -1, sizeof(::CGData::CGMapDataRequest)},
  { 388, -1, sizeof(::CGData::CGMapDataResponse)},
  { 394, -1, sizeof(::CGData::CGMapData)},
  { 404, -1, sizeof(::CGData::CGPetGradeCalcRequest)},
  { 409, -1, sizeof(::CGData::CGPetGradeCalcResponse)},
  { 415, -1, sizeof(::CGData::CGPetGradeCalcData)},
  { 441, -1, sizeof(::CGData::CGItemRequest)},
  { 447, -1, sizeof(::CGData::CGItemResponse)},
  { 463, -1, sizeof(::CGData::CGStoreItemRequest)},
  { 478, -1, sizeof(::CGData::CGStoreItemResponse)},
  { 485, -1, sizeof(::CGData::CGVoidData)},
  { 490, -1, sizeof(::CGData::CGBoolData)},
  { 496, -1, sizeof(::CGData::CGIntData)},
  { 502, -1, sizeof(::CGData::CGSysTimeResponse)},
  { 515, -1, sizeof(::CGData::CGPlayerFlagEnabledData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGGmeTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_StringPub_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadGidDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadGidDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadGidBankDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadGidBankDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadMapDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadMapDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_DownloadMapDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_DownloadMapDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadCharcterServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_UploadCharcterServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGAccountGidData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectAccountGidDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectGidDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectCharacterDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectCharacterDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectCharacterServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectCharacterServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectTaskInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectTaskInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectAccountGidDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_SelectGidDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGBaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGSkillBaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGAttrBaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGCharacterPersDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGCharacterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGPetData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGStoreMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGStoreMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGMapDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGMapDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGMapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGPetGradeCalcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGPetGradeCalcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGPetGradeCalcData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGStoreItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGStoreItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGVoidData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGBoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGIntData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGSysTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CGData::_CGPlayerFlagEnabledData_default_instance_),
};

const char descriptor_table_protodef_CGData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014CGData.proto\022\006CGData\" \n\020CGGmeTypeReque"
  "st\022\014\n\004type\030\001 \001(\005\"\032\n\tStringPub\022\r\n\005value\030\001"
  " \001(\t\"\331\001\n\024UploadGidDataRequest\022\013\n\003gid\030\001 \001"
  "(\t\022\026\n\016character_name\030\002 \001(\t\022/\n\016character_"
  "data\030\003 \001(\0132\027.CGData.CGCharacterData\022#\n\010p"
  "et_data\030\004 \003(\0132\021.CGData.CGPetData\022!\n\005item"
  "s\030\005 \003(\0132\022.CGData.CGItemData\022\021\n\trole_type"
  "\030\006 \001(\005\022\020\n\010big_line\030\007 \001(\005\"\027\n\025UploadGidDat"
  "aResponse\"\272\001\n\030UploadGidBankDataRequest\022\013"
  "\n\003gid\030\001 \001(\t\022\026\n\016character_name\030\002 \001(\t\022\014\n\004g"
  "old\030\003 \001(\005\022#\n\010pet_data\030\004 \003(\0132\021.CGData.CGP"
  "etData\022!\n\005items\030\005 \003(\0132\022.CGData.CGItemDat"
  "a\022\021\n\trole_type\030\006 \001(\005\022\020\n\010big_line\030\007 \001(\005\"\033"
  "\n\031UploadGidBankDataResponse\"r\n\024UploadMap"
  "DataRequest\022\020\n\010FileName\030\001 \001(\t\022\022\n\nServerL"
  "ine\030\002 \001(\t\022\017\n\007MapType\030\003 \001(\t\022\020\n\010fileTime\030\004"
  " \001(\t\022\021\n\tImageData\030\005 \001(\014\"\027\n\025UploadMapData"
  "Response\"O\n\026DownloadMapDataRequest\022\020\n\010Fi"
  "leName\030\001 \001(\t\022\022\n\nServerLine\030\002 \001(\t\022\017\n\007MapT"
  "ype\030\003 \001(\t\"u\n\027DownloadMapDataResponse\022\020\n\010"
  "FileName\030\001 \001(\t\022\022\n\nServerLine\030\002 \001(\t\022\017\n\007Ma"
  "pType\030\003 \001(\t\022\020\n\010fileTime\030\004 \001(\t\022\021\n\tImageDa"
  "ta\030\005 \001(\014\"l\n\033UploadCharcterServerRequest\022"
  "\021\n\tchar_name\030\001 \001(\t\022\020\n\010big_line\030\002 \001(\005\022\n\n\002"
  "ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\016\n\006online\030\005 \001(\005\"\036"
  "\n\034UploadCharcterServerResponse\"\177\n\020CGAcco"
  "untGidData\022\017\n\007account\030\001 \001(\t\022\013\n\003gid\030\002 \001(\t"
  "\022\021\n\tgame_type\030\003 \001(\005\022\022\n\nbig_server\030\004 \001(\005\022"
  "\023\n\013server_line\030\005 \001(\r\022\021\n\tcharacter\030\006 \001(\005\""
  ".\n\033SelectAccountGidDataRequest\022\017\n\007accoun"
  "t\030\001 \001(\t\"6\n\024SelectGidDataRequest\022\013\n\003gid\030\001"
  " \001(\t\022\021\n\trole_type\030\002 \001(\005\"A\n\032SelectCharact"
  "erDataRequest\022\021\n\tchar_name\030\001 \001(\t\022\020\n\010big_"
  "line\030\002 \001(\005\"\300\001\n\033SelectCharacterDataRespon"
  "se\022\026\n\016character_name\030\001 \001(\t\022\020\n\010big_line\030\002"
  " \001(\005\022/\n\016character_data\030\003 \001(\0132\027.CGData.CG"
  "CharacterData\022#\n\010pet_data\030\004 \003(\0132\021.CGData"
  ".CGPetData\022!\n\005items\030\005 \003(\0132\022.CGData.CGIte"
  "mData\"C\n\034SelectCharacterServerRequest\022\021\n"
  "\tchar_name\030\001 \001(\t\022\020\n\010big_line\030\002 \001(\005\"n\n\035Se"
  "lectCharacterServerResponse\022\021\n\tchar_name"
  "\030\001 \001(\t\022\020\n\010big_line\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022\014\n\004"
  "port\030\004 \001(\005\022\016\n\006online\030\005 \001(\005\"J\n\025SelectTask"
  "InfoRequest\022\021\n\ttask_name\030\001 \001(\t\022\020\n\010big_li"
  "ne\030\002 \001(\005\022\014\n\004line\030\003 \001(\005\"\335\001\n\026SelectTaskInf"
  "oResponse\022\021\n\ttask_name\030\001 \001(\t\022\020\n\010big_line"
  "\030\002 \001(\005\022\014\n\004line\030\003 \001(\005\022\021\n\tnpc_pos_x\030\004 \001(\005\022"
  "\021\n\tnpc_pos_y\030\005 \001(\005\022\021\n\tlast_time\030\006 \001(\005\022\032\n"
  "\022last_map_first_num\030\007 \001(\005\022\034\n\024last_map_fi"
  "rst_width\030\010 \001(\005\022\035\n\025last_map_first_height"
  "\030\t \001(\005\"N\n\034SelectAccountGidDataResponse\022."
  "\n\007gidData\030\001 \003(\0132\035.CGData.SelectGidDataRe"
  "sponse\"\310\001\n\025SelectGidDataResponse\022\013\n\003gid\030"
  "\001 \001(\t\022\021\n\trole_type\030\002 \001(\005\022\026\n\016character_na"
  "me\030\003 \001(\t\022/\n\016character_data\030\004 \001(\0132\027.CGDat"
  "a.CGCharacterData\022#\n\010pet_data\030\005 \003(\0132\021.CG"
  "Data.CGPetData\022!\n\005items\030\006 \003(\0132\022.CGData.C"
  "GItemData\"\212\001\n\nCGBaseData\022\014\n\004name\030\001 \001(\t\022\n"
  "\n\002hp\030\002 \001(\005\022\n\n\002mp\030\003 \001(\005\022\r\n\005maxhp\030\004 \001(\005\022\r\n"
  "\005maxmp\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n\n\002xp\030\007 \001(\005\022"
  "\r\n\005maxxp\030\010 \001(\005\022\016\n\006health\030\t \001(\005\"\340\001\n\017CGSki"
  "llBaseData\022\014\n\004name\030\001 \001(\t\022\014\n\004info\030\002 \001(\t\022\n"
  "\n\002id\030\003 \001(\005\022\014\n\004cost\030\004 \001(\005\022\r\n\005flags\030\005 \001(\005\022"
  "\r\n\005index\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\020\n\010maxLeve"
  "l\030\010 \001(\005\022\021\n\tavailable\030\t \001(\010\022\n\n\002xp\030\n \001(\005\022\r"
  "\n\005maxxp\030\013 \001(\005\022*\n\tsubskills\030\014 \003(\0132\027.CGDat"
  "a.CGSkillBaseData\"\317\004\n\016CGAttrBaseData\022\025\n\r"
  "points_remain\030\001 \001(\005\022\030\n\020points_endurance\030"
  "\002 \001(\005\022\027\n\017points_strength\030\003 \001(\005\022\026\n\016points"
  "_defense\030\004 \001(\005\022\026\n\016points_agility\030\005 \001(\005\022\026"
  "\n\016points_magical\030\006 \001(\005\022\024\n\014value_attack\030\007"
  " \001(\005\022\027\n\017value_defensive\030\010 \001(\005\022\025\n\rvalue_a"
  "gility\030\t \001(\005\022\024\n\014value_spirit\030\n \001(\005\022\026\n\016va"
  "lue_recovery\030\013 \001(\005\022\025\n\rresist_poison\030\014 \001("
  "\005\022\024\n\014resist_sleep\030\r \001(\005\022\025\n\rresist_medusa"
  "\030\016 \001(\005\022\024\n\014resist_drunk\030\017 \001(\005\022\024\n\014resist_c"
  "haos\030\020 \001(\005\022\025\n\rresist_forget\030\021 \001(\005\022\024\n\014fix"
  "_critical\030\022 \001(\005\022\026\n\016fix_strikeback\030\023 \001(\005\022"
  "\025\n\rfix_accurancy\030\024 \001(\005\022\021\n\tfix_dodge\030\025 \001("
  "\005\022\025\n\relement_earth\030\026 \001(\005\022\025\n\relement_wate"
  "r\030\027 \001(\005\022\024\n\014element_fire\030\030 \001(\005\022\024\n\014element"
  "_wind\030\031 \001(\005\"\255\001\n\023CGCharacterPersDesc\022\022\n\nc"
  "hangeBits\030\001 \001(\005\022\020\n\010sellIcon\030\002 \001(\005\022\022\n\nsel"
  "lString\030\003 \001(\t\022\017\n\007buyIcon\030\004 \001(\005\022\021\n\tbuyStr"
  "ing\030\005 \001(\t\022\020\n\010wantIcon\030\006 \001(\005\022\022\n\nwantStrin"
  "g\030\007 \001(\t\022\022\n\ndescString\030\010 \001(\t\"\337\005\n\017CGCharac"
  "terData\022%\n\tbase_data\030\001 \001(\0132\022.CGData.CGBa"
  "seData\022\r\n\005souls\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\014\n\004"
  "gold\030\004 \001(\005\022\020\n\010image_id\030\005 \001(\005\022\r\n\005score\030\006 "
  "\001(\005\022\022\n\nskillslots\030\007 \001(\005\022\021\n\tuse_title\030\010 \001"
  "(\005\022\021\n\tavatar_id\030\t \001(\005\022\016\n\006unitid\030\n \001(\005\022\r\n"
  "\005petid\030\013 \001(\005\022\021\n\tpetriding\030\014 \001(\010\022\021\n\tdirec"
  "tion\030\r \001(\005\022\022\n\npunchclock\030\016 \001(\005\022\027\n\017usingp"
  "unchclock\030\017 \001(\010\022\013\n\003job\030\020 \001(\t\022\016\n\006titles\030\021"
  " \003(\t\022\026\n\016manu_endurance\030\022 \001(\005\022\025\n\rmanu_ski"
  "llful\030\023 \001(\005\022\031\n\021manu_intelligence\030\024 \001(\005\022\026"
  "\n\016value_charisma\030\025 \001(\005\022\t\n\001x\030\026 \001(\005\022\t\n\001y\030\027"
  " \001(\005\022\020\n\010map_name\030\030 \001(\t\022\022\n\nmap_number\030\031 \001"
  "(\005\022\023\n\013server_line\030\032 \001(\005\022&\n\006detail\030\033 \001(\0132"
  "\026.CGData.CGAttrBaseData\022&\n\005skill\030\034 \003(\0132\027"
  ".CGData.CGSkillBaseData\022\014\n\004nick\030\035 \001(\t\022.\n"
  "\tpers_desc\030\036 \001(\0132\033.CGData.CGCharacterPer"
  "sDesc\022\027\n\017battle_position\030\037 \001(\005\022\021\n\tbank_g"
  "old\030  \001(\005\022\025\n\010big_line\030! \001(\005H\000\210\001\001B\013\n\t_big"
  "_line\"\337\002\n\tCGPetData\022%\n\tbase_data\030\001 \001(\0132\022"
  ".CGData.CGBaseData\022\r\n\005index\030\002 \001(\005\022\r\n\005fla"
  "gs\030\003 \001(\005\022\024\n\014battle_flags\030\004 \001(\005\022\020\n\010loyali"
  "ty\030\005 \001(\005\022\026\n\016default_battle\030\006 \001(\010\022\r\n\005stat"
  "e\030\007 \001(\005\022\r\n\005grade\030\010 \001(\005\022\024\n\014lossMinGrade\030\t"
  " \001(\005\022\024\n\014lossMaxGrade\030\n \001(\005\022&\n\005skill\030\013 \003("
  "\0132\027.CGData.CGSkillBaseData\022&\n\006detail\030\014 \001"
  "(\0132\026.CGData.CGAttrBaseData\022\021\n\treal_name\030"
  "\r \001(\t\022\014\n\004race\030\016 \001(\005\022\022\n\nskillslots\030\017 \001(\005\""
  "\244\001\n\nCGItemData\022\020\n\010image_id\030\001 \001(\005\022\017\n\007item"
  "_id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\022\r\n"
  "\005level\030\005 \001(\005\022\014\n\004attr\030\006 \001(\t\022\014\n\004info\030\007 \001(\t"
  "\022\013\n\003pos\030\010 \001(\005\022\020\n\010assessed\030\t \001(\010\022\r\n\005count"
  "\030\n \001(\005\"9\n\021CGStoreMapRequest\022\022\n\nmap_numbe"
  "r\030\001 \001(\005\022\020\n\010map_name\030\002 \001(\t\"\024\n\022CGStoreMapR"
  "esponse\"\022\n\020CGMapDataRequest\"4\n\021CGMapData"
  "Response\022\037\n\004maps\030\001 \003(\0132\021.CGData.CGMapDat"
  "a\"Z\n\tCGMapData\022\n\n\002id\030\001 \001(\004\022\022\n\nmap_number"
  "\030\002 \001(\005\022\020\n\010map_name\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\r"
  "\n\005often\030\005 \001(\005\"\027\n\025CGPetGradeCalcRequest\"A"
  "\n\026CGPetGradeCalcResponse\022\'\n\003pet\030\001 \003(\0132\032."
  "CGData.CGPetGradeCalcData\"\267\003\n\022CGPetGrade"
  "CalcData\022\n\n\002id\030\001 \001(\004\022\016\n\006number\030\002 \001(\005\022\014\n\004"
  "name\030\003 \001(\t\022\020\n\010raceType\030\004 \001(\005\022\024\n\014raceType"
  "Name\030\005 \001(\t\022\016\n\006baseBP\030\006 \001(\001\022\022\n\ntotalGrade"
  "\030\007 \001(\005\022\023\n\013bestBPGrade\030\010 \003(\001\022\021\n\tcan_catch"
  "\030\t \001(\005\022\021\n\tcard_type\030\n \001(\005\022\020\n\010image_id\030\013 "
  "\001(\005\022\026\n\016rate_endurance\030\014 \001(\005\022\025\n\rrate_stre"
  "ngth\030\r \001(\005\022\024\n\014rate_defense\030\016 \001(\005\022\024\n\014rate"
  "_agility\030\017 \001(\005\022\024\n\014rate_magical\030\020 \001(\005\022\025\n\r"
  "element_earth\030\021 \001(\005\022\025\n\relement_water\030\022 \001"
  "(\005\022\024\n\014element_fire\030\023 \001(\005\022\024\n\014element_wind"
  "\030\024 \001(\005\022\023\n\013skill_slots\030\025 \001(\005\" \n\rCGItemReq"
  "uest\022\017\n\007item_id\030\001 \001(\005\"\300\001\n\016CGItemResponse"
  "\022\n\n\002id\030\001 \001(\004\022\017\n\007item_id\030\002 \001(\005\022\014\n\004name\030\003 "
  "\001(\t\022\014\n\004type\030\004 \001(\005\022\r\n\005price\030\005 \001(\005\022\017\n\007maxp"
  "ile\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\026\n\016sellLimitCou"
  "nt\030\010 \001(\005\022\021\n\tattribute\030\t \001(\t\022\014\n\004desc\030\n \001("
  "\t\022\r\n\005exist\030\013 \001(\010\"\273\001\n\022CGStoreItemRequest\022"
  "\017\n\007item_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004type\030\003"
  " \001(\005\022\r\n\005price\030\004 \001(\005\022\017\n\007maxpile\030\005 \001(\005\022\r\n\005"
  "level\030\006 \001(\005\022\026\n\016sellLimitCount\030\007 \001(\005\022\021\n\ta"
  "ttribute\030\010 \001(\t\022\014\n\004desc\030\t \001(\t\022\020\n\010assessed"
  "\030\n \001(\010\"4\n\023CGStoreItemResponse\022\n\n\002id\030\001 \001("
  "\005\022\021\n\tmaybeName\030\002 \001(\t\"\014\n\nCGVoidData\"\031\n\nCG"
  "BoolData\022\013\n\003val\030\001 \001(\010\"\030\n\tCGIntData\022\013\n\003va"
  "l\030\001 \001(\005\"\223\001\n\021CGSysTimeResponse\022\r\n\005years\030\001"
  " \001(\005\022\r\n\005month\030\002 \001(\005\022\014\n\004days\030\003 \001(\005\022\r\n\005hou"
  "rs\030\004 \001(\005\022\014\n\004mins\030\005 \001(\005\022\014\n\004secs\030\006 \001(\005\022\022\n\n"
  "local_time\030\007 \001(\005\022\023\n\013server_time\030\010 \001(\005\"8\n"
  "\027CGPlayerFlagEnabledData\022\r\n\005index\030\001 \001(\005\022"
  "\016\n\006enable\030\002 \001(\0102\237\004\n\014MLRpcService\022:\n\nInit"
  "ialize\022\030.CGData.CGGmeTypeRequest\032\022.CGDat"
  "a.CGVoidData\0221\n\007Connect\022\022.CGData.CGVoidD"
  "ata\032\022.CGData.CGBoolData\0221\n\010IsInGame\022\022.CG"
  "Data.CGVoidData\032\021.CGData.CGIntData\0227\n\016Ge"
  "tWorldStatus\022\022.CGData.CGVoidData\032\021.CGDat"
  "a.CGIntData\0226\n\rGetGameStatus\022\022.CGData.CG"
  "VoidData\032\021.CGData.CGIntData\0224\n\013GetBGMInd"
  "ex\022\022.CGData.CGVoidData\032\021.CGData.CGIntDat"
  "a\022;\n\nGetSysTime\022\022.CGData.CGVoidData\032\031.CG"
  "Data.CGSysTimeResponse\022<\n\rGetPlayerInfo\022"
  "\022.CGData.CGVoidData\032\027.CGData.CGCharacter"
  "Data\022K\n\024SetPlayerFlagEnabled\022\037.CGData.CG"
  "PlayerFlagEnabledData\032\022.CGData.CGVoidDat"
  "a2\233\014\n\014CGRpcService\022>\n\rGetCGItemData\022\025.CG"
  "Data.CGItemRequest\032\026.CGData.CGItemRespon"
  "se\0229\n\017GetConnectState\022\022.CGData.CGVoidDat"
  "a\032\022.CGData.CGVoidData\022V\n\023GetPetGradeCalc"
  "Data\022\035.CGData.CGPetGradeCalcRequest\032\036.CG"
  "Data.CGPetGradeCalcResponse\"\000\022N\n\025GetServ"
  "erStoreMapData\022\030.CGData.CGMapDataRequest"
  "\032\031.CGData.CGMapDataResponse\"\000\022L\n\017StoreCG"
  "ItemData\022\032.CGData.CGStoreItemRequest\032\033.C"
  "GData.CGStoreItemResponse\"\000\022I\n\016StoreCGMa"
  "pData\022\031.CGData.CGStoreMapRequest\032\032.CGDat"
  "a.CGStoreMapResponse\"\000\022N\n\rUploadGidData\022"
  "\034.CGData.UploadGidDataRequest\032\035.CGData.U"
  "ploadGidDataResponse\"\000\022Z\n\021UploadGidBankD"
  "ata\022 .CGData.UploadGidBankDataRequest\032!."
  "CGData.UploadGidBankDataResponse\"\000\022P\n\rUp"
  "loadMapData\022\034.CGData.UploadMapDataReques"
  "t\032\035.CGData.UploadMapDataResponse\"\000(\001\022V\n\017"
  "DownloadMapData\022\036.CGData.DownloadMapData"
  "Request\032\037.CGData.DownloadMapDataResponse"
  "\"\0000\001\022c\n\024UploadCharcterServer\022#.CGData.Up"
  "loadCharcterServerRequest\032$.CGData.Uploa"
  "dCharcterServerResponse\"\000\022/\n\007Publish\022\021.C"
  "GData.StringPub\032\021.CGData.StringPub\0223\n\tSu"
  "bscribe\022\021.CGData.StringPub\032\021.CGData.Stri"
  "ngPub0\001\022c\n\024SelectAccountGidData\022#.CGData"
  ".SelectAccountGidDataRequest\032$.CGData.Se"
  "lectAccountGidDataResponse\"\000\022N\n\rSelectGi"
  "dData\022\034.CGData.SelectGidDataRequest\032\035.CG"
  "Data.SelectGidDataResponse\"\000\022\\\n\024SelectDs"
  "tTypeGidData\022\034.CGData.SelectGidDataReque"
  "st\032$.CGData.SelectAccountGidDataResponse"
  "\"\000\022f\n\025SelectCharacterServer\022$.CGData.Sel"
  "ectCharacterServerRequest\032%.CGData.Selec"
  "tCharacterServerResponse\"\000\022Q\n\016SelectTask"
  "Info\022\035.CGData.SelectTaskInfoRequest\032\036.CG"
  "Data.SelectTaskInfoResponse\"\000\022`\n\023SelectC"
  "haracterData\022\".CGData.SelectCharacterDat"
  "aRequest\032#.CGData.SelectCharacterDataRes"
  "ponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CGData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CGData_2eproto = {
  false, false, 8335, descriptor_table_protodef_CGData_2eproto, "CGData.proto", 
  &descriptor_table_CGData_2eproto_once, nullptr, 0, 47,
  schemas, file_default_instances, TableStruct_CGData_2eproto::offsets,
  file_level_metadata_CGData_2eproto, file_level_enum_descriptors_CGData_2eproto, file_level_service_descriptors_CGData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CGData_2eproto_getter() {
  return &descriptor_table_CGData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CGData_2eproto(&descriptor_table_CGData_2eproto);
namespace CGData {

// ===================================================================

class CGGmeTypeRequest::_Internal {
 public:
};

CGGmeTypeRequest::CGGmeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGGmeTypeRequest)
}
CGGmeTypeRequest::CGGmeTypeRequest(const CGGmeTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGGmeTypeRequest)
}

inline void CGGmeTypeRequest::SharedCtor() {
type_ = 0;
}

CGGmeTypeRequest::~CGGmeTypeRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGGmeTypeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGGmeTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGmeTypeRequest::ArenaDtor(void* object) {
  CGGmeTypeRequest* _this = reinterpret_cast< CGGmeTypeRequest* >(object);
  (void)_this;
}
void CGGmeTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGGmeTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGGmeTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGGmeTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGmeTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGGmeTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGGmeTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGGmeTypeRequest)
  return target;
}

size_t CGGmeTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGGmeTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGmeTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGGmeTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGmeTypeRequest::GetClassData() const { return &_class_data_; }

void CGGmeTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGGmeTypeRequest *>(to)->MergeFrom(
      static_cast<const CGGmeTypeRequest &>(from));
}


void CGGmeTypeRequest::MergeFrom(const CGGmeTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGGmeTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGmeTypeRequest::CopyFrom(const CGGmeTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGGmeTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGmeTypeRequest::IsInitialized() const {
  return true;
}

void CGGmeTypeRequest::InternalSwap(CGGmeTypeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGmeTypeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[0]);
}

// ===================================================================

class StringPub::_Internal {
 public:
};

StringPub::StringPub(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.StringPub)
}
StringPub::StringPub(const StringPub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGData.StringPub)
}

inline void StringPub::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringPub::~StringPub() {
  // @@protoc_insertion_point(destructor:CGData.StringPub)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringPub::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringPub::ArenaDtor(void* object) {
  StringPub* _this = reinterpret_cast< StringPub* >(object);
  (void)_this;
}
void StringPub::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringPub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringPub::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.StringPub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringPub::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.StringPub.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringPub::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.StringPub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.StringPub.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.StringPub)
  return target;
}

size_t StringPub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.StringPub)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringPub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringPub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringPub::GetClassData() const { return &_class_data_; }

void StringPub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StringPub *>(to)->MergeFrom(
      static_cast<const StringPub &>(from));
}


void StringPub::MergeFrom(const StringPub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.StringPub)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringPub::CopyFrom(const StringPub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.StringPub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPub::IsInitialized() const {
  return true;
}

void StringPub::InternalSwap(StringPub* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringPub::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[1]);
}

// ===================================================================

class UploadGidDataRequest::_Internal {
 public:
  static const ::CGData::CGCharacterData& character_data(const UploadGidDataRequest* msg);
};

const ::CGData::CGCharacterData&
UploadGidDataRequest::_Internal::character_data(const UploadGidDataRequest* msg) {
  return *msg->character_data_;
}
UploadGidDataRequest::UploadGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pet_data_(arena),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadGidDataRequest)
}
UploadGidDataRequest::UploadGidDataRequest(const UploadGidDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pet_data_(from.pet_data_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gid().empty()) {
    gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gid(), 
      GetArenaForAllocation());
  }
  character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_character_name().empty()) {
    character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_character_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_character_data()) {
    character_data_ = new ::CGData::CGCharacterData(*from.character_data_);
  } else {
    character_data_ = nullptr;
  }
  ::memcpy(&role_type_, &from.role_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&role_type_)) + sizeof(big_line_));
  // @@protoc_insertion_point(copy_constructor:CGData.UploadGidDataRequest)
}

inline void UploadGidDataRequest::SharedCtor() {
gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&character_data_)) + sizeof(big_line_));
}

UploadGidDataRequest::~UploadGidDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.UploadGidDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadGidDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_data_;
}

void UploadGidDataRequest::ArenaDtor(void* object) {
  UploadGidDataRequest* _this = reinterpret_cast< UploadGidDataRequest* >(object);
  (void)_this;
}
void UploadGidDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGidDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadGidDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_data_.Clear();
  items_.Clear();
  gid_.ClearToEmpty();
  character_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
  ::memset(&role_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_line_) -
      reinterpret_cast<char*>(&role_type_)) + sizeof(big_line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGidDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadGidDataRequest.gid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string character_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_character_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadGidDataRequest.character_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CGData.CGCharacterData character_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGPetData pet_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGItemData items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 role_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          role_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGidDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadGidDataRequest.gid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gid(), target);
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character_name().data(), static_cast<int>(this->_internal_character_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadGidDataRequest.character_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_character_name(), target);
  }

  // .CGData.CGCharacterData character_data = 3;
  if (this->_internal_has_character_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::character_data(this), target, stream);
  }

  // repeated .CGData.CGPetData pet_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pet_data(i), target, stream);
  }

  // repeated .CGData.CGItemData items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  // int32 role_type = 6;
  if (this->_internal_role_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_role_type(), target);
  }

  // int32 big_line = 7;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_big_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadGidDataRequest)
  return target;
}

size_t UploadGidDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadGidDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGPetData pet_data = 4;
  total_size += 1UL * this->_internal_pet_data_size();
  for (const auto& msg : this->pet_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGData.CGItemData items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_name());
  }

  // .CGData.CGCharacterData character_data = 3;
  if (this->_internal_has_character_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_data_);
  }

  // int32 role_type = 6;
  if (this->_internal_role_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_type());
  }

  // int32 big_line = 7;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadGidDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadGidDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadGidDataRequest::GetClassData() const { return &_class_data_; }

void UploadGidDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadGidDataRequest *>(to)->MergeFrom(
      static_cast<const UploadGidDataRequest &>(from));
}


void UploadGidDataRequest::MergeFrom(const UploadGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadGidDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_data_.MergeFrom(from.pet_data_);
  items_.MergeFrom(from.items_);
  if (!from._internal_gid().empty()) {
    _internal_set_gid(from._internal_gid());
  }
  if (!from._internal_character_name().empty()) {
    _internal_set_character_name(from._internal_character_name());
  }
  if (from._internal_has_character_data()) {
    _internal_mutable_character_data()->::CGData::CGCharacterData::MergeFrom(from._internal_character_data());
  }
  if (from._internal_role_type() != 0) {
    _internal_set_role_type(from._internal_role_type());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadGidDataRequest::CopyFrom(const UploadGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadGidDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGidDataRequest::IsInitialized() const {
  return true;
}

void UploadGidDataRequest::InternalSwap(UploadGidDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pet_data_.InternalSwap(&other->pet_data_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gid_, GetArenaForAllocation(),
      &other->gid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &character_name_, GetArenaForAllocation(),
      &other->character_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadGidDataRequest, big_line_)
      + sizeof(UploadGidDataRequest::big_line_)
      - PROTOBUF_FIELD_OFFSET(UploadGidDataRequest, character_data_)>(
          reinterpret_cast<char*>(&character_data_),
          reinterpret_cast<char*>(&other->character_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGidDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[2]);
}

// ===================================================================

class UploadGidDataResponse::_Internal {
 public:
};

UploadGidDataResponse::UploadGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadGidDataResponse)
}
UploadGidDataResponse::UploadGidDataResponse(const UploadGidDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.UploadGidDataResponse)
}

inline void UploadGidDataResponse::SharedCtor() {
}

UploadGidDataResponse::~UploadGidDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.UploadGidDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadGidDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadGidDataResponse::ArenaDtor(void* object) {
  UploadGidDataResponse* _this = reinterpret_cast< UploadGidDataResponse* >(object);
  (void)_this;
}
void UploadGidDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGidDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadGidDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGidDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGidDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadGidDataResponse)
  return target;
}

size_t UploadGidDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadGidDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadGidDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadGidDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadGidDataResponse::GetClassData() const { return &_class_data_; }

void UploadGidDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadGidDataResponse *>(to)->MergeFrom(
      static_cast<const UploadGidDataResponse &>(from));
}


void UploadGidDataResponse::MergeFrom(const UploadGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadGidDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadGidDataResponse::CopyFrom(const UploadGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadGidDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGidDataResponse::IsInitialized() const {
  return true;
}

void UploadGidDataResponse::InternalSwap(UploadGidDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGidDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[3]);
}

// ===================================================================

class UploadGidBankDataRequest::_Internal {
 public:
};

UploadGidBankDataRequest::UploadGidBankDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pet_data_(arena),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadGidBankDataRequest)
}
UploadGidBankDataRequest::UploadGidBankDataRequest(const UploadGidBankDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pet_data_(from.pet_data_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gid().empty()) {
    gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gid(), 
      GetArenaForAllocation());
  }
  character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_character_name().empty()) {
    character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_character_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(big_line_));
  // @@protoc_insertion_point(copy_constructor:CGData.UploadGidBankDataRequest)
}

inline void UploadGidBankDataRequest::SharedCtor() {
gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(big_line_));
}

UploadGidBankDataRequest::~UploadGidBankDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.UploadGidBankDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadGidBankDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadGidBankDataRequest::ArenaDtor(void* object) {
  UploadGidBankDataRequest* _this = reinterpret_cast< UploadGidBankDataRequest* >(object);
  (void)_this;
}
void UploadGidBankDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGidBankDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadGidBankDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadGidBankDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_data_.Clear();
  items_.Clear();
  gid_.ClearToEmpty();
  character_name_.ClearToEmpty();
  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_line_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(big_line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGidBankDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadGidBankDataRequest.gid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string character_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_character_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadGidBankDataRequest.character_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGPetData pet_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGItemData items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 role_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          role_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGidBankDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadGidBankDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadGidBankDataRequest.gid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gid(), target);
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character_name().data(), static_cast<int>(this->_internal_character_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadGidBankDataRequest.character_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_character_name(), target);
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold(), target);
  }

  // repeated .CGData.CGPetData pet_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pet_data(i), target, stream);
  }

  // repeated .CGData.CGItemData items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  // int32 role_type = 6;
  if (this->_internal_role_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_role_type(), target);
  }

  // int32 big_line = 7;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_big_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadGidBankDataRequest)
  return target;
}

size_t UploadGidBankDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadGidBankDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGPetData pet_data = 4;
  total_size += 1UL * this->_internal_pet_data_size();
  for (const auto& msg : this->pet_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGData.CGItemData items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_name());
  }

  // int32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 role_type = 6;
  if (this->_internal_role_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_type());
  }

  // int32 big_line = 7;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadGidBankDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadGidBankDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadGidBankDataRequest::GetClassData() const { return &_class_data_; }

void UploadGidBankDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadGidBankDataRequest *>(to)->MergeFrom(
      static_cast<const UploadGidBankDataRequest &>(from));
}


void UploadGidBankDataRequest::MergeFrom(const UploadGidBankDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadGidBankDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_data_.MergeFrom(from.pet_data_);
  items_.MergeFrom(from.items_);
  if (!from._internal_gid().empty()) {
    _internal_set_gid(from._internal_gid());
  }
  if (!from._internal_character_name().empty()) {
    _internal_set_character_name(from._internal_character_name());
  }
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from._internal_role_type() != 0) {
    _internal_set_role_type(from._internal_role_type());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadGidBankDataRequest::CopyFrom(const UploadGidBankDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadGidBankDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGidBankDataRequest::IsInitialized() const {
  return true;
}

void UploadGidBankDataRequest::InternalSwap(UploadGidBankDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pet_data_.InternalSwap(&other->pet_data_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gid_, GetArenaForAllocation(),
      &other->gid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &character_name_, GetArenaForAllocation(),
      &other->character_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadGidBankDataRequest, big_line_)
      + sizeof(UploadGidBankDataRequest::big_line_)
      - PROTOBUF_FIELD_OFFSET(UploadGidBankDataRequest, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGidBankDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[4]);
}

// ===================================================================

class UploadGidBankDataResponse::_Internal {
 public:
};

UploadGidBankDataResponse::UploadGidBankDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadGidBankDataResponse)
}
UploadGidBankDataResponse::UploadGidBankDataResponse(const UploadGidBankDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.UploadGidBankDataResponse)
}

inline void UploadGidBankDataResponse::SharedCtor() {
}

UploadGidBankDataResponse::~UploadGidBankDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.UploadGidBankDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadGidBankDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadGidBankDataResponse::ArenaDtor(void* object) {
  UploadGidBankDataResponse* _this = reinterpret_cast< UploadGidBankDataResponse* >(object);
  (void)_this;
}
void UploadGidBankDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGidBankDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadGidBankDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadGidBankDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGidBankDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGidBankDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadGidBankDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadGidBankDataResponse)
  return target;
}

size_t UploadGidBankDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadGidBankDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadGidBankDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadGidBankDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadGidBankDataResponse::GetClassData() const { return &_class_data_; }

void UploadGidBankDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadGidBankDataResponse *>(to)->MergeFrom(
      static_cast<const UploadGidBankDataResponse &>(from));
}


void UploadGidBankDataResponse::MergeFrom(const UploadGidBankDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadGidBankDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadGidBankDataResponse::CopyFrom(const UploadGidBankDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadGidBankDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGidBankDataResponse::IsInitialized() const {
  return true;
}

void UploadGidBankDataResponse::InternalSwap(UploadGidBankDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGidBankDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[5]);
}

// ===================================================================

class UploadMapDataRequest::_Internal {
 public:
};

UploadMapDataRequest::UploadMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadMapDataRequest)
}
UploadMapDataRequest::UploadMapDataRequest(const UploadMapDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverline().empty()) {
    serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverline(), 
      GetArenaForAllocation());
  }
  maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maptype().empty()) {
    maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maptype(), 
      GetArenaForAllocation());
  }
  filetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filetime().empty()) {
    filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filetime(), 
      GetArenaForAllocation());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagedata().empty()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGData.UploadMapDataRequest)
}

inline void UploadMapDataRequest::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UploadMapDataRequest::~UploadMapDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.UploadMapDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadMapDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadMapDataRequest::ArenaDtor(void* object) {
  UploadMapDataRequest* _this = reinterpret_cast< UploadMapDataRequest* >(object);
  (void)_this;
}
void UploadMapDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadMapDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadMapDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  serverline_.ClearToEmpty();
  maptype_.ClearToEmpty();
  filetime_.ClearToEmpty();
  imagedata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadMapDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadMapDataRequest.FileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serverline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadMapDataRequest.ServerLine"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MapType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_maptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadMapDataRequest.MapType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fileTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadMapDataRequest.fileTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadMapDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadMapDataRequest.FileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverline().data(), static_cast<int>(this->_internal_serverline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadMapDataRequest.ServerLine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serverline(), target);
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maptype().data(), static_cast<int>(this->_internal_maptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadMapDataRequest.MapType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maptype(), target);
  }

  // string fileTime = 4;
  if (!this->_internal_filetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filetime().data(), static_cast<int>(this->_internal_filetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadMapDataRequest.fileTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filetime(), target);
  }

  // bytes ImageData = 5;
  if (!this->_internal_imagedata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_imagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadMapDataRequest)
  return target;
}

size_t UploadMapDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadMapDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverline());
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maptype());
  }

  // string fileTime = 4;
  if (!this->_internal_filetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filetime());
  }

  // bytes ImageData = 5;
  if (!this->_internal_imagedata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadMapDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadMapDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadMapDataRequest::GetClassData() const { return &_class_data_; }

void UploadMapDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadMapDataRequest *>(to)->MergeFrom(
      static_cast<const UploadMapDataRequest &>(from));
}


void UploadMapDataRequest::MergeFrom(const UploadMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadMapDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (!from._internal_serverline().empty()) {
    _internal_set_serverline(from._internal_serverline());
  }
  if (!from._internal_maptype().empty()) {
    _internal_set_maptype(from._internal_maptype());
  }
  if (!from._internal_filetime().empty()) {
    _internal_set_filetime(from._internal_filetime());
  }
  if (!from._internal_imagedata().empty()) {
    _internal_set_imagedata(from._internal_imagedata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadMapDataRequest::CopyFrom(const UploadMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadMapDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMapDataRequest::IsInitialized() const {
  return true;
}

void UploadMapDataRequest::InternalSwap(UploadMapDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverline_, GetArenaForAllocation(),
      &other->serverline_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maptype_, GetArenaForAllocation(),
      &other->maptype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filetime_, GetArenaForAllocation(),
      &other->filetime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagedata_, GetArenaForAllocation(),
      &other->imagedata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadMapDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[6]);
}

// ===================================================================

class UploadMapDataResponse::_Internal {
 public:
};

UploadMapDataResponse::UploadMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadMapDataResponse)
}
UploadMapDataResponse::UploadMapDataResponse(const UploadMapDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.UploadMapDataResponse)
}

inline void UploadMapDataResponse::SharedCtor() {
}

UploadMapDataResponse::~UploadMapDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.UploadMapDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadMapDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadMapDataResponse::ArenaDtor(void* object) {
  UploadMapDataResponse* _this = reinterpret_cast< UploadMapDataResponse* >(object);
  (void)_this;
}
void UploadMapDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadMapDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadMapDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadMapDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadMapDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadMapDataResponse)
  return target;
}

size_t UploadMapDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadMapDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadMapDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadMapDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadMapDataResponse::GetClassData() const { return &_class_data_; }

void UploadMapDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadMapDataResponse *>(to)->MergeFrom(
      static_cast<const UploadMapDataResponse &>(from));
}


void UploadMapDataResponse::MergeFrom(const UploadMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadMapDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadMapDataResponse::CopyFrom(const UploadMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadMapDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMapDataResponse::IsInitialized() const {
  return true;
}

void UploadMapDataResponse::InternalSwap(UploadMapDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadMapDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[7]);
}

// ===================================================================

class DownloadMapDataRequest::_Internal {
 public:
};

DownloadMapDataRequest::DownloadMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.DownloadMapDataRequest)
}
DownloadMapDataRequest::DownloadMapDataRequest(const DownloadMapDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverline().empty()) {
    serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverline(), 
      GetArenaForAllocation());
  }
  maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maptype().empty()) {
    maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maptype(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGData.DownloadMapDataRequest)
}

inline void DownloadMapDataRequest::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DownloadMapDataRequest::~DownloadMapDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.DownloadMapDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadMapDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadMapDataRequest::ArenaDtor(void* object) {
  DownloadMapDataRequest* _this = reinterpret_cast< DownloadMapDataRequest* >(object);
  (void)_this;
}
void DownloadMapDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadMapDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadMapDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.DownloadMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  serverline_.ClearToEmpty();
  maptype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadMapDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataRequest.FileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serverline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataRequest.ServerLine"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MapType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_maptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataRequest.MapType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadMapDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.DownloadMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataRequest.FileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverline().data(), static_cast<int>(this->_internal_serverline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataRequest.ServerLine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serverline(), target);
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maptype().data(), static_cast<int>(this->_internal_maptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataRequest.MapType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.DownloadMapDataRequest)
  return target;
}

size_t DownloadMapDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.DownloadMapDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverline());
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maptype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadMapDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadMapDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadMapDataRequest::GetClassData() const { return &_class_data_; }

void DownloadMapDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadMapDataRequest *>(to)->MergeFrom(
      static_cast<const DownloadMapDataRequest &>(from));
}


void DownloadMapDataRequest::MergeFrom(const DownloadMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.DownloadMapDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (!from._internal_serverline().empty()) {
    _internal_set_serverline(from._internal_serverline());
  }
  if (!from._internal_maptype().empty()) {
    _internal_set_maptype(from._internal_maptype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadMapDataRequest::CopyFrom(const DownloadMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.DownloadMapDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapDataRequest::IsInitialized() const {
  return true;
}

void DownloadMapDataRequest::InternalSwap(DownloadMapDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverline_, GetArenaForAllocation(),
      &other->serverline_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maptype_, GetArenaForAllocation(),
      &other->maptype_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadMapDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[8]);
}

// ===================================================================

class DownloadMapDataResponse::_Internal {
 public:
};

DownloadMapDataResponse::DownloadMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.DownloadMapDataResponse)
}
DownloadMapDataResponse::DownloadMapDataResponse(const DownloadMapDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverline().empty()) {
    serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverline(), 
      GetArenaForAllocation());
  }
  maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maptype().empty()) {
    maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maptype(), 
      GetArenaForAllocation());
  }
  filetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filetime().empty()) {
    filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filetime(), 
      GetArenaForAllocation());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagedata().empty()) {
    imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagedata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGData.DownloadMapDataResponse)
}

inline void DownloadMapDataResponse::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serverline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DownloadMapDataResponse::~DownloadMapDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.DownloadMapDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadMapDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadMapDataResponse::ArenaDtor(void* object) {
  DownloadMapDataResponse* _this = reinterpret_cast< DownloadMapDataResponse* >(object);
  (void)_this;
}
void DownloadMapDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadMapDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadMapDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.DownloadMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  serverline_.ClearToEmpty();
  maptype_.ClearToEmpty();
  filetime_.ClearToEmpty();
  imagedata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadMapDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataResponse.FileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerLine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serverline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataResponse.ServerLine"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MapType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_maptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataResponse.MapType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fileTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.DownloadMapDataResponse.fileTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadMapDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.DownloadMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataResponse.FileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverline().data(), static_cast<int>(this->_internal_serverline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataResponse.ServerLine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serverline(), target);
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maptype().data(), static_cast<int>(this->_internal_maptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataResponse.MapType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maptype(), target);
  }

  // string fileTime = 4;
  if (!this->_internal_filetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filetime().data(), static_cast<int>(this->_internal_filetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.DownloadMapDataResponse.fileTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filetime(), target);
  }

  // bytes ImageData = 5;
  if (!this->_internal_imagedata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_imagedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.DownloadMapDataResponse)
  return target;
}

size_t DownloadMapDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.DownloadMapDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FileName = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string ServerLine = 2;
  if (!this->_internal_serverline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverline());
  }

  // string MapType = 3;
  if (!this->_internal_maptype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maptype());
  }

  // string fileTime = 4;
  if (!this->_internal_filetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filetime());
  }

  // bytes ImageData = 5;
  if (!this->_internal_imagedata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadMapDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadMapDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadMapDataResponse::GetClassData() const { return &_class_data_; }

void DownloadMapDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DownloadMapDataResponse *>(to)->MergeFrom(
      static_cast<const DownloadMapDataResponse &>(from));
}


void DownloadMapDataResponse::MergeFrom(const DownloadMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.DownloadMapDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (!from._internal_serverline().empty()) {
    _internal_set_serverline(from._internal_serverline());
  }
  if (!from._internal_maptype().empty()) {
    _internal_set_maptype(from._internal_maptype());
  }
  if (!from._internal_filetime().empty()) {
    _internal_set_filetime(from._internal_filetime());
  }
  if (!from._internal_imagedata().empty()) {
    _internal_set_imagedata(from._internal_imagedata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadMapDataResponse::CopyFrom(const DownloadMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.DownloadMapDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMapDataResponse::IsInitialized() const {
  return true;
}

void DownloadMapDataResponse::InternalSwap(DownloadMapDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverline_, GetArenaForAllocation(),
      &other->serverline_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maptype_, GetArenaForAllocation(),
      &other->maptype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filetime_, GetArenaForAllocation(),
      &other->filetime_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagedata_, GetArenaForAllocation(),
      &other->imagedata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadMapDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[9]);
}

// ===================================================================

class UploadCharcterServerRequest::_Internal {
 public:
};

UploadCharcterServerRequest::UploadCharcterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadCharcterServerRequest)
}
UploadCharcterServerRequest::UploadCharcterServerRequest(const UploadCharcterServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_char_name().empty()) {
    char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_char_name(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&big_line_, &from.big_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:CGData.UploadCharcterServerRequest)
}

inline void UploadCharcterServerRequest::SharedCtor() {
char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&big_line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
}

UploadCharcterServerRequest::~UploadCharcterServerRequest() {
  // @@protoc_insertion_point(destructor:CGData.UploadCharcterServerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadCharcterServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  char_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadCharcterServerRequest::ArenaDtor(void* object) {
  UploadCharcterServerRequest* _this = reinterpret_cast< UploadCharcterServerRequest* >(object);
  (void)_this;
}
void UploadCharcterServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadCharcterServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadCharcterServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadCharcterServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_name_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&big_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadCharcterServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string char_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_char_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadCharcterServerRequest.char_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.UploadCharcterServerRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadCharcterServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadCharcterServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_char_name().data(), static_cast<int>(this->_internal_char_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadCharcterServerRequest.char_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_char_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.UploadCharcterServerRequest.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // int32 online = 5;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadCharcterServerRequest)
  return target;
}

size_t UploadCharcterServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadCharcterServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_char_name());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 online = 5;
  if (this->_internal_online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadCharcterServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadCharcterServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadCharcterServerRequest::GetClassData() const { return &_class_data_; }

void UploadCharcterServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadCharcterServerRequest *>(to)->MergeFrom(
      static_cast<const UploadCharcterServerRequest &>(from));
}


void UploadCharcterServerRequest::MergeFrom(const UploadCharcterServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadCharcterServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_char_name().empty()) {
    _internal_set_char_name(from._internal_char_name());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadCharcterServerRequest::CopyFrom(const UploadCharcterServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadCharcterServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCharcterServerRequest::IsInitialized() const {
  return true;
}

void UploadCharcterServerRequest::InternalSwap(UploadCharcterServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &char_name_, GetArenaForAllocation(),
      &other->char_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadCharcterServerRequest, online_)
      + sizeof(UploadCharcterServerRequest::online_)
      - PROTOBUF_FIELD_OFFSET(UploadCharcterServerRequest, big_line_)>(
          reinterpret_cast<char*>(&big_line_),
          reinterpret_cast<char*>(&other->big_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadCharcterServerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[10]);
}

// ===================================================================

class UploadCharcterServerResponse::_Internal {
 public:
};

UploadCharcterServerResponse::UploadCharcterServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.UploadCharcterServerResponse)
}
UploadCharcterServerResponse::UploadCharcterServerResponse(const UploadCharcterServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.UploadCharcterServerResponse)
}

inline void UploadCharcterServerResponse::SharedCtor() {
}

UploadCharcterServerResponse::~UploadCharcterServerResponse() {
  // @@protoc_insertion_point(destructor:CGData.UploadCharcterServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadCharcterServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadCharcterServerResponse::ArenaDtor(void* object) {
  UploadCharcterServerResponse* _this = reinterpret_cast< UploadCharcterServerResponse* >(object);
  (void)_this;
}
void UploadCharcterServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadCharcterServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadCharcterServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.UploadCharcterServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadCharcterServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadCharcterServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.UploadCharcterServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.UploadCharcterServerResponse)
  return target;
}

size_t UploadCharcterServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.UploadCharcterServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadCharcterServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadCharcterServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadCharcterServerResponse::GetClassData() const { return &_class_data_; }

void UploadCharcterServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UploadCharcterServerResponse *>(to)->MergeFrom(
      static_cast<const UploadCharcterServerResponse &>(from));
}


void UploadCharcterServerResponse::MergeFrom(const UploadCharcterServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.UploadCharcterServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadCharcterServerResponse::CopyFrom(const UploadCharcterServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.UploadCharcterServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCharcterServerResponse::IsInitialized() const {
  return true;
}

void UploadCharcterServerResponse::InternalSwap(UploadCharcterServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadCharcterServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[11]);
}

// ===================================================================

class CGAccountGidData::_Internal {
 public:
};

CGAccountGidData::CGAccountGidData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGAccountGidData)
}
CGAccountGidData::CGAccountGidData(const CGAccountGidData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gid().empty()) {
    gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGAccountGidData)
}

inline void CGAccountGidData::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(character_));
}

CGAccountGidData::~CGAccountGidData() {
  // @@protoc_insertion_point(destructor:CGData.CGAccountGidData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGAccountGidData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGAccountGidData::ArenaDtor(void* object) {
  CGAccountGidData* _this = reinterpret_cast< CGAccountGidData* >(object);
  (void)_this;
}
void CGAccountGidData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGAccountGidData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGAccountGidData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGAccountGidData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  gid_.ClearToEmpty();
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAccountGidData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGAccountGidData.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGAccountGidData.gid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          big_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 character = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGAccountGidData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGAccountGidData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGAccountGidData.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string gid = 2;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGAccountGidData.gid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gid(), target);
  }

  // int32 game_type = 3;
  if (this->_internal_game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_type(), target);
  }

  // int32 big_server = 4;
  if (this->_internal_big_server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_big_server(), target);
  }

  // uint32 server_line = 5;
  if (this->_internal_server_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_line(), target);
  }

  // int32 character = 6;
  if (this->_internal_character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGAccountGidData)
  return target;
}

size_t CGAccountGidData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGAccountGidData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string gid = 2;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // int32 game_type = 3;
  if (this->_internal_game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_type());
  }

  // int32 big_server = 4;
  if (this->_internal_big_server() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_server());
  }

  // uint32 server_line = 5;
  if (this->_internal_server_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_line());
  }

  // int32 character = 6;
  if (this->_internal_character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAccountGidData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGAccountGidData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAccountGidData::GetClassData() const { return &_class_data_; }

void CGAccountGidData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGAccountGidData *>(to)->MergeFrom(
      static_cast<const CGAccountGidData &>(from));
}


void CGAccountGidData::MergeFrom(const CGAccountGidData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGAccountGidData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_gid().empty()) {
    _internal_set_gid(from._internal_gid());
  }
  if (from._internal_game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from._internal_big_server() != 0) {
    _internal_set_big_server(from._internal_big_server());
  }
  if (from._internal_server_line() != 0) {
    _internal_set_server_line(from._internal_server_line());
  }
  if (from._internal_character() != 0) {
    _internal_set_character(from._internal_character());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAccountGidData::CopyFrom(const CGAccountGidData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGAccountGidData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAccountGidData::IsInitialized() const {
  return true;
}

void CGAccountGidData::InternalSwap(CGAccountGidData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gid_, GetArenaForAllocation(),
      &other->gid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAccountGidData, character_)
      + sizeof(CGAccountGidData::character_)
      - PROTOBUF_FIELD_OFFSET(CGAccountGidData, game_type_)>(
          reinterpret_cast<char*>(&game_type_),
          reinterpret_cast<char*>(&other->game_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAccountGidData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[12]);
}

// ===================================================================

class SelectAccountGidDataRequest::_Internal {
 public:
};

SelectAccountGidDataRequest::SelectAccountGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectAccountGidDataRequest)
}
SelectAccountGidDataRequest::SelectAccountGidDataRequest(const SelectAccountGidDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGData.SelectAccountGidDataRequest)
}

inline void SelectAccountGidDataRequest::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectAccountGidDataRequest::~SelectAccountGidDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.SelectAccountGidDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectAccountGidDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectAccountGidDataRequest::ArenaDtor(void* object) {
  SelectAccountGidDataRequest* _this = reinterpret_cast< SelectAccountGidDataRequest* >(object);
  (void)_this;
}
void SelectAccountGidDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectAccountGidDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectAccountGidDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectAccountGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectAccountGidDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectAccountGidDataRequest.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectAccountGidDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectAccountGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectAccountGidDataRequest.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectAccountGidDataRequest)
  return target;
}

size_t SelectAccountGidDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectAccountGidDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectAccountGidDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectAccountGidDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectAccountGidDataRequest::GetClassData() const { return &_class_data_; }

void SelectAccountGidDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectAccountGidDataRequest *>(to)->MergeFrom(
      static_cast<const SelectAccountGidDataRequest &>(from));
}


void SelectAccountGidDataRequest::MergeFrom(const SelectAccountGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectAccountGidDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectAccountGidDataRequest::CopyFrom(const SelectAccountGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectAccountGidDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectAccountGidDataRequest::IsInitialized() const {
  return true;
}

void SelectAccountGidDataRequest::InternalSwap(SelectAccountGidDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectAccountGidDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[13]);
}

// ===================================================================

class SelectGidDataRequest::_Internal {
 public:
};

SelectGidDataRequest::SelectGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectGidDataRequest)
}
SelectGidDataRequest::SelectGidDataRequest(const SelectGidDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gid().empty()) {
    gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gid(), 
      GetArenaForAllocation());
  }
  role_type_ = from.role_type_;
  // @@protoc_insertion_point(copy_constructor:CGData.SelectGidDataRequest)
}

inline void SelectGidDataRequest::SharedCtor() {
gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
role_type_ = 0;
}

SelectGidDataRequest::~SelectGidDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.SelectGidDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectGidDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectGidDataRequest::ArenaDtor(void* object) {
  SelectGidDataRequest* _this = reinterpret_cast< SelectGidDataRequest* >(object);
  (void)_this;
}
void SelectGidDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectGidDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectGidDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_.ClearToEmpty();
  role_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGidDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectGidDataRequest.gid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectGidDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectGidDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectGidDataRequest.gid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gid(), target);
  }

  // int32 role_type = 2;
  if (this->_internal_role_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_role_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectGidDataRequest)
  return target;
}

size_t SelectGidDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectGidDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // int32 role_type = 2;
  if (this->_internal_role_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectGidDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectGidDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectGidDataRequest::GetClassData() const { return &_class_data_; }

void SelectGidDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectGidDataRequest *>(to)->MergeFrom(
      static_cast<const SelectGidDataRequest &>(from));
}


void SelectGidDataRequest::MergeFrom(const SelectGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectGidDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gid().empty()) {
    _internal_set_gid(from._internal_gid());
  }
  if (from._internal_role_type() != 0) {
    _internal_set_role_type(from._internal_role_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectGidDataRequest::CopyFrom(const SelectGidDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectGidDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGidDataRequest::IsInitialized() const {
  return true;
}

void SelectGidDataRequest::InternalSwap(SelectGidDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gid_, GetArenaForAllocation(),
      &other->gid_, other->GetArenaForAllocation()
  );
  swap(role_type_, other->role_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGidDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[14]);
}

// ===================================================================

class SelectCharacterDataRequest::_Internal {
 public:
};

SelectCharacterDataRequest::SelectCharacterDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectCharacterDataRequest)
}
SelectCharacterDataRequest::SelectCharacterDataRequest(const SelectCharacterDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_char_name().empty()) {
    char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_char_name(), 
      GetArenaForAllocation());
  }
  big_line_ = from.big_line_;
  // @@protoc_insertion_point(copy_constructor:CGData.SelectCharacterDataRequest)
}

inline void SelectCharacterDataRequest::SharedCtor() {
char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
big_line_ = 0;
}

SelectCharacterDataRequest::~SelectCharacterDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.SelectCharacterDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectCharacterDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  char_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectCharacterDataRequest::ArenaDtor(void* object) {
  SelectCharacterDataRequest* _this = reinterpret_cast< SelectCharacterDataRequest* >(object);
  (void)_this;
}
void SelectCharacterDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectCharacterDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectCharacterDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectCharacterDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_name_.ClearToEmpty();
  big_line_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectCharacterDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string char_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_char_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectCharacterDataRequest.char_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectCharacterDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectCharacterDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_char_name().data(), static_cast<int>(this->_internal_char_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectCharacterDataRequest.char_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_char_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectCharacterDataRequest)
  return target;
}

size_t SelectCharacterDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectCharacterDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_char_name());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectCharacterDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectCharacterDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectCharacterDataRequest::GetClassData() const { return &_class_data_; }

void SelectCharacterDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectCharacterDataRequest *>(to)->MergeFrom(
      static_cast<const SelectCharacterDataRequest &>(from));
}


void SelectCharacterDataRequest::MergeFrom(const SelectCharacterDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectCharacterDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_char_name().empty()) {
    _internal_set_char_name(from._internal_char_name());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectCharacterDataRequest::CopyFrom(const SelectCharacterDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectCharacterDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCharacterDataRequest::IsInitialized() const {
  return true;
}

void SelectCharacterDataRequest::InternalSwap(SelectCharacterDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &char_name_, GetArenaForAllocation(),
      &other->char_name_, other->GetArenaForAllocation()
  );
  swap(big_line_, other->big_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectCharacterDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[15]);
}

// ===================================================================

class SelectCharacterDataResponse::_Internal {
 public:
  static const ::CGData::CGCharacterData& character_data(const SelectCharacterDataResponse* msg);
};

const ::CGData::CGCharacterData&
SelectCharacterDataResponse::_Internal::character_data(const SelectCharacterDataResponse* msg) {
  return *msg->character_data_;
}
SelectCharacterDataResponse::SelectCharacterDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pet_data_(arena),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectCharacterDataResponse)
}
SelectCharacterDataResponse::SelectCharacterDataResponse(const SelectCharacterDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pet_data_(from.pet_data_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_character_name().empty()) {
    character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_character_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_character_data()) {
    character_data_ = new ::CGData::CGCharacterData(*from.character_data_);
  } else {
    character_data_ = nullptr;
  }
  big_line_ = from.big_line_;
  // @@protoc_insertion_point(copy_constructor:CGData.SelectCharacterDataResponse)
}

inline void SelectCharacterDataResponse::SharedCtor() {
character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&character_data_)) + sizeof(big_line_));
}

SelectCharacterDataResponse::~SelectCharacterDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.SelectCharacterDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectCharacterDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  character_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_data_;
}

void SelectCharacterDataResponse::ArenaDtor(void* object) {
  SelectCharacterDataResponse* _this = reinterpret_cast< SelectCharacterDataResponse* >(object);
  (void)_this;
}
void SelectCharacterDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectCharacterDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectCharacterDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectCharacterDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_data_.Clear();
  items_.Clear();
  character_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
  big_line_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectCharacterDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_character_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectCharacterDataResponse.character_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CGData.CGCharacterData character_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGPetData pet_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGItemData items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectCharacterDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectCharacterDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string character_name = 1;
  if (!this->_internal_character_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character_name().data(), static_cast<int>(this->_internal_character_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectCharacterDataResponse.character_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_character_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  // .CGData.CGCharacterData character_data = 3;
  if (this->_internal_has_character_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::character_data(this), target, stream);
  }

  // repeated .CGData.CGPetData pet_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pet_data(i), target, stream);
  }

  // repeated .CGData.CGItemData items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectCharacterDataResponse)
  return target;
}

size_t SelectCharacterDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectCharacterDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGPetData pet_data = 4;
  total_size += 1UL * this->_internal_pet_data_size();
  for (const auto& msg : this->pet_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGData.CGItemData items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string character_name = 1;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_name());
  }

  // .CGData.CGCharacterData character_data = 3;
  if (this->_internal_has_character_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_data_);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectCharacterDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectCharacterDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectCharacterDataResponse::GetClassData() const { return &_class_data_; }

void SelectCharacterDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectCharacterDataResponse *>(to)->MergeFrom(
      static_cast<const SelectCharacterDataResponse &>(from));
}


void SelectCharacterDataResponse::MergeFrom(const SelectCharacterDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectCharacterDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_data_.MergeFrom(from.pet_data_);
  items_.MergeFrom(from.items_);
  if (!from._internal_character_name().empty()) {
    _internal_set_character_name(from._internal_character_name());
  }
  if (from._internal_has_character_data()) {
    _internal_mutable_character_data()->::CGData::CGCharacterData::MergeFrom(from._internal_character_data());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectCharacterDataResponse::CopyFrom(const SelectCharacterDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectCharacterDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCharacterDataResponse::IsInitialized() const {
  return true;
}

void SelectCharacterDataResponse::InternalSwap(SelectCharacterDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pet_data_.InternalSwap(&other->pet_data_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &character_name_, GetArenaForAllocation(),
      &other->character_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectCharacterDataResponse, big_line_)
      + sizeof(SelectCharacterDataResponse::big_line_)
      - PROTOBUF_FIELD_OFFSET(SelectCharacterDataResponse, character_data_)>(
          reinterpret_cast<char*>(&character_data_),
          reinterpret_cast<char*>(&other->character_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectCharacterDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[16]);
}

// ===================================================================

class SelectCharacterServerRequest::_Internal {
 public:
};

SelectCharacterServerRequest::SelectCharacterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectCharacterServerRequest)
}
SelectCharacterServerRequest::SelectCharacterServerRequest(const SelectCharacterServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_char_name().empty()) {
    char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_char_name(), 
      GetArenaForAllocation());
  }
  big_line_ = from.big_line_;
  // @@protoc_insertion_point(copy_constructor:CGData.SelectCharacterServerRequest)
}

inline void SelectCharacterServerRequest::SharedCtor() {
char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
big_line_ = 0;
}

SelectCharacterServerRequest::~SelectCharacterServerRequest() {
  // @@protoc_insertion_point(destructor:CGData.SelectCharacterServerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectCharacterServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  char_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectCharacterServerRequest::ArenaDtor(void* object) {
  SelectCharacterServerRequest* _this = reinterpret_cast< SelectCharacterServerRequest* >(object);
  (void)_this;
}
void SelectCharacterServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectCharacterServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectCharacterServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectCharacterServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_name_.ClearToEmpty();
  big_line_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectCharacterServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string char_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_char_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectCharacterServerRequest.char_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectCharacterServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectCharacterServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_char_name().data(), static_cast<int>(this->_internal_char_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectCharacterServerRequest.char_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_char_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectCharacterServerRequest)
  return target;
}

size_t SelectCharacterServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectCharacterServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_char_name());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectCharacterServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectCharacterServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectCharacterServerRequest::GetClassData() const { return &_class_data_; }

void SelectCharacterServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectCharacterServerRequest *>(to)->MergeFrom(
      static_cast<const SelectCharacterServerRequest &>(from));
}


void SelectCharacterServerRequest::MergeFrom(const SelectCharacterServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectCharacterServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_char_name().empty()) {
    _internal_set_char_name(from._internal_char_name());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectCharacterServerRequest::CopyFrom(const SelectCharacterServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectCharacterServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCharacterServerRequest::IsInitialized() const {
  return true;
}

void SelectCharacterServerRequest::InternalSwap(SelectCharacterServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &char_name_, GetArenaForAllocation(),
      &other->char_name_, other->GetArenaForAllocation()
  );
  swap(big_line_, other->big_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectCharacterServerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[17]);
}

// ===================================================================

class SelectCharacterServerResponse::_Internal {
 public:
};

SelectCharacterServerResponse::SelectCharacterServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectCharacterServerResponse)
}
SelectCharacterServerResponse::SelectCharacterServerResponse(const SelectCharacterServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_char_name().empty()) {
    char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_char_name(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&big_line_, &from.big_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:CGData.SelectCharacterServerResponse)
}

inline void SelectCharacterServerResponse::SharedCtor() {
char_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&big_line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
}

SelectCharacterServerResponse::~SelectCharacterServerResponse() {
  // @@protoc_insertion_point(destructor:CGData.SelectCharacterServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectCharacterServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  char_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectCharacterServerResponse::ArenaDtor(void* object) {
  SelectCharacterServerResponse* _this = reinterpret_cast< SelectCharacterServerResponse* >(object);
  (void)_this;
}
void SelectCharacterServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectCharacterServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectCharacterServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectCharacterServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_name_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&big_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&big_line_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectCharacterServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string char_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_char_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectCharacterServerResponse.char_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectCharacterServerResponse.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectCharacterServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectCharacterServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_char_name().data(), static_cast<int>(this->_internal_char_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectCharacterServerResponse.char_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_char_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectCharacterServerResponse.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // int32 online = 5;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectCharacterServerResponse)
  return target;
}

size_t SelectCharacterServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectCharacterServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string char_name = 1;
  if (!this->_internal_char_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_char_name());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 online = 5;
  if (this->_internal_online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectCharacterServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectCharacterServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectCharacterServerResponse::GetClassData() const { return &_class_data_; }

void SelectCharacterServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectCharacterServerResponse *>(to)->MergeFrom(
      static_cast<const SelectCharacterServerResponse &>(from));
}


void SelectCharacterServerResponse::MergeFrom(const SelectCharacterServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectCharacterServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_char_name().empty()) {
    _internal_set_char_name(from._internal_char_name());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectCharacterServerResponse::CopyFrom(const SelectCharacterServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectCharacterServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCharacterServerResponse::IsInitialized() const {
  return true;
}

void SelectCharacterServerResponse::InternalSwap(SelectCharacterServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &char_name_, GetArenaForAllocation(),
      &other->char_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectCharacterServerResponse, online_)
      + sizeof(SelectCharacterServerResponse::online_)
      - PROTOBUF_FIELD_OFFSET(SelectCharacterServerResponse, big_line_)>(
          reinterpret_cast<char*>(&big_line_),
          reinterpret_cast<char*>(&other->big_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectCharacterServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[18]);
}

// ===================================================================

class SelectTaskInfoRequest::_Internal {
 public:
};

SelectTaskInfoRequest::SelectTaskInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectTaskInfoRequest)
}
SelectTaskInfoRequest::SelectTaskInfoRequest(const SelectTaskInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_name().empty()) {
    task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&big_line_, &from.big_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:CGData.SelectTaskInfoRequest)
}

inline void SelectTaskInfoRequest::SharedCtor() {
task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&big_line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(line_));
}

SelectTaskInfoRequest::~SelectTaskInfoRequest() {
  // @@protoc_insertion_point(destructor:CGData.SelectTaskInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectTaskInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectTaskInfoRequest::ArenaDtor(void* object) {
  SelectTaskInfoRequest* _this = reinterpret_cast< SelectTaskInfoRequest* >(object);
  (void)_this;
}
void SelectTaskInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectTaskInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectTaskInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectTaskInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_name_.ClearToEmpty();
  ::memset(&big_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&big_line_)) + sizeof(line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectTaskInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectTaskInfoRequest.task_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectTaskInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectTaskInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_name = 1;
  if (!this->_internal_task_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectTaskInfoRequest.task_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectTaskInfoRequest)
  return target;
}

size_t SelectTaskInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectTaskInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_name = 1;
  if (!this->_internal_task_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectTaskInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectTaskInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectTaskInfoRequest::GetClassData() const { return &_class_data_; }

void SelectTaskInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectTaskInfoRequest *>(to)->MergeFrom(
      static_cast<const SelectTaskInfoRequest &>(from));
}


void SelectTaskInfoRequest::MergeFrom(const SelectTaskInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectTaskInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_name().empty()) {
    _internal_set_task_name(from._internal_task_name());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectTaskInfoRequest::CopyFrom(const SelectTaskInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectTaskInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectTaskInfoRequest::IsInitialized() const {
  return true;
}

void SelectTaskInfoRequest::InternalSwap(SelectTaskInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_name_, GetArenaForAllocation(),
      &other->task_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectTaskInfoRequest, line_)
      + sizeof(SelectTaskInfoRequest::line_)
      - PROTOBUF_FIELD_OFFSET(SelectTaskInfoRequest, big_line_)>(
          reinterpret_cast<char*>(&big_line_),
          reinterpret_cast<char*>(&other->big_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectTaskInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[19]);
}

// ===================================================================

class SelectTaskInfoResponse::_Internal {
 public:
};

SelectTaskInfoResponse::SelectTaskInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectTaskInfoResponse)
}
SelectTaskInfoResponse::SelectTaskInfoResponse(const SelectTaskInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_name().empty()) {
    task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&big_line_, &from.big_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_map_first_height_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(last_map_first_height_));
  // @@protoc_insertion_point(copy_constructor:CGData.SelectTaskInfoResponse)
}

inline void SelectTaskInfoResponse::SharedCtor() {
task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&big_line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_map_first_height_) -
    reinterpret_cast<char*>(&big_line_)) + sizeof(last_map_first_height_));
}

SelectTaskInfoResponse::~SelectTaskInfoResponse() {
  // @@protoc_insertion_point(destructor:CGData.SelectTaskInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectTaskInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectTaskInfoResponse::ArenaDtor(void* object) {
  SelectTaskInfoResponse* _this = reinterpret_cast< SelectTaskInfoResponse* >(object);
  (void)_this;
}
void SelectTaskInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectTaskInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectTaskInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectTaskInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_name_.ClearToEmpty();
  ::memset(&big_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_map_first_height_) -
      reinterpret_cast<char*>(&big_line_)) + sizeof(last_map_first_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectTaskInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectTaskInfoResponse.task_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 npc_pos_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          npc_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 npc_pos_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          npc_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          last_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_map_first_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_map_first_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_map_first_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          last_map_first_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_map_first_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          last_map_first_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectTaskInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectTaskInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_name = 1;
  if (!this->_internal_task_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectTaskInfoResponse.task_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_name(), target);
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_line(), target);
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_line(), target);
  }

  // int32 npc_pos_x = 4;
  if (this->_internal_npc_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_npc_pos_x(), target);
  }

  // int32 npc_pos_y = 5;
  if (this->_internal_npc_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_npc_pos_y(), target);
  }

  // int32 last_time = 6;
  if (this->_internal_last_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_last_time(), target);
  }

  // int32 last_map_first_num = 7;
  if (this->_internal_last_map_first_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_map_first_num(), target);
  }

  // int32 last_map_first_width = 8;
  if (this->_internal_last_map_first_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_last_map_first_width(), target);
  }

  // int32 last_map_first_height = 9;
  if (this->_internal_last_map_first_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_last_map_first_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectTaskInfoResponse)
  return target;
}

size_t SelectTaskInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectTaskInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_name = 1;
  if (!this->_internal_task_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());
  }

  // int32 big_line = 2;
  if (this->_internal_big_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  // int32 line = 3;
  if (this->_internal_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  // int32 npc_pos_x = 4;
  if (this->_internal_npc_pos_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_npc_pos_x());
  }

  // int32 npc_pos_y = 5;
  if (this->_internal_npc_pos_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_npc_pos_y());
  }

  // int32 last_time = 6;
  if (this->_internal_last_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_time());
  }

  // int32 last_map_first_num = 7;
  if (this->_internal_last_map_first_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_map_first_num());
  }

  // int32 last_map_first_width = 8;
  if (this->_internal_last_map_first_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_map_first_width());
  }

  // int32 last_map_first_height = 9;
  if (this->_internal_last_map_first_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_map_first_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectTaskInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectTaskInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectTaskInfoResponse::GetClassData() const { return &_class_data_; }

void SelectTaskInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectTaskInfoResponse *>(to)->MergeFrom(
      static_cast<const SelectTaskInfoResponse &>(from));
}


void SelectTaskInfoResponse::MergeFrom(const SelectTaskInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectTaskInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_name().empty()) {
    _internal_set_task_name(from._internal_task_name());
  }
  if (from._internal_big_line() != 0) {
    _internal_set_big_line(from._internal_big_line());
  }
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from._internal_npc_pos_x() != 0) {
    _internal_set_npc_pos_x(from._internal_npc_pos_x());
  }
  if (from._internal_npc_pos_y() != 0) {
    _internal_set_npc_pos_y(from._internal_npc_pos_y());
  }
  if (from._internal_last_time() != 0) {
    _internal_set_last_time(from._internal_last_time());
  }
  if (from._internal_last_map_first_num() != 0) {
    _internal_set_last_map_first_num(from._internal_last_map_first_num());
  }
  if (from._internal_last_map_first_width() != 0) {
    _internal_set_last_map_first_width(from._internal_last_map_first_width());
  }
  if (from._internal_last_map_first_height() != 0) {
    _internal_set_last_map_first_height(from._internal_last_map_first_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectTaskInfoResponse::CopyFrom(const SelectTaskInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectTaskInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectTaskInfoResponse::IsInitialized() const {
  return true;
}

void SelectTaskInfoResponse::InternalSwap(SelectTaskInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_name_, GetArenaForAllocation(),
      &other->task_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectTaskInfoResponse, last_map_first_height_)
      + sizeof(SelectTaskInfoResponse::last_map_first_height_)
      - PROTOBUF_FIELD_OFFSET(SelectTaskInfoResponse, big_line_)>(
          reinterpret_cast<char*>(&big_line_),
          reinterpret_cast<char*>(&other->big_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectTaskInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[20]);
}

// ===================================================================

class SelectAccountGidDataResponse::_Internal {
 public:
};

SelectAccountGidDataResponse::SelectAccountGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  giddata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectAccountGidDataResponse)
}
SelectAccountGidDataResponse::SelectAccountGidDataResponse(const SelectAccountGidDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      giddata_(from.giddata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.SelectAccountGidDataResponse)
}

inline void SelectAccountGidDataResponse::SharedCtor() {
}

SelectAccountGidDataResponse::~SelectAccountGidDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.SelectAccountGidDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectAccountGidDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectAccountGidDataResponse::ArenaDtor(void* object) {
  SelectAccountGidDataResponse* _this = reinterpret_cast< SelectAccountGidDataResponse* >(object);
  (void)_this;
}
void SelectAccountGidDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectAccountGidDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectAccountGidDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectAccountGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  giddata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectAccountGidDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGData.SelectGidDataResponse gidData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_giddata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectAccountGidDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectAccountGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGData.SelectGidDataResponse gidData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_giddata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_giddata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectAccountGidDataResponse)
  return target;
}

size_t SelectAccountGidDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectAccountGidDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.SelectGidDataResponse gidData = 1;
  total_size += 1UL * this->_internal_giddata_size();
  for (const auto& msg : this->giddata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectAccountGidDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectAccountGidDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectAccountGidDataResponse::GetClassData() const { return &_class_data_; }

void SelectAccountGidDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectAccountGidDataResponse *>(to)->MergeFrom(
      static_cast<const SelectAccountGidDataResponse &>(from));
}


void SelectAccountGidDataResponse::MergeFrom(const SelectAccountGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectAccountGidDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  giddata_.MergeFrom(from.giddata_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectAccountGidDataResponse::CopyFrom(const SelectAccountGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectAccountGidDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectAccountGidDataResponse::IsInitialized() const {
  return true;
}

void SelectAccountGidDataResponse::InternalSwap(SelectAccountGidDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  giddata_.InternalSwap(&other->giddata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectAccountGidDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[21]);
}

// ===================================================================

class SelectGidDataResponse::_Internal {
 public:
  static const ::CGData::CGCharacterData& character_data(const SelectGidDataResponse* msg);
};

const ::CGData::CGCharacterData&
SelectGidDataResponse::_Internal::character_data(const SelectGidDataResponse* msg) {
  return *msg->character_data_;
}
SelectGidDataResponse::SelectGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pet_data_(arena),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.SelectGidDataResponse)
}
SelectGidDataResponse::SelectGidDataResponse(const SelectGidDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pet_data_(from.pet_data_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gid().empty()) {
    gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gid(), 
      GetArenaForAllocation());
  }
  character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_character_name().empty()) {
    character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_character_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_character_data()) {
    character_data_ = new ::CGData::CGCharacterData(*from.character_data_);
  } else {
    character_data_ = nullptr;
  }
  role_type_ = from.role_type_;
  // @@protoc_insertion_point(copy_constructor:CGData.SelectGidDataResponse)
}

inline void SelectGidDataResponse::SharedCtor() {
gid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_type_) -
    reinterpret_cast<char*>(&character_data_)) + sizeof(role_type_));
}

SelectGidDataResponse::~SelectGidDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.SelectGidDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectGidDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  character_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete character_data_;
}

void SelectGidDataResponse::ArenaDtor(void* object) {
  SelectGidDataResponse* _this = reinterpret_cast< SelectGidDataResponse* >(object);
  (void)_this;
}
void SelectGidDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectGidDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectGidDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.SelectGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_data_.Clear();
  items_.Clear();
  gid_.ClearToEmpty();
  character_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
  role_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectGidDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectGidDataResponse.gid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string character_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_character_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.SelectGidDataResponse.character_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CGData.CGCharacterData character_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGPetData pet_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGItemData items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectGidDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.SelectGidDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectGidDataResponse.gid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gid(), target);
  }

  // int32 role_type = 2;
  if (this->_internal_role_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_role_type(), target);
  }

  // string character_name = 3;
  if (!this->_internal_character_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_character_name().data(), static_cast<int>(this->_internal_character_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.SelectGidDataResponse.character_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_character_name(), target);
  }

  // .CGData.CGCharacterData character_data = 4;
  if (this->_internal_has_character_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::character_data(this), target, stream);
  }

  // repeated .CGData.CGPetData pet_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pet_data(i), target, stream);
  }

  // repeated .CGData.CGItemData items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.SelectGidDataResponse)
  return target;
}

size_t SelectGidDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.SelectGidDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGPetData pet_data = 5;
  total_size += 1UL * this->_internal_pet_data_size();
  for (const auto& msg : this->pet_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CGData.CGItemData items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gid = 1;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // string character_name = 3;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_character_name());
  }

  // .CGData.CGCharacterData character_data = 4;
  if (this->_internal_has_character_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_data_);
  }

  // int32 role_type = 2;
  if (this->_internal_role_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectGidDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectGidDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectGidDataResponse::GetClassData() const { return &_class_data_; }

void SelectGidDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectGidDataResponse *>(to)->MergeFrom(
      static_cast<const SelectGidDataResponse &>(from));
}


void SelectGidDataResponse::MergeFrom(const SelectGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.SelectGidDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_data_.MergeFrom(from.pet_data_);
  items_.MergeFrom(from.items_);
  if (!from._internal_gid().empty()) {
    _internal_set_gid(from._internal_gid());
  }
  if (!from._internal_character_name().empty()) {
    _internal_set_character_name(from._internal_character_name());
  }
  if (from._internal_has_character_data()) {
    _internal_mutable_character_data()->::CGData::CGCharacterData::MergeFrom(from._internal_character_data());
  }
  if (from._internal_role_type() != 0) {
    _internal_set_role_type(from._internal_role_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectGidDataResponse::CopyFrom(const SelectGidDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.SelectGidDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGidDataResponse::IsInitialized() const {
  return true;
}

void SelectGidDataResponse::InternalSwap(SelectGidDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pet_data_.InternalSwap(&other->pet_data_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gid_, GetArenaForAllocation(),
      &other->gid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &character_name_, GetArenaForAllocation(),
      &other->character_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectGidDataResponse, role_type_)
      + sizeof(SelectGidDataResponse::role_type_)
      - PROTOBUF_FIELD_OFFSET(SelectGidDataResponse, character_data_)>(
          reinterpret_cast<char*>(&character_data_),
          reinterpret_cast<char*>(&other->character_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectGidDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[22]);
}

// ===================================================================

class CGBaseData::_Internal {
 public:
};

CGBaseData::CGBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGBaseData)
}
CGBaseData::CGBaseData(const CGBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGBaseData)
}

inline void CGBaseData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(health_));
}

CGBaseData::~CGBaseData() {
  // @@protoc_insertion_point(destructor:CGData.CGBaseData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGBaseData::ArenaDtor(void* object) {
  CGBaseData* _this = reinterpret_cast< CGBaseData* >(object);
  (void)_this;
}
void CGBaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(health_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGBaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGBaseData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxhp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxmp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxxp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxxp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 health = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGBaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGBaseData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  // int32 mp = 3;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mp(), target);
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxhp(), target);
  }

  // int32 maxmp = 5;
  if (this->_internal_maxmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxmp(), target);
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // int32 xp = 7;
  if (this->_internal_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_xp(), target);
  }

  // int32 maxxp = 8;
  if (this->_internal_maxxp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxxp(), target);
  }

  // int32 health = 9;
  if (this->_internal_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGBaseData)
  return target;
}

size_t CGBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGBaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 mp = 3;
  if (this->_internal_mp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxhp());
  }

  // int32 maxmp = 5;
  if (this->_internal_maxmp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxmp());
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 xp = 7;
  if (this->_internal_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xp());
  }

  // int32 maxxp = 8;
  if (this->_internal_maxxp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxxp());
  }

  // int32 health = 9;
  if (this->_internal_health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_health());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGBaseData::GetClassData() const { return &_class_data_; }

void CGBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGBaseData *>(to)->MergeFrom(
      static_cast<const CGBaseData &>(from));
}


void CGBaseData::MergeFrom(const CGBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_maxmp() != 0) {
    _internal_set_maxmp(from._internal_maxmp());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_xp() != 0) {
    _internal_set_xp(from._internal_xp());
  }
  if (from._internal_maxxp() != 0) {
    _internal_set_maxxp(from._internal_maxxp());
  }
  if (from._internal_health() != 0) {
    _internal_set_health(from._internal_health());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGBaseData::CopyFrom(const CGBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBaseData::IsInitialized() const {
  return true;
}

void CGBaseData::InternalSwap(CGBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGBaseData, health_)
      + sizeof(CGBaseData::health_)
      - PROTOBUF_FIELD_OFFSET(CGBaseData, hp_)>(
          reinterpret_cast<char*>(&hp_),
          reinterpret_cast<char*>(&other->hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGBaseData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[23]);
}

// ===================================================================

class CGSkillBaseData::_Internal {
 public:
};

CGSkillBaseData::CGSkillBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subskills_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGSkillBaseData)
}
CGSkillBaseData::CGSkillBaseData(const CGSkillBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subskills_(from.subskills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxxp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxxp_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGSkillBaseData)
}

inline void CGSkillBaseData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxxp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxxp_));
}

CGSkillBaseData::~CGSkillBaseData() {
  // @@protoc_insertion_point(destructor:CGData.CGSkillBaseData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGSkillBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGSkillBaseData::ArenaDtor(void* object) {
  CGSkillBaseData* _this = reinterpret_cast< CGSkillBaseData* >(object);
  (void)_this;
}
void CGSkillBaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGSkillBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGSkillBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGSkillBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subskills_.Clear();
  name_.ClearToEmpty();
  info_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxxp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxxp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSkillBaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGSkillBaseData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGSkillBaseData.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool available = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxxp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maxxp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGSkillBaseData subskills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subskills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGSkillBaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGSkillBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGSkillBaseData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGSkillBaseData.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 cost = 4;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cost(), target);
  }

  // int32 flags = 5;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_flags(), target);
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_index(), target);
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  // int32 maxLevel = 8;
  if (this->_internal_maxlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxlevel(), target);
  }

  // bool available = 9;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_available(), target);
  }

  // int32 xp = 10;
  if (this->_internal_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_xp(), target);
  }

  // int32 maxxp = 11;
  if (this->_internal_maxxp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_maxxp(), target);
  }

  // repeated .CGData.CGSkillBaseData subskills = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subskills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_subskills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGSkillBaseData)
  return target;
}

size_t CGSkillBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGSkillBaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGSkillBaseData subskills = 12;
  total_size += 1UL * this->_internal_subskills_size();
  for (const auto& msg : this->subskills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 cost = 4;
  if (this->_internal_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  // int32 flags = 5;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  // int32 index = 6;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 maxLevel = 8;
  if (this->_internal_maxlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxlevel());
  }

  // bool available = 9;
  if (this->_internal_available() != 0) {
    total_size += 1 + 1;
  }

  // int32 xp = 10;
  if (this->_internal_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xp());
  }

  // int32 maxxp = 11;
  if (this->_internal_maxxp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxxp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSkillBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGSkillBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSkillBaseData::GetClassData() const { return &_class_data_; }

void CGSkillBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGSkillBaseData *>(to)->MergeFrom(
      static_cast<const CGSkillBaseData &>(from));
}


void CGSkillBaseData::MergeFrom(const CGSkillBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGSkillBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subskills_.MergeFrom(from.subskills_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_maxlevel() != 0) {
    _internal_set_maxlevel(from._internal_maxlevel());
  }
  if (from._internal_available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from._internal_xp() != 0) {
    _internal_set_xp(from._internal_xp());
  }
  if (from._internal_maxxp() != 0) {
    _internal_set_maxxp(from._internal_maxxp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSkillBaseData::CopyFrom(const CGSkillBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGSkillBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSkillBaseData::IsInitialized() const {
  return true;
}

void CGSkillBaseData::InternalSwap(CGSkillBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subskills_.InternalSwap(&other->subskills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, GetArenaForAllocation(),
      &other->info_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSkillBaseData, maxxp_)
      + sizeof(CGSkillBaseData::maxxp_)
      - PROTOBUF_FIELD_OFFSET(CGSkillBaseData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSkillBaseData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[24]);
}

// ===================================================================

class CGAttrBaseData::_Internal {
 public:
};

CGAttrBaseData::CGAttrBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGAttrBaseData)
}
CGAttrBaseData::CGAttrBaseData(const CGAttrBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&points_remain_, &from.points_remain_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_wind_) -
    reinterpret_cast<char*>(&points_remain_)) + sizeof(element_wind_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGAttrBaseData)
}

inline void CGAttrBaseData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&points_remain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&element_wind_) -
    reinterpret_cast<char*>(&points_remain_)) + sizeof(element_wind_));
}

CGAttrBaseData::~CGAttrBaseData() {
  // @@protoc_insertion_point(destructor:CGData.CGAttrBaseData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGAttrBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAttrBaseData::ArenaDtor(void* object) {
  CGAttrBaseData* _this = reinterpret_cast< CGAttrBaseData* >(object);
  (void)_this;
}
void CGAttrBaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGAttrBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGAttrBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGAttrBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&points_remain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_wind_) -
      reinterpret_cast<char*>(&points_remain_)) + sizeof(element_wind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAttrBaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 points_remain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          points_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points_endurance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          points_endurance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          points_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points_defense = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          points_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points_agility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          points_agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points_magical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          points_magical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_attack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          value_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_defensive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          value_defensive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_agility = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          value_agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_spirit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          value_spirit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_recovery = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          value_recovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_poison = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          resist_poison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_sleep = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          resist_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_medusa = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          resist_medusa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_drunk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          resist_drunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_chaos = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          resist_chaos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resist_forget = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          resist_forget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fix_critical = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          fix_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fix_strikeback = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fix_strikeback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fix_accurancy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          fix_accurancy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fix_dodge = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          fix_dodge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_earth = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          element_earth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_water = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          element_water_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_fire = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          element_fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_wind = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          element_wind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGAttrBaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGAttrBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 points_remain = 1;
  if (this->_internal_points_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_points_remain(), target);
  }

  // int32 points_endurance = 2;
  if (this->_internal_points_endurance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points_endurance(), target);
  }

  // int32 points_strength = 3;
  if (this->_internal_points_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_points_strength(), target);
  }

  // int32 points_defense = 4;
  if (this->_internal_points_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_points_defense(), target);
  }

  // int32 points_agility = 5;
  if (this->_internal_points_agility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_points_agility(), target);
  }

  // int32 points_magical = 6;
  if (this->_internal_points_magical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_points_magical(), target);
  }

  // int32 value_attack = 7;
  if (this->_internal_value_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_value_attack(), target);
  }

  // int32 value_defensive = 8;
  if (this->_internal_value_defensive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_value_defensive(), target);
  }

  // int32 value_agility = 9;
  if (this->_internal_value_agility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_value_agility(), target);
  }

  // int32 value_spirit = 10;
  if (this->_internal_value_spirit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_value_spirit(), target);
  }

  // int32 value_recovery = 11;
  if (this->_internal_value_recovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_value_recovery(), target);
  }

  // int32 resist_poison = 12;
  if (this->_internal_resist_poison() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_resist_poison(), target);
  }

  // int32 resist_sleep = 13;
  if (this->_internal_resist_sleep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_resist_sleep(), target);
  }

  // int32 resist_medusa = 14;
  if (this->_internal_resist_medusa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_resist_medusa(), target);
  }

  // int32 resist_drunk = 15;
  if (this->_internal_resist_drunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_resist_drunk(), target);
  }

  // int32 resist_chaos = 16;
  if (this->_internal_resist_chaos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_resist_chaos(), target);
  }

  // int32 resist_forget = 17;
  if (this->_internal_resist_forget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_resist_forget(), target);
  }

  // int32 fix_critical = 18;
  if (this->_internal_fix_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_fix_critical(), target);
  }

  // int32 fix_strikeback = 19;
  if (this->_internal_fix_strikeback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_fix_strikeback(), target);
  }

  // int32 fix_accurancy = 20;
  if (this->_internal_fix_accurancy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_fix_accurancy(), target);
  }

  // int32 fix_dodge = 21;
  if (this->_internal_fix_dodge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_fix_dodge(), target);
  }

  // int32 element_earth = 22;
  if (this->_internal_element_earth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_element_earth(), target);
  }

  // int32 element_water = 23;
  if (this->_internal_element_water() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_element_water(), target);
  }

  // int32 element_fire = 24;
  if (this->_internal_element_fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_element_fire(), target);
  }

  // int32 element_wind = 25;
  if (this->_internal_element_wind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_element_wind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGAttrBaseData)
  return target;
}

size_t CGAttrBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGAttrBaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 points_remain = 1;
  if (this->_internal_points_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_remain());
  }

  // int32 points_endurance = 2;
  if (this->_internal_points_endurance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_endurance());
  }

  // int32 points_strength = 3;
  if (this->_internal_points_strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_strength());
  }

  // int32 points_defense = 4;
  if (this->_internal_points_defense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_defense());
  }

  // int32 points_agility = 5;
  if (this->_internal_points_agility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_agility());
  }

  // int32 points_magical = 6;
  if (this->_internal_points_magical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points_magical());
  }

  // int32 value_attack = 7;
  if (this->_internal_value_attack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_attack());
  }

  // int32 value_defensive = 8;
  if (this->_internal_value_defensive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_defensive());
  }

  // int32 value_agility = 9;
  if (this->_internal_value_agility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_agility());
  }

  // int32 value_spirit = 10;
  if (this->_internal_value_spirit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_spirit());
  }

  // int32 value_recovery = 11;
  if (this->_internal_value_recovery() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_recovery());
  }

  // int32 resist_poison = 12;
  if (this->_internal_resist_poison() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_poison());
  }

  // int32 resist_sleep = 13;
  if (this->_internal_resist_sleep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_sleep());
  }

  // int32 resist_medusa = 14;
  if (this->_internal_resist_medusa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_medusa());
  }

  // int32 resist_drunk = 15;
  if (this->_internal_resist_drunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_drunk());
  }

  // int32 resist_chaos = 16;
  if (this->_internal_resist_chaos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_chaos());
  }

  // int32 resist_forget = 17;
  if (this->_internal_resist_forget() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resist_forget());
  }

  // int32 fix_critical = 18;
  if (this->_internal_fix_critical() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fix_critical());
  }

  // int32 fix_strikeback = 19;
  if (this->_internal_fix_strikeback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fix_strikeback());
  }

  // int32 fix_accurancy = 20;
  if (this->_internal_fix_accurancy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fix_accurancy());
  }

  // int32 fix_dodge = 21;
  if (this->_internal_fix_dodge() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fix_dodge());
  }

  // int32 element_earth = 22;
  if (this->_internal_element_earth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_earth());
  }

  // int32 element_water = 23;
  if (this->_internal_element_water() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_water());
  }

  // int32 element_fire = 24;
  if (this->_internal_element_fire() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_fire());
  }

  // int32 element_wind = 25;
  if (this->_internal_element_wind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_wind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAttrBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGAttrBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAttrBaseData::GetClassData() const { return &_class_data_; }

void CGAttrBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGAttrBaseData *>(to)->MergeFrom(
      static_cast<const CGAttrBaseData &>(from));
}


void CGAttrBaseData::MergeFrom(const CGAttrBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGAttrBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_points_remain() != 0) {
    _internal_set_points_remain(from._internal_points_remain());
  }
  if (from._internal_points_endurance() != 0) {
    _internal_set_points_endurance(from._internal_points_endurance());
  }
  if (from._internal_points_strength() != 0) {
    _internal_set_points_strength(from._internal_points_strength());
  }
  if (from._internal_points_defense() != 0) {
    _internal_set_points_defense(from._internal_points_defense());
  }
  if (from._internal_points_agility() != 0) {
    _internal_set_points_agility(from._internal_points_agility());
  }
  if (from._internal_points_magical() != 0) {
    _internal_set_points_magical(from._internal_points_magical());
  }
  if (from._internal_value_attack() != 0) {
    _internal_set_value_attack(from._internal_value_attack());
  }
  if (from._internal_value_defensive() != 0) {
    _internal_set_value_defensive(from._internal_value_defensive());
  }
  if (from._internal_value_agility() != 0) {
    _internal_set_value_agility(from._internal_value_agility());
  }
  if (from._internal_value_spirit() != 0) {
    _internal_set_value_spirit(from._internal_value_spirit());
  }
  if (from._internal_value_recovery() != 0) {
    _internal_set_value_recovery(from._internal_value_recovery());
  }
  if (from._internal_resist_poison() != 0) {
    _internal_set_resist_poison(from._internal_resist_poison());
  }
  if (from._internal_resist_sleep() != 0) {
    _internal_set_resist_sleep(from._internal_resist_sleep());
  }
  if (from._internal_resist_medusa() != 0) {
    _internal_set_resist_medusa(from._internal_resist_medusa());
  }
  if (from._internal_resist_drunk() != 0) {
    _internal_set_resist_drunk(from._internal_resist_drunk());
  }
  if (from._internal_resist_chaos() != 0) {
    _internal_set_resist_chaos(from._internal_resist_chaos());
  }
  if (from._internal_resist_forget() != 0) {
    _internal_set_resist_forget(from._internal_resist_forget());
  }
  if (from._internal_fix_critical() != 0) {
    _internal_set_fix_critical(from._internal_fix_critical());
  }
  if (from._internal_fix_strikeback() != 0) {
    _internal_set_fix_strikeback(from._internal_fix_strikeback());
  }
  if (from._internal_fix_accurancy() != 0) {
    _internal_set_fix_accurancy(from._internal_fix_accurancy());
  }
  if (from._internal_fix_dodge() != 0) {
    _internal_set_fix_dodge(from._internal_fix_dodge());
  }
  if (from._internal_element_earth() != 0) {
    _internal_set_element_earth(from._internal_element_earth());
  }
  if (from._internal_element_water() != 0) {
    _internal_set_element_water(from._internal_element_water());
  }
  if (from._internal_element_fire() != 0) {
    _internal_set_element_fire(from._internal_element_fire());
  }
  if (from._internal_element_wind() != 0) {
    _internal_set_element_wind(from._internal_element_wind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAttrBaseData::CopyFrom(const CGAttrBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGAttrBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAttrBaseData::IsInitialized() const {
  return true;
}

void CGAttrBaseData::InternalSwap(CGAttrBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAttrBaseData, element_wind_)
      + sizeof(CGAttrBaseData::element_wind_)
      - PROTOBUF_FIELD_OFFSET(CGAttrBaseData, points_remain_)>(
          reinterpret_cast<char*>(&points_remain_),
          reinterpret_cast<char*>(&other->points_remain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAttrBaseData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[25]);
}

// ===================================================================

class CGCharacterPersDesc::_Internal {
 public:
};

CGCharacterPersDesc::CGCharacterPersDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGCharacterPersDesc)
}
CGCharacterPersDesc::CGCharacterPersDesc(const CGCharacterPersDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sellstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sellstring().empty()) {
    sellstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sellstring(), 
      GetArenaForAllocation());
  }
  buystring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buystring().empty()) {
    buystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buystring(), 
      GetArenaForAllocation());
  }
  wantstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wantstring().empty()) {
    wantstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wantstring(), 
      GetArenaForAllocation());
  }
  descstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descstring().empty()) {
    descstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descstring(), 
      GetArenaForAllocation());
  }
  ::memcpy(&changebits_, &from.changebits_,
    static_cast<size_t>(reinterpret_cast<char*>(&wanticon_) -
    reinterpret_cast<char*>(&changebits_)) + sizeof(wanticon_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGCharacterPersDesc)
}

inline void CGCharacterPersDesc::SharedCtor() {
sellstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buystring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wantstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
descstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&changebits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wanticon_) -
    reinterpret_cast<char*>(&changebits_)) + sizeof(wanticon_));
}

CGCharacterPersDesc::~CGCharacterPersDesc() {
  // @@protoc_insertion_point(destructor:CGData.CGCharacterPersDesc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCharacterPersDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sellstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buystring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wantstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCharacterPersDesc::ArenaDtor(void* object) {
  CGCharacterPersDesc* _this = reinterpret_cast< CGCharacterPersDesc* >(object);
  (void)_this;
}
void CGCharacterPersDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCharacterPersDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCharacterPersDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGCharacterPersDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sellstring_.ClearToEmpty();
  buystring_.ClearToEmpty();
  wantstring_.ClearToEmpty();
  descstring_.ClearToEmpty();
  ::memset(&changebits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wanticon_) -
      reinterpret_cast<char*>(&changebits_)) + sizeof(wanticon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCharacterPersDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 changeBits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          changebits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellIcon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sellicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellString = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sellstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterPersDesc.sellString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buyIcon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          buyicon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buyString = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buystring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterPersDesc.buyString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wantIcon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wanticon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wantString = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_wantstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterPersDesc.wantString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string descString = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_descstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterPersDesc.descString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCharacterPersDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGCharacterPersDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 changeBits = 1;
  if (this->_internal_changebits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_changebits(), target);
  }

  // int32 sellIcon = 2;
  if (this->_internal_sellicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sellicon(), target);
  }

  // string sellString = 3;
  if (!this->_internal_sellstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellstring().data(), static_cast<int>(this->_internal_sellstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterPersDesc.sellString");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sellstring(), target);
  }

  // int32 buyIcon = 4;
  if (this->_internal_buyicon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buyicon(), target);
  }

  // string buyString = 5;
  if (!this->_internal_buystring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buystring().data(), static_cast<int>(this->_internal_buystring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterPersDesc.buyString");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buystring(), target);
  }

  // int32 wantIcon = 6;
  if (this->_internal_wanticon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_wanticon(), target);
  }

  // string wantString = 7;
  if (!this->_internal_wantstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wantstring().data(), static_cast<int>(this->_internal_wantstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterPersDesc.wantString");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_wantstring(), target);
  }

  // string descString = 8;
  if (!this->_internal_descstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descstring().data(), static_cast<int>(this->_internal_descstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterPersDesc.descString");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_descstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGCharacterPersDesc)
  return target;
}

size_t CGCharacterPersDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGCharacterPersDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sellString = 3;
  if (!this->_internal_sellstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellstring());
  }

  // string buyString = 5;
  if (!this->_internal_buystring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buystring());
  }

  // string wantString = 7;
  if (!this->_internal_wantstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wantstring());
  }

  // string descString = 8;
  if (!this->_internal_descstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descstring());
  }

  // int32 changeBits = 1;
  if (this->_internal_changebits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changebits());
  }

  // int32 sellIcon = 2;
  if (this->_internal_sellicon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sellicon());
  }

  // int32 buyIcon = 4;
  if (this->_internal_buyicon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buyicon());
  }

  // int32 wantIcon = 6;
  if (this->_internal_wanticon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wanticon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCharacterPersDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCharacterPersDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCharacterPersDesc::GetClassData() const { return &_class_data_; }

void CGCharacterPersDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGCharacterPersDesc *>(to)->MergeFrom(
      static_cast<const CGCharacterPersDesc &>(from));
}


void CGCharacterPersDesc::MergeFrom(const CGCharacterPersDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGCharacterPersDesc)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sellstring().empty()) {
    _internal_set_sellstring(from._internal_sellstring());
  }
  if (!from._internal_buystring().empty()) {
    _internal_set_buystring(from._internal_buystring());
  }
  if (!from._internal_wantstring().empty()) {
    _internal_set_wantstring(from._internal_wantstring());
  }
  if (!from._internal_descstring().empty()) {
    _internal_set_descstring(from._internal_descstring());
  }
  if (from._internal_changebits() != 0) {
    _internal_set_changebits(from._internal_changebits());
  }
  if (from._internal_sellicon() != 0) {
    _internal_set_sellicon(from._internal_sellicon());
  }
  if (from._internal_buyicon() != 0) {
    _internal_set_buyicon(from._internal_buyicon());
  }
  if (from._internal_wanticon() != 0) {
    _internal_set_wanticon(from._internal_wanticon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCharacterPersDesc::CopyFrom(const CGCharacterPersDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGCharacterPersDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCharacterPersDesc::IsInitialized() const {
  return true;
}

void CGCharacterPersDesc::InternalSwap(CGCharacterPersDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sellstring_, GetArenaForAllocation(),
      &other->sellstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buystring_, GetArenaForAllocation(),
      &other->buystring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wantstring_, GetArenaForAllocation(),
      &other->wantstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &descstring_, GetArenaForAllocation(),
      &other->descstring_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCharacterPersDesc, wanticon_)
      + sizeof(CGCharacterPersDesc::wanticon_)
      - PROTOBUF_FIELD_OFFSET(CGCharacterPersDesc, changebits_)>(
          reinterpret_cast<char*>(&changebits_),
          reinterpret_cast<char*>(&other->changebits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCharacterPersDesc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[26]);
}

// ===================================================================

class CGCharacterData::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCharacterData>()._has_bits_);
  static const ::CGData::CGBaseData& base_data(const CGCharacterData* msg);
  static const ::CGData::CGAttrBaseData& detail(const CGCharacterData* msg);
  static const ::CGData::CGCharacterPersDesc& pers_desc(const CGCharacterData* msg);
  static void set_has_big_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CGData::CGBaseData&
CGCharacterData::_Internal::base_data(const CGCharacterData* msg) {
  return *msg->base_data_;
}
const ::CGData::CGAttrBaseData&
CGCharacterData::_Internal::detail(const CGCharacterData* msg) {
  return *msg->detail_;
}
const ::CGData::CGCharacterPersDesc&
CGCharacterData::_Internal::pers_desc(const CGCharacterData* msg) {
  return *msg->pers_desc_;
}
CGCharacterData::CGCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  titles_(arena),
  skill_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGCharacterData)
}
CGCharacterData::CGCharacterData(const CGCharacterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      titles_(from.titles_),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job().empty()) {
    job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job(), 
      GetArenaForAllocation());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base_data()) {
    base_data_ = new ::CGData::CGBaseData(*from.base_data_);
  } else {
    base_data_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new ::CGData::CGAttrBaseData(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  if (from._internal_has_pers_desc()) {
    pers_desc_ = new ::CGData::CGCharacterPersDesc(*from.pers_desc_);
  } else {
    pers_desc_ = nullptr;
  }
  ::memcpy(&souls_, &from.souls_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&souls_)) + sizeof(big_line_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGCharacterData)
}

inline void CGCharacterData::SharedCtor() {
job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&big_line_) -
    reinterpret_cast<char*>(&base_data_)) + sizeof(big_line_));
}

CGCharacterData::~CGCharacterData() {
  // @@protoc_insertion_point(destructor:CGData.CGCharacterData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCharacterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  job_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_data_;
  if (this != internal_default_instance()) delete detail_;
  if (this != internal_default_instance()) delete pers_desc_;
}

void CGCharacterData::ArenaDtor(void* object) {
  CGCharacterData* _this = reinterpret_cast< CGCharacterData* >(object);
  (void)_this;
}
void CGCharacterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCharacterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCharacterData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGCharacterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  titles_.Clear();
  skill_.Clear();
  job_.ClearToEmpty();
  map_name_.ClearToEmpty();
  nick_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pers_desc_ != nullptr) {
    delete pers_desc_;
  }
  pers_desc_ = nullptr;
  ::memset(&souls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_gold_) -
      reinterpret_cast<char*>(&souls_)) + sizeof(bank_gold_));
  big_line_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCharacterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CGData.CGBaseData base_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 souls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          souls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          image_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skillslots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          skillslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 use_title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          use_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          avatar_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unitid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 petid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          petid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool petriding = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          petriding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 punchclock = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          punchclock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool usingpunchclock = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          usingpunchclock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_job();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterData.job"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string titles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_titles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterData.titles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 manu_endurance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          manu_endurance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 manu_skillful = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          manu_skillful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 manu_intelligence = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          manu_intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_charisma = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          value_charisma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterData.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_number = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          map_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_line = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          server_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CGData.CGAttrBaseData detail = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGSkillBaseData skill = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // string nick = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGCharacterData.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CGData.CGCharacterPersDesc pers_desc = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pers_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_position = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          battle_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bank_gold = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          bank_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 big_line = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_big_line(&has_bits);
          big_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCharacterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGCharacterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CGData.CGBaseData base_data = 1;
  if (this->_internal_has_base_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_data(this), target, stream);
  }

  // int32 souls = 2;
  if (this->_internal_souls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_souls(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 gold = 4;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gold(), target);
  }

  // int32 image_id = 5;
  if (this->_internal_image_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_image_id(), target);
  }

  // int32 score = 6;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_score(), target);
  }

  // int32 skillslots = 7;
  if (this->_internal_skillslots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_skillslots(), target);
  }

  // int32 use_title = 8;
  if (this->_internal_use_title() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_use_title(), target);
  }

  // int32 avatar_id = 9;
  if (this->_internal_avatar_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_avatar_id(), target);
  }

  // int32 unitid = 10;
  if (this->_internal_unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_unitid(), target);
  }

  // int32 petid = 11;
  if (this->_internal_petid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_petid(), target);
  }

  // bool petriding = 12;
  if (this->_internal_petriding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_petriding(), target);
  }

  // int32 direction = 13;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_direction(), target);
  }

  // int32 punchclock = 14;
  if (this->_internal_punchclock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_punchclock(), target);
  }

  // bool usingpunchclock = 15;
  if (this->_internal_usingpunchclock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_usingpunchclock(), target);
  }

  // string job = 16;
  if (!this->_internal_job().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job().data(), static_cast<int>(this->_internal_job().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterData.job");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_job(), target);
  }

  // repeated string titles = 17;
  for (int i = 0, n = this->_internal_titles_size(); i < n; i++) {
    const auto& s = this->_internal_titles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterData.titles");
    target = stream->WriteString(17, s, target);
  }

  // int32 manu_endurance = 18;
  if (this->_internal_manu_endurance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_manu_endurance(), target);
  }

  // int32 manu_skillful = 19;
  if (this->_internal_manu_skillful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_manu_skillful(), target);
  }

  // int32 manu_intelligence = 20;
  if (this->_internal_manu_intelligence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_manu_intelligence(), target);
  }

  // int32 value_charisma = 21;
  if (this->_internal_value_charisma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_value_charisma(), target);
  }

  // int32 x = 22;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_x(), target);
  }

  // int32 y = 23;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_y(), target);
  }

  // string map_name = 24;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterData.map_name");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_map_name(), target);
  }

  // int32 map_number = 25;
  if (this->_internal_map_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_map_number(), target);
  }

  // int32 server_line = 26;
  if (this->_internal_server_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_server_line(), target);
  }

  // .CGData.CGAttrBaseData detail = 27;
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::detail(this), target, stream);
  }

  // repeated .CGData.CGSkillBaseData skill = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_skill(i), target, stream);
  }

  // string nick = 29;
  if (!this->_internal_nick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGCharacterData.nick");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_nick(), target);
  }

  // .CGData.CGCharacterPersDesc pers_desc = 30;
  if (this->_internal_has_pers_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::pers_desc(this), target, stream);
  }

  // int32 battle_position = 31;
  if (this->_internal_battle_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_battle_position(), target);
  }

  // int32 bank_gold = 32;
  if (this->_internal_bank_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_bank_gold(), target);
  }

  // optional int32 big_line = 33;
  if (_internal_has_big_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_big_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGCharacterData)
  return target;
}

size_t CGCharacterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGCharacterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string titles = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(titles_.size());
  for (int i = 0, n = titles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      titles_.Get(i));
  }

  // repeated .CGData.CGSkillBaseData skill = 28;
  total_size += 2UL * this->_internal_skill_size();
  for (const auto& msg : this->skill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job = 16;
  if (!this->_internal_job().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job());
  }

  // string map_name = 24;
  if (!this->_internal_map_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // string nick = 29;
  if (!this->_internal_nick().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // .CGData.CGBaseData base_data = 1;
  if (this->_internal_has_base_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_);
  }

  // .CGData.CGAttrBaseData detail = 27;
  if (this->_internal_has_detail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  // .CGData.CGCharacterPersDesc pers_desc = 30;
  if (this->_internal_has_pers_desc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pers_desc_);
  }

  // int32 souls = 2;
  if (this->_internal_souls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_souls());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 gold = 4;
  if (this->_internal_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 image_id = 5;
  if (this->_internal_image_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_id());
  }

  // int32 score = 6;
  if (this->_internal_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 skillslots = 7;
  if (this->_internal_skillslots() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillslots());
  }

  // int32 use_title = 8;
  if (this->_internal_use_title() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_use_title());
  }

  // int32 avatar_id = 9;
  if (this->_internal_avatar_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_id());
  }

  // int32 unitid = 10;
  if (this->_internal_unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  // int32 petid = 11;
  if (this->_internal_petid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_petid());
  }

  // int32 direction = 13;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // bool petriding = 12;
  if (this->_internal_petriding() != 0) {
    total_size += 1 + 1;
  }

  // bool usingpunchclock = 15;
  if (this->_internal_usingpunchclock() != 0) {
    total_size += 1 + 1;
  }

  // int32 punchclock = 14;
  if (this->_internal_punchclock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_punchclock());
  }

  // int32 manu_endurance = 18;
  if (this->_internal_manu_endurance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manu_endurance());
  }

  // int32 manu_skillful = 19;
  if (this->_internal_manu_skillful() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manu_skillful());
  }

  // int32 manu_intelligence = 20;
  if (this->_internal_manu_intelligence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manu_intelligence());
  }

  // int32 value_charisma = 21;
  if (this->_internal_value_charisma() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_charisma());
  }

  // int32 x = 22;
  if (this->_internal_x() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 23;
  if (this->_internal_y() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 map_number = 25;
  if (this->_internal_map_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_number());
  }

  // int32 server_line = 26;
  if (this->_internal_server_line() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_line());
  }

  // int32 battle_position = 31;
  if (this->_internal_battle_position() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_position());
  }

  // int32 bank_gold = 32;
  if (this->_internal_bank_gold() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bank_gold());
  }

  // optional int32 big_line = 33;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCharacterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCharacterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCharacterData::GetClassData() const { return &_class_data_; }

void CGCharacterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGCharacterData *>(to)->MergeFrom(
      static_cast<const CGCharacterData &>(from));
}


void CGCharacterData::MergeFrom(const CGCharacterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGCharacterData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  titles_.MergeFrom(from.titles_);
  skill_.MergeFrom(from.skill_);
  if (!from._internal_job().empty()) {
    _internal_set_job(from._internal_job());
  }
  if (!from._internal_map_name().empty()) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_nick().empty()) {
    _internal_set_nick(from._internal_nick());
  }
  if (from._internal_has_base_data()) {
    _internal_mutable_base_data()->::CGData::CGBaseData::MergeFrom(from._internal_base_data());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::CGData::CGAttrBaseData::MergeFrom(from._internal_detail());
  }
  if (from._internal_has_pers_desc()) {
    _internal_mutable_pers_desc()->::CGData::CGCharacterPersDesc::MergeFrom(from._internal_pers_desc());
  }
  if (from._internal_souls() != 0) {
    _internal_set_souls(from._internal_souls());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from._internal_image_id() != 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_skillslots() != 0) {
    _internal_set_skillslots(from._internal_skillslots());
  }
  if (from._internal_use_title() != 0) {
    _internal_set_use_title(from._internal_use_title());
  }
  if (from._internal_avatar_id() != 0) {
    _internal_set_avatar_id(from._internal_avatar_id());
  }
  if (from._internal_unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  if (from._internal_petid() != 0) {
    _internal_set_petid(from._internal_petid());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from._internal_petriding() != 0) {
    _internal_set_petriding(from._internal_petriding());
  }
  if (from._internal_usingpunchclock() != 0) {
    _internal_set_usingpunchclock(from._internal_usingpunchclock());
  }
  if (from._internal_punchclock() != 0) {
    _internal_set_punchclock(from._internal_punchclock());
  }
  if (from._internal_manu_endurance() != 0) {
    _internal_set_manu_endurance(from._internal_manu_endurance());
  }
  if (from._internal_manu_skillful() != 0) {
    _internal_set_manu_skillful(from._internal_manu_skillful());
  }
  if (from._internal_manu_intelligence() != 0) {
    _internal_set_manu_intelligence(from._internal_manu_intelligence());
  }
  if (from._internal_value_charisma() != 0) {
    _internal_set_value_charisma(from._internal_value_charisma());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_map_number() != 0) {
    _internal_set_map_number(from._internal_map_number());
  }
  if (from._internal_server_line() != 0) {
    _internal_set_server_line(from._internal_server_line());
  }
  if (from._internal_battle_position() != 0) {
    _internal_set_battle_position(from._internal_battle_position());
  }
  if (from._internal_bank_gold() != 0) {
    _internal_set_bank_gold(from._internal_bank_gold());
  }
  if (from._internal_has_big_line()) {
    _internal_set_big_line(from._internal_big_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCharacterData::CopyFrom(const CGCharacterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGCharacterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCharacterData::IsInitialized() const {
  return true;
}

void CGCharacterData::InternalSwap(CGCharacterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  titles_.InternalSwap(&other->titles_);
  skill_.InternalSwap(&other->skill_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_, GetArenaForAllocation(),
      &other->job_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, GetArenaForAllocation(),
      &other->map_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_, GetArenaForAllocation(),
      &other->nick_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCharacterData, big_line_)
      + sizeof(CGCharacterData::big_line_)
      - PROTOBUF_FIELD_OFFSET(CGCharacterData, base_data_)>(
          reinterpret_cast<char*>(&base_data_),
          reinterpret_cast<char*>(&other->base_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCharacterData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[27]);
}

// ===================================================================

class CGPetData::_Internal {
 public:
  static const ::CGData::CGBaseData& base_data(const CGPetData* msg);
  static const ::CGData::CGAttrBaseData& detail(const CGPetData* msg);
};

const ::CGData::CGBaseData&
CGPetData::_Internal::base_data(const CGPetData* msg) {
  return *msg->base_data_;
}
const ::CGData::CGAttrBaseData&
CGPetData::_Internal::detail(const CGPetData* msg) {
  return *msg->detail_;
}
CGPetData::CGPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  skill_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGPetData)
}
CGPetData::CGPetData(const CGPetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_real_name().empty()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base_data()) {
    base_data_ = new ::CGData::CGBaseData(*from.base_data_);
  } else {
    base_data_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new ::CGData::CGAttrBaseData(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillslots_) -
    reinterpret_cast<char*>(&index_)) + sizeof(skillslots_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGPetData)
}

inline void CGPetData::SharedCtor() {
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skillslots_) -
    reinterpret_cast<char*>(&base_data_)) + sizeof(skillslots_));
}

CGPetData::~CGPetData() {
  // @@protoc_insertion_point(destructor:CGData.CGPetData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGPetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_data_;
  if (this != internal_default_instance()) delete detail_;
}

void CGPetData::ArenaDtor(void* object) {
  CGPetData* _this = reinterpret_cast< CGPetData* >(object);
  (void)_this;
}
void CGPetData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGPetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGPetData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_.Clear();
  real_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillslots_) -
      reinterpret_cast<char*>(&index_)) + sizeof(skillslots_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CGData.CGBaseData base_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          battle_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 loyality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          loyality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default_battle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          default_battle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lossMinGrade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lossmingrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lossMaxGrade = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lossmaxgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGData.CGSkillBaseData skill = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .CGData.CGAttrBaseData detail = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string real_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGPetData.real_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 race = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          race_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skillslots = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          skillslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGPetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CGData.CGBaseData base_data = 1;
  if (this->_internal_has_base_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_data(this), target, stream);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // int32 battle_flags = 4;
  if (this->_internal_battle_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_battle_flags(), target);
  }

  // int32 loyality = 5;
  if (this->_internal_loyality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_loyality(), target);
  }

  // bool default_battle = 6;
  if (this->_internal_default_battle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_default_battle(), target);
  }

  // int32 state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_state(), target);
  }

  // int32 grade = 8;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_grade(), target);
  }

  // int32 lossMinGrade = 9;
  if (this->_internal_lossmingrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_lossmingrade(), target);
  }

  // int32 lossMaxGrade = 10;
  if (this->_internal_lossmaxgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_lossmaxgrade(), target);
  }

  // repeated .CGData.CGSkillBaseData skill = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_skill(i), target, stream);
  }

  // .CGData.CGAttrBaseData detail = 12;
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::detail(this), target, stream);
  }

  // string real_name = 13;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGPetData.real_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_real_name(), target);
  }

  // int32 race = 14;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_race(), target);
  }

  // int32 skillslots = 15;
  if (this->_internal_skillslots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_skillslots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGPetData)
  return target;
}

size_t CGPetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGPetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGSkillBaseData skill = 11;
  total_size += 1UL * this->_internal_skill_size();
  for (const auto& msg : this->skill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string real_name = 13;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // .CGData.CGBaseData base_data = 1;
  if (this->_internal_has_base_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_);
  }

  // .CGData.CGAttrBaseData detail = 12;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  // int32 battle_flags = 4;
  if (this->_internal_battle_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_flags());
  }

  // int32 loyality = 5;
  if (this->_internal_loyality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loyality());
  }

  // bool default_battle = 6;
  if (this->_internal_default_battle() != 0) {
    total_size += 1 + 1;
  }

  // int32 state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 grade = 8;
  if (this->_internal_grade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grade());
  }

  // int32 lossMinGrade = 9;
  if (this->_internal_lossmingrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lossmingrade());
  }

  // int32 lossMaxGrade = 10;
  if (this->_internal_lossmaxgrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lossmaxgrade());
  }

  // int32 race = 14;
  if (this->_internal_race() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_race());
  }

  // int32 skillslots = 15;
  if (this->_internal_skillslots() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillslots());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGPetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetData::GetClassData() const { return &_class_data_; }

void CGPetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGPetData *>(to)->MergeFrom(
      static_cast<const CGPetData &>(from));
}


void CGPetData::MergeFrom(const CGPetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGPetData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_.MergeFrom(from.skill_);
  if (!from._internal_real_name().empty()) {
    _internal_set_real_name(from._internal_real_name());
  }
  if (from._internal_has_base_data()) {
    _internal_mutable_base_data()->::CGData::CGBaseData::MergeFrom(from._internal_base_data());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::CGData::CGAttrBaseData::MergeFrom(from._internal_detail());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_battle_flags() != 0) {
    _internal_set_battle_flags(from._internal_battle_flags());
  }
  if (from._internal_loyality() != 0) {
    _internal_set_loyality(from._internal_loyality());
  }
  if (from._internal_default_battle() != 0) {
    _internal_set_default_battle(from._internal_default_battle());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_grade() != 0) {
    _internal_set_grade(from._internal_grade());
  }
  if (from._internal_lossmingrade() != 0) {
    _internal_set_lossmingrade(from._internal_lossmingrade());
  }
  if (from._internal_lossmaxgrade() != 0) {
    _internal_set_lossmaxgrade(from._internal_lossmaxgrade());
  }
  if (from._internal_race() != 0) {
    _internal_set_race(from._internal_race());
  }
  if (from._internal_skillslots() != 0) {
    _internal_set_skillslots(from._internal_skillslots());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetData::CopyFrom(const CGPetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetData::IsInitialized() const {
  return true;
}

void CGPetData::InternalSwap(CGPetData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  skill_.InternalSwap(&other->skill_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, GetArenaForAllocation(),
      &other->real_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPetData, skillslots_)
      + sizeof(CGPetData::skillslots_)
      - PROTOBUF_FIELD_OFFSET(CGPetData, base_data_)>(
          reinterpret_cast<char*>(&base_data_),
          reinterpret_cast<char*>(&other->base_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[28]);
}

// ===================================================================

class CGItemData::_Internal {
 public:
};

CGItemData::CGItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGItemData)
}
CGItemData::CGItemData(const CGItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attr().empty()) {
    attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attr(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&image_id_, &from.image_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&image_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGItemData)
}

inline void CGItemData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&image_id_)) + sizeof(count_));
}

CGItemData::~CGItemData() {
  // @@protoc_insertion_point(destructor:CGData.CGItemData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGItemData::ArenaDtor(void* object) {
  CGItemData* _this = reinterpret_cast< CGItemData* >(object);
  (void)_this;
}
void CGItemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  attr_.ClearToEmpty();
  info_.ClearToEmpty();
  ::memset(&image_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&image_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 image_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          image_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemData.attr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemData.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool assessed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          assessed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGItemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 image_id = 1;
  if (this->_internal_image_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_image_id(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // string attr = 6;
  if (!this->_internal_attr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemData.attr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_attr(), target);
  }

  // string info = 7;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemData.info");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_info(), target);
  }

  // int32 pos = 8;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pos(), target);
  }

  // bool assessed = 9;
  if (this->_internal_assessed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_assessed(), target);
  }

  // int32 count = 10;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGItemData)
  return target;
}

size_t CGItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGItemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string attr = 6;
  if (!this->_internal_attr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  // string info = 7;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 image_id = 1;
  if (this->_internal_image_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_id());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 pos = 8;
  if (this->_internal_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  // bool assessed = 9;
  if (this->_internal_assessed() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 10;
  if (this->_internal_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemData::GetClassData() const { return &_class_data_; }

void CGItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGItemData *>(to)->MergeFrom(
      static_cast<const CGItemData &>(from));
}


void CGItemData::MergeFrom(const CGItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGItemData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_attr().empty()) {
    _internal_set_attr(from._internal_attr());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  if (from._internal_image_id() != 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from._internal_item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
  if (from._internal_assessed() != 0) {
    _internal_set_assessed(from._internal_assessed());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemData::CopyFrom(const CGItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemData::IsInitialized() const {
  return true;
}

void CGItemData::InternalSwap(CGItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attr_, GetArenaForAllocation(),
      &other->attr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, GetArenaForAllocation(),
      &other->info_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemData, count_)
      + sizeof(CGItemData::count_)
      - PROTOBUF_FIELD_OFFSET(CGItemData, image_id_)>(
          reinterpret_cast<char*>(&image_id_),
          reinterpret_cast<char*>(&other->image_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[29]);
}

// ===================================================================

class CGStoreMapRequest::_Internal {
 public:
};

CGStoreMapRequest::CGStoreMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGStoreMapRequest)
}
CGStoreMapRequest::CGStoreMapRequest(const CGStoreMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  map_number_ = from.map_number_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGStoreMapRequest)
}

inline void CGStoreMapRequest::SharedCtor() {
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
map_number_ = 0;
}

CGStoreMapRequest::~CGStoreMapRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGStoreMapRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGStoreMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGStoreMapRequest::ArenaDtor(void* object) {
  CGStoreMapRequest* _this = reinterpret_cast< CGStoreMapRequest* >(object);
  (void)_this;
}
void CGStoreMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGStoreMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGStoreMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGStoreMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmpty();
  map_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGStoreMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          map_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGStoreMapRequest.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGStoreMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGStoreMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_number = 1;
  if (this->_internal_map_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_number(), target);
  }

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGStoreMapRequest.map_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGStoreMapRequest)
  return target;
}

size_t CGStoreMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGStoreMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 map_number = 1;
  if (this->_internal_map_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGStoreMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGStoreMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGStoreMapRequest::GetClassData() const { return &_class_data_; }

void CGStoreMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGStoreMapRequest *>(to)->MergeFrom(
      static_cast<const CGStoreMapRequest &>(from));
}


void CGStoreMapRequest::MergeFrom(const CGStoreMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGStoreMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_name().empty()) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from._internal_map_number() != 0) {
    _internal_set_map_number(from._internal_map_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGStoreMapRequest::CopyFrom(const CGStoreMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGStoreMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStoreMapRequest::IsInitialized() const {
  return true;
}

void CGStoreMapRequest::InternalSwap(CGStoreMapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, GetArenaForAllocation(),
      &other->map_name_, other->GetArenaForAllocation()
  );
  swap(map_number_, other->map_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGStoreMapRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[30]);
}

// ===================================================================

class CGStoreMapResponse::_Internal {
 public:
};

CGStoreMapResponse::CGStoreMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGStoreMapResponse)
}
CGStoreMapResponse::CGStoreMapResponse(const CGStoreMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGStoreMapResponse)
}

inline void CGStoreMapResponse::SharedCtor() {
}

CGStoreMapResponse::~CGStoreMapResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGStoreMapResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGStoreMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGStoreMapResponse::ArenaDtor(void* object) {
  CGStoreMapResponse* _this = reinterpret_cast< CGStoreMapResponse* >(object);
  (void)_this;
}
void CGStoreMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGStoreMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGStoreMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGStoreMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGStoreMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGStoreMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGStoreMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGStoreMapResponse)
  return target;
}

size_t CGStoreMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGStoreMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGStoreMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGStoreMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGStoreMapResponse::GetClassData() const { return &_class_data_; }

void CGStoreMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGStoreMapResponse *>(to)->MergeFrom(
      static_cast<const CGStoreMapResponse &>(from));
}


void CGStoreMapResponse::MergeFrom(const CGStoreMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGStoreMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGStoreMapResponse::CopyFrom(const CGStoreMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGStoreMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStoreMapResponse::IsInitialized() const {
  return true;
}

void CGStoreMapResponse::InternalSwap(CGStoreMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGStoreMapResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[31]);
}

// ===================================================================

class CGMapDataRequest::_Internal {
 public:
};

CGMapDataRequest::CGMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGMapDataRequest)
}
CGMapDataRequest::CGMapDataRequest(const CGMapDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGMapDataRequest)
}

inline void CGMapDataRequest::SharedCtor() {
}

CGMapDataRequest::~CGMapDataRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGMapDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGMapDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGMapDataRequest::ArenaDtor(void* object) {
  CGMapDataRequest* _this = reinterpret_cast< CGMapDataRequest* >(object);
  (void)_this;
}
void CGMapDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGMapDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGMapDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMapDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGMapDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGMapDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGMapDataRequest)
  return target;
}

size_t CGMapDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGMapDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMapDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGMapDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMapDataRequest::GetClassData() const { return &_class_data_; }

void CGMapDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGMapDataRequest *>(to)->MergeFrom(
      static_cast<const CGMapDataRequest &>(from));
}


void CGMapDataRequest::MergeFrom(const CGMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGMapDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMapDataRequest::CopyFrom(const CGMapDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGMapDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMapDataRequest::IsInitialized() const {
  return true;
}

void CGMapDataRequest::InternalSwap(CGMapDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMapDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[32]);
}

// ===================================================================

class CGMapDataResponse::_Internal {
 public:
};

CGMapDataResponse::CGMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  maps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGMapDataResponse)
}
CGMapDataResponse::CGMapDataResponse(const CGMapDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      maps_(from.maps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGMapDataResponse)
}

inline void CGMapDataResponse::SharedCtor() {
}

CGMapDataResponse::~CGMapDataResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGMapDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGMapDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGMapDataResponse::ArenaDtor(void* object) {
  CGMapDataResponse* _this = reinterpret_cast< CGMapDataResponse* >(object);
  (void)_this;
}
void CGMapDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGMapDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGMapDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMapDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGData.CGMapData maps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGMapDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGMapDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGData.CGMapData maps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_maps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGMapDataResponse)
  return target;
}

size_t CGMapDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGMapDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGMapData maps = 1;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMapDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGMapDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMapDataResponse::GetClassData() const { return &_class_data_; }

void CGMapDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGMapDataResponse *>(to)->MergeFrom(
      static_cast<const CGMapDataResponse &>(from));
}


void CGMapDataResponse::MergeFrom(const CGMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGMapDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maps_.MergeFrom(from.maps_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMapDataResponse::CopyFrom(const CGMapDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGMapDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMapDataResponse::IsInitialized() const {
  return true;
}

void CGMapDataResponse::InternalSwap(CGMapDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  maps_.InternalSwap(&other->maps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMapDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[33]);
}

// ===================================================================

class CGMapData::_Internal {
 public:
};

CGMapData::CGMapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGMapData)
}
CGMapData::CGMapData(const CGMapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&often_) -
    reinterpret_cast<char*>(&id_)) + sizeof(often_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGMapData)
}

inline void CGMapData::SharedCtor() {
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&often_) -
    reinterpret_cast<char*>(&id_)) + sizeof(often_));
}

CGMapData::~CGMapData() {
  // @@protoc_insertion_point(destructor:CGData.CGMapData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGMapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGMapData::ArenaDtor(void* object) {
  CGMapData* _this = reinterpret_cast< CGMapData* >(object);
  (void)_this;
}
void CGMapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&often_) -
      reinterpret_cast<char*>(&id_)) + sizeof(often_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          map_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGMapData.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGMapData.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 often = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          often_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGMapData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 map_number = 2;
  if (this->_internal_map_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_number(), target);
  }

  // string map_name = 3;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGMapData.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // string desc = 4;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGMapData.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // int32 often = 5;
  if (this->_internal_often() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_often(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGMapData)
  return target;
}

size_t CGMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGMapData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 3;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // string desc = 4;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 map_number = 2;
  if (this->_internal_map_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_number());
  }

  // int32 often = 5;
  if (this->_internal_often() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_often());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMapData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGMapData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMapData::GetClassData() const { return &_class_data_; }

void CGMapData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGMapData *>(to)->MergeFrom(
      static_cast<const CGMapData &>(from));
}


void CGMapData::MergeFrom(const CGMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGMapData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_name().empty()) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_map_number() != 0) {
    _internal_set_map_number(from._internal_map_number());
  }
  if (from._internal_often() != 0) {
    _internal_set_often(from._internal_often());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMapData::CopyFrom(const CGMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMapData::IsInitialized() const {
  return true;
}

void CGMapData::InternalSwap(CGMapData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, GetArenaForAllocation(),
      &other->map_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, GetArenaForAllocation(),
      &other->desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGMapData, often_)
      + sizeof(CGMapData::often_)
      - PROTOBUF_FIELD_OFFSET(CGMapData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMapData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[34]);
}

// ===================================================================

class CGPetGradeCalcRequest::_Internal {
 public:
};

CGPetGradeCalcRequest::CGPetGradeCalcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGPetGradeCalcRequest)
}
CGPetGradeCalcRequest::CGPetGradeCalcRequest(const CGPetGradeCalcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGPetGradeCalcRequest)
}

inline void CGPetGradeCalcRequest::SharedCtor() {
}

CGPetGradeCalcRequest::~CGPetGradeCalcRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGPetGradeCalcRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGPetGradeCalcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPetGradeCalcRequest::ArenaDtor(void* object) {
  CGPetGradeCalcRequest* _this = reinterpret_cast< CGPetGradeCalcRequest* >(object);
  (void)_this;
}
void CGPetGradeCalcRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGPetGradeCalcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGPetGradeCalcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGPetGradeCalcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetGradeCalcRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGPetGradeCalcRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGPetGradeCalcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGPetGradeCalcRequest)
  return target;
}

size_t CGPetGradeCalcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGPetGradeCalcRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetGradeCalcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGPetGradeCalcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetGradeCalcRequest::GetClassData() const { return &_class_data_; }

void CGPetGradeCalcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGPetGradeCalcRequest *>(to)->MergeFrom(
      static_cast<const CGPetGradeCalcRequest &>(from));
}


void CGPetGradeCalcRequest::MergeFrom(const CGPetGradeCalcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGPetGradeCalcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetGradeCalcRequest::CopyFrom(const CGPetGradeCalcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGPetGradeCalcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetGradeCalcRequest::IsInitialized() const {
  return true;
}

void CGPetGradeCalcRequest::InternalSwap(CGPetGradeCalcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetGradeCalcRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[35]);
}

// ===================================================================

class CGPetGradeCalcResponse::_Internal {
 public:
};

CGPetGradeCalcResponse::CGPetGradeCalcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pet_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGPetGradeCalcResponse)
}
CGPetGradeCalcResponse::CGPetGradeCalcResponse(const CGPetGradeCalcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pet_(from.pet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGPetGradeCalcResponse)
}

inline void CGPetGradeCalcResponse::SharedCtor() {
}

CGPetGradeCalcResponse::~CGPetGradeCalcResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGPetGradeCalcResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGPetGradeCalcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPetGradeCalcResponse::ArenaDtor(void* object) {
  CGPetGradeCalcResponse* _this = reinterpret_cast< CGPetGradeCalcResponse* >(object);
  (void)_this;
}
void CGPetGradeCalcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGPetGradeCalcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGPetGradeCalcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGPetGradeCalcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetGradeCalcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGData.CGPetGradeCalcData pet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGPetGradeCalcResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGPetGradeCalcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGData.CGPetGradeCalcData pet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGPetGradeCalcResponse)
  return target;
}

size_t CGPetGradeCalcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGPetGradeCalcResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGData.CGPetGradeCalcData pet = 1;
  total_size += 1UL * this->_internal_pet_size();
  for (const auto& msg : this->pet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetGradeCalcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGPetGradeCalcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetGradeCalcResponse::GetClassData() const { return &_class_data_; }

void CGPetGradeCalcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGPetGradeCalcResponse *>(to)->MergeFrom(
      static_cast<const CGPetGradeCalcResponse &>(from));
}


void CGPetGradeCalcResponse::MergeFrom(const CGPetGradeCalcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGPetGradeCalcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_.MergeFrom(from.pet_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetGradeCalcResponse::CopyFrom(const CGPetGradeCalcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGPetGradeCalcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetGradeCalcResponse::IsInitialized() const {
  return true;
}

void CGPetGradeCalcResponse::InternalSwap(CGPetGradeCalcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pet_.InternalSwap(&other->pet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetGradeCalcResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[36]);
}

// ===================================================================

class CGPetGradeCalcData::_Internal {
 public:
};

CGPetGradeCalcData::CGPetGradeCalcData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bestbpgrade_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGPetGradeCalcData)
}
CGPetGradeCalcData::CGPetGradeCalcData(const CGPetGradeCalcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bestbpgrade_(from.bestbpgrade_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  racetypename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_racetypename().empty()) {
    racetypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_racetypename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_slots_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skill_slots_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGPetGradeCalcData)
}

inline void CGPetGradeCalcData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
racetypename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skill_slots_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skill_slots_));
}

CGPetGradeCalcData::~CGPetGradeCalcData() {
  // @@protoc_insertion_point(destructor:CGData.CGPetGradeCalcData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGPetGradeCalcData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  racetypename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGPetGradeCalcData::ArenaDtor(void* object) {
  CGPetGradeCalcData* _this = reinterpret_cast< CGPetGradeCalcData* >(object);
  (void)_this;
}
void CGPetGradeCalcData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGPetGradeCalcData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGPetGradeCalcData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGPetGradeCalcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bestbpgrade_.Clear();
  name_.ClearToEmpty();
  racetypename_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_slots_) -
      reinterpret_cast<char*>(&id_)) + sizeof(skill_slots_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetGradeCalcData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGPetGradeCalcData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 raceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          racetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raceTypeName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_racetypename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGPetGradeCalcData.raceTypeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double baseBP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          basebp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 totalGrade = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double bestBPGrade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bestbpgrade(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_bestbpgrade(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 can_catch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          can_catch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          image_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate_endurance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          rate_endurance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate_strength = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          rate_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate_defense = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          rate_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate_agility = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          rate_agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate_magical = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          rate_magical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_earth = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          element_earth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_water = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          element_water_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_fire = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          element_fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 element_wind = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          element_wind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skill_slots = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          skill_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGPetGradeCalcData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGPetGradeCalcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGPetGradeCalcData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 raceType = 4;
  if (this->_internal_racetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_racetype(), target);
  }

  // string raceTypeName = 5;
  if (!this->_internal_racetypename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_racetypename().data(), static_cast<int>(this->_internal_racetypename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGPetGradeCalcData.raceTypeName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_racetypename(), target);
  }

  // double baseBP = 6;
  if (!(this->_internal_basebp() <= 0 && this->_internal_basebp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_basebp(), target);
  }

  // int32 totalGrade = 7;
  if (this->_internal_totalgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_totalgrade(), target);
  }

  // repeated double bestBPGrade = 8;
  if (this->_internal_bestbpgrade_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_bestbpgrade(), target);
  }

  // int32 can_catch = 9;
  if (this->_internal_can_catch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_can_catch(), target);
  }

  // int32 card_type = 10;
  if (this->_internal_card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_card_type(), target);
  }

  // int32 image_id = 11;
  if (this->_internal_image_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_image_id(), target);
  }

  // int32 rate_endurance = 12;
  if (this->_internal_rate_endurance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_rate_endurance(), target);
  }

  // int32 rate_strength = 13;
  if (this->_internal_rate_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_rate_strength(), target);
  }

  // int32 rate_defense = 14;
  if (this->_internal_rate_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_rate_defense(), target);
  }

  // int32 rate_agility = 15;
  if (this->_internal_rate_agility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_rate_agility(), target);
  }

  // int32 rate_magical = 16;
  if (this->_internal_rate_magical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_rate_magical(), target);
  }

  // int32 element_earth = 17;
  if (this->_internal_element_earth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_element_earth(), target);
  }

  // int32 element_water = 18;
  if (this->_internal_element_water() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_element_water(), target);
  }

  // int32 element_fire = 19;
  if (this->_internal_element_fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_element_fire(), target);
  }

  // int32 element_wind = 20;
  if (this->_internal_element_wind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_element_wind(), target);
  }

  // int32 skill_slots = 21;
  if (this->_internal_skill_slots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_skill_slots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGPetGradeCalcData)
  return target;
}

size_t CGPetGradeCalcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGPetGradeCalcData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bestBPGrade = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bestbpgrade_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string raceTypeName = 5;
  if (!this->_internal_racetypename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_racetypename());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 number = 2;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 raceType = 4;
  if (this->_internal_racetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_racetype());
  }

  // double baseBP = 6;
  if (!(this->_internal_basebp() <= 0 && this->_internal_basebp() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 totalGrade = 7;
  if (this->_internal_totalgrade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalgrade());
  }

  // int32 can_catch = 9;
  if (this->_internal_can_catch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_can_catch());
  }

  // int32 card_type = 10;
  if (this->_internal_card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  // int32 image_id = 11;
  if (this->_internal_image_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_id());
  }

  // int32 rate_endurance = 12;
  if (this->_internal_rate_endurance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_endurance());
  }

  // int32 rate_strength = 13;
  if (this->_internal_rate_strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_strength());
  }

  // int32 rate_defense = 14;
  if (this->_internal_rate_defense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_defense());
  }

  // int32 rate_agility = 15;
  if (this->_internal_rate_agility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_agility());
  }

  // int32 rate_magical = 16;
  if (this->_internal_rate_magical() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_magical());
  }

  // int32 element_earth = 17;
  if (this->_internal_element_earth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_earth());
  }

  // int32 element_water = 18;
  if (this->_internal_element_water() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_water());
  }

  // int32 element_fire = 19;
  if (this->_internal_element_fire() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_fire());
  }

  // int32 element_wind = 20;
  if (this->_internal_element_wind() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_wind());
  }

  // int32 skill_slots = 21;
  if (this->_internal_skill_slots() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skill_slots());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetGradeCalcData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGPetGradeCalcData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetGradeCalcData::GetClassData() const { return &_class_data_; }

void CGPetGradeCalcData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGPetGradeCalcData *>(to)->MergeFrom(
      static_cast<const CGPetGradeCalcData &>(from));
}


void CGPetGradeCalcData::MergeFrom(const CGPetGradeCalcData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGPetGradeCalcData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bestbpgrade_.MergeFrom(from.bestbpgrade_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_racetypename().empty()) {
    _internal_set_racetypename(from._internal_racetypename());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_racetype() != 0) {
    _internal_set_racetype(from._internal_racetype());
  }
  if (!(from._internal_basebp() <= 0 && from._internal_basebp() >= 0)) {
    _internal_set_basebp(from._internal_basebp());
  }
  if (from._internal_totalgrade() != 0) {
    _internal_set_totalgrade(from._internal_totalgrade());
  }
  if (from._internal_can_catch() != 0) {
    _internal_set_can_catch(from._internal_can_catch());
  }
  if (from._internal_card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
  if (from._internal_image_id() != 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from._internal_rate_endurance() != 0) {
    _internal_set_rate_endurance(from._internal_rate_endurance());
  }
  if (from._internal_rate_strength() != 0) {
    _internal_set_rate_strength(from._internal_rate_strength());
  }
  if (from._internal_rate_defense() != 0) {
    _internal_set_rate_defense(from._internal_rate_defense());
  }
  if (from._internal_rate_agility() != 0) {
    _internal_set_rate_agility(from._internal_rate_agility());
  }
  if (from._internal_rate_magical() != 0) {
    _internal_set_rate_magical(from._internal_rate_magical());
  }
  if (from._internal_element_earth() != 0) {
    _internal_set_element_earth(from._internal_element_earth());
  }
  if (from._internal_element_water() != 0) {
    _internal_set_element_water(from._internal_element_water());
  }
  if (from._internal_element_fire() != 0) {
    _internal_set_element_fire(from._internal_element_fire());
  }
  if (from._internal_element_wind() != 0) {
    _internal_set_element_wind(from._internal_element_wind());
  }
  if (from._internal_skill_slots() != 0) {
    _internal_set_skill_slots(from._internal_skill_slots());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetGradeCalcData::CopyFrom(const CGPetGradeCalcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGPetGradeCalcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetGradeCalcData::IsInitialized() const {
  return true;
}

void CGPetGradeCalcData::InternalSwap(CGPetGradeCalcData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bestbpgrade_.InternalSwap(&other->bestbpgrade_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &racetypename_, GetArenaForAllocation(),
      &other->racetypename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPetGradeCalcData, skill_slots_)
      + sizeof(CGPetGradeCalcData::skill_slots_)
      - PROTOBUF_FIELD_OFFSET(CGPetGradeCalcData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetGradeCalcData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[37]);
}

// ===================================================================

class CGItemRequest::_Internal {
 public:
};

CGItemRequest::CGItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGItemRequest)
}
CGItemRequest::CGItemRequest(const CGItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGItemRequest)
}

inline void CGItemRequest::SharedCtor() {
item_id_ = 0;
}

CGItemRequest::~CGItemRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGItemRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGItemRequest::ArenaDtor(void* object) {
  CGItemRequest* _this = reinterpret_cast< CGItemRequest* >(object);
  (void)_this;
}
void CGItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGItemRequest)
  return target;
}

size_t CGItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemRequest::GetClassData() const { return &_class_data_; }

void CGItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGItemRequest *>(to)->MergeFrom(
      static_cast<const CGItemRequest &>(from));
}


void CGItemRequest::MergeFrom(const CGItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemRequest::CopyFrom(const CGItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemRequest::IsInitialized() const {
  return true;
}

void CGItemRequest::InternalSwap(CGItemRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[38]);
}

// ===================================================================

class CGItemResponse::_Internal {
 public:
};

CGItemResponse::CGItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGItemResponse)
}
CGItemResponse::CGItemResponse(const CGItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attribute().empty()) {
    attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attribute(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exist_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGItemResponse)
}

inline void CGItemResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exist_));
}

CGItemResponse::~CGItemResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGItemResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGItemResponse::ArenaDtor(void* object) {
  CGItemResponse* _this = reinterpret_cast< CGItemResponse* >(object);
  (void)_this;
}
void CGItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  attribute_.ClearToEmpty();
  desc_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxpile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxpile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellLimitCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          selllimitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attribute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemResponse.attribute"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGItemResponse.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exist = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // int32 maxpile = 6;
  if (this->_internal_maxpile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maxpile(), target);
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  // int32 sellLimitCount = 8;
  if (this->_internal_selllimitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_selllimitcount(), target);
  }

  // string attribute = 9;
  if (!this->_internal_attribute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute().data(), static_cast<int>(this->_internal_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemResponse.attribute");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_attribute(), target);
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGItemResponse.desc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_desc(), target);
  }

  // bool exist = 11;
  if (this->_internal_exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_exist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGItemResponse)
  return target;
}

size_t CGItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string attribute = 9;
  if (!this->_internal_attribute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attribute());
  }

  // string desc = 10;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 maxpile = 6;
  if (this->_internal_maxpile() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxpile());
  }

  // int32 level = 7;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 sellLimitCount = 8;
  if (this->_internal_selllimitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selllimitcount());
  }

  // bool exist = 11;
  if (this->_internal_exist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemResponse::GetClassData() const { return &_class_data_; }

void CGItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGItemResponse *>(to)->MergeFrom(
      static_cast<const CGItemResponse &>(from));
}


void CGItemResponse::MergeFrom(const CGItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_attribute().empty()) {
    _internal_set_attribute(from._internal_attribute());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_maxpile() != 0) {
    _internal_set_maxpile(from._internal_maxpile());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_selllimitcount() != 0) {
    _internal_set_selllimitcount(from._internal_selllimitcount());
  }
  if (from._internal_exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemResponse::CopyFrom(const CGItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemResponse::IsInitialized() const {
  return true;
}

void CGItemResponse::InternalSwap(CGItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attribute_, GetArenaForAllocation(),
      &other->attribute_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, GetArenaForAllocation(),
      &other->desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemResponse, exist_)
      + sizeof(CGItemResponse::exist_)
      - PROTOBUF_FIELD_OFFSET(CGItemResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[39]);
}

// ===================================================================

class CGStoreItemRequest::_Internal {
 public:
};

CGStoreItemRequest::CGStoreItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGStoreItemRequest)
}
CGStoreItemRequest::CGStoreItemRequest(const CGStoreItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attribute().empty()) {
    attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attribute(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assessed_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(assessed_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGStoreItemRequest)
}

inline void CGStoreItemRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assessed_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(assessed_));
}

CGStoreItemRequest::~CGStoreItemRequest() {
  // @@protoc_insertion_point(destructor:CGData.CGStoreItemRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGStoreItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGStoreItemRequest::ArenaDtor(void* object) {
  CGStoreItemRequest* _this = reinterpret_cast< CGStoreItemRequest* >(object);
  (void)_this;
}
void CGStoreItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGStoreItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGStoreItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGStoreItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  attribute_.ClearToEmpty();
  desc_.ClearToEmpty();
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assessed_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(assessed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGStoreItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGStoreItemRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxpile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxpile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellLimitCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          selllimitcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attribute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGStoreItemRequest.attribute"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGStoreItemRequest.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool assessed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          assessed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGStoreItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGStoreItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGStoreItemRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 maxpile = 5;
  if (this->_internal_maxpile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxpile(), target);
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // int32 sellLimitCount = 7;
  if (this->_internal_selllimitcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_selllimitcount(), target);
  }

  // string attribute = 8;
  if (!this->_internal_attribute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute().data(), static_cast<int>(this->_internal_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGStoreItemRequest.attribute");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_attribute(), target);
  }

  // string desc = 9;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGStoreItemRequest.desc");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_desc(), target);
  }

  // bool assessed = 10;
  if (this->_internal_assessed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_assessed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGStoreItemRequest)
  return target;
}

size_t CGStoreItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGStoreItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string attribute = 8;
  if (!this->_internal_attribute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attribute());
  }

  // string desc = 9;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 maxpile = 5;
  if (this->_internal_maxpile() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxpile());
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 sellLimitCount = 7;
  if (this->_internal_selllimitcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selllimitcount());
  }

  // bool assessed = 10;
  if (this->_internal_assessed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGStoreItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGStoreItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGStoreItemRequest::GetClassData() const { return &_class_data_; }

void CGStoreItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGStoreItemRequest *>(to)->MergeFrom(
      static_cast<const CGStoreItemRequest &>(from));
}


void CGStoreItemRequest::MergeFrom(const CGStoreItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGStoreItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_attribute().empty()) {
    _internal_set_attribute(from._internal_attribute());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_maxpile() != 0) {
    _internal_set_maxpile(from._internal_maxpile());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_selllimitcount() != 0) {
    _internal_set_selllimitcount(from._internal_selllimitcount());
  }
  if (from._internal_assessed() != 0) {
    _internal_set_assessed(from._internal_assessed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGStoreItemRequest::CopyFrom(const CGStoreItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGStoreItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStoreItemRequest::IsInitialized() const {
  return true;
}

void CGStoreItemRequest::InternalSwap(CGStoreItemRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attribute_, GetArenaForAllocation(),
      &other->attribute_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, GetArenaForAllocation(),
      &other->desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGStoreItemRequest, assessed_)
      + sizeof(CGStoreItemRequest::assessed_)
      - PROTOBUF_FIELD_OFFSET(CGStoreItemRequest, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGStoreItemRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[40]);
}

// ===================================================================

class CGStoreItemResponse::_Internal {
 public:
};

CGStoreItemResponse::CGStoreItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGStoreItemResponse)
}
CGStoreItemResponse::CGStoreItemResponse(const CGStoreItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maybename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maybename().empty()) {
    maybename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maybename(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGStoreItemResponse)
}

inline void CGStoreItemResponse::SharedCtor() {
maybename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

CGStoreItemResponse::~CGStoreItemResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGStoreItemResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGStoreItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  maybename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGStoreItemResponse::ArenaDtor(void* object) {
  CGStoreItemResponse* _this = reinterpret_cast< CGStoreItemResponse* >(object);
  (void)_this;
}
void CGStoreItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGStoreItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGStoreItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGStoreItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maybename_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGStoreItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maybeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_maybename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGData.CGStoreItemResponse.maybeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGStoreItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGStoreItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string maybeName = 2;
  if (!this->_internal_maybename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maybename().data(), static_cast<int>(this->_internal_maybename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CGData.CGStoreItemResponse.maybeName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_maybename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGStoreItemResponse)
  return target;
}

size_t CGStoreItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGStoreItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string maybeName = 2;
  if (!this->_internal_maybename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maybename());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGStoreItemResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGStoreItemResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGStoreItemResponse::GetClassData() const { return &_class_data_; }

void CGStoreItemResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGStoreItemResponse *>(to)->MergeFrom(
      static_cast<const CGStoreItemResponse &>(from));
}


void CGStoreItemResponse::MergeFrom(const CGStoreItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGStoreItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_maybename().empty()) {
    _internal_set_maybename(from._internal_maybename());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGStoreItemResponse::CopyFrom(const CGStoreItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGStoreItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStoreItemResponse::IsInitialized() const {
  return true;
}

void CGStoreItemResponse::InternalSwap(CGStoreItemResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maybename_, GetArenaForAllocation(),
      &other->maybename_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGStoreItemResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[41]);
}

// ===================================================================

class CGVoidData::_Internal {
 public:
};

CGVoidData::CGVoidData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGVoidData)
}
CGVoidData::CGVoidData(const CGVoidData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGData.CGVoidData)
}

inline void CGVoidData::SharedCtor() {
}

CGVoidData::~CGVoidData() {
  // @@protoc_insertion_point(destructor:CGData.CGVoidData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGVoidData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGVoidData::ArenaDtor(void* object) {
  CGVoidData* _this = reinterpret_cast< CGVoidData* >(object);
  (void)_this;
}
void CGVoidData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGVoidData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGVoidData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGVoidData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGVoidData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGVoidData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGVoidData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGVoidData)
  return target;
}

size_t CGVoidData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGVoidData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGVoidData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGVoidData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGVoidData::GetClassData() const { return &_class_data_; }

void CGVoidData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGVoidData *>(to)->MergeFrom(
      static_cast<const CGVoidData &>(from));
}


void CGVoidData::MergeFrom(const CGVoidData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGVoidData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGVoidData::CopyFrom(const CGVoidData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGVoidData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGVoidData::IsInitialized() const {
  return true;
}

void CGVoidData::InternalSwap(CGVoidData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGVoidData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[42]);
}

// ===================================================================

class CGBoolData::_Internal {
 public:
};

CGBoolData::CGBoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGBoolData)
}
CGBoolData::CGBoolData(const CGBoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGBoolData)
}

inline void CGBoolData::SharedCtor() {
val_ = false;
}

CGBoolData::~CGBoolData() {
  // @@protoc_insertion_point(destructor:CGData.CGBoolData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGBoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGBoolData::ArenaDtor(void* object) {
  CGBoolData* _this = reinterpret_cast< CGBoolData* >(object);
  (void)_this;
}
void CGBoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGBoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGBoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGBoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGBoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGBoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGBoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGBoolData)
  return target;
}

size_t CGBoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGBoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool val = 1;
  if (this->_internal_val() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGBoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGBoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGBoolData::GetClassData() const { return &_class_data_; }

void CGBoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGBoolData *>(to)->MergeFrom(
      static_cast<const CGBoolData &>(from));
}


void CGBoolData::MergeFrom(const CGBoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGBoolData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGBoolData::CopyFrom(const CGBoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGBoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBoolData::IsInitialized() const {
  return true;
}

void CGBoolData::InternalSwap(CGBoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGBoolData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[43]);
}

// ===================================================================

class CGIntData::_Internal {
 public:
};

CGIntData::CGIntData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGIntData)
}
CGIntData::CGIntData(const CGIntData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:CGData.CGIntData)
}

inline void CGIntData::SharedCtor() {
val_ = 0;
}

CGIntData::~CGIntData() {
  // @@protoc_insertion_point(destructor:CGData.CGIntData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGIntData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGIntData::ArenaDtor(void* object) {
  CGIntData* _this = reinterpret_cast< CGIntData* >(object);
  (void)_this;
}
void CGIntData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGIntData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGIntData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGIntData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGIntData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGIntData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGIntData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGIntData)
  return target;
}

size_t CGIntData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGIntData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->_internal_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGIntData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGIntData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGIntData::GetClassData() const { return &_class_data_; }

void CGIntData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGIntData *>(to)->MergeFrom(
      static_cast<const CGIntData &>(from));
}


void CGIntData::MergeFrom(const CGIntData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGIntData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGIntData::CopyFrom(const CGIntData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGIntData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGIntData::IsInitialized() const {
  return true;
}

void CGIntData::InternalSwap(CGIntData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGIntData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[44]);
}

// ===================================================================

class CGSysTimeResponse::_Internal {
 public:
};

CGSysTimeResponse::CGSysTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGSysTimeResponse)
}
CGSysTimeResponse::CGSysTimeResponse(const CGSysTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&years_, &from.years_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&years_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGSysTimeResponse)
}

inline void CGSysTimeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&years_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&years_)) + sizeof(server_time_));
}

CGSysTimeResponse::~CGSysTimeResponse() {
  // @@protoc_insertion_point(destructor:CGData.CGSysTimeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGSysTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGSysTimeResponse::ArenaDtor(void* object) {
  CGSysTimeResponse* _this = reinterpret_cast< CGSysTimeResponse* >(object);
  (void)_this;
}
void CGSysTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGSysTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGSysTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGSysTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&years_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&years_)) + sizeof(server_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSysTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 years = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          years_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 secs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 local_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          local_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGSysTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGSysTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->_internal_years() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_years(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 days = 3;
  if (this->_internal_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_days(), target);
  }

  // int32 hours = 4;
  if (this->_internal_hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hours(), target);
  }

  // int32 mins = 5;
  if (this->_internal_mins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mins(), target);
  }

  // int32 secs = 6;
  if (this->_internal_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_secs(), target);
  }

  // int32 local_time = 7;
  if (this->_internal_local_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_local_time(), target);
  }

  // int32 server_time = 8;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGSysTimeResponse)
  return target;
}

size_t CGSysTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGSysTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->_internal_years() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_years());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 days = 3;
  if (this->_internal_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  // int32 hours = 4;
  if (this->_internal_hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // int32 mins = 5;
  if (this->_internal_mins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins());
  }

  // int32 secs = 6;
  if (this->_internal_secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secs());
  }

  // int32 local_time = 7;
  if (this->_internal_local_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_local_time());
  }

  // int32 server_time = 8;
  if (this->_internal_server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSysTimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGSysTimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSysTimeResponse::GetClassData() const { return &_class_data_; }

void CGSysTimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGSysTimeResponse *>(to)->MergeFrom(
      static_cast<const CGSysTimeResponse &>(from));
}


void CGSysTimeResponse::MergeFrom(const CGSysTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGSysTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_years() != 0) {
    _internal_set_years(from._internal_years());
  }
  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from._internal_hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (from._internal_mins() != 0) {
    _internal_set_mins(from._internal_mins());
  }
  if (from._internal_secs() != 0) {
    _internal_set_secs(from._internal_secs());
  }
  if (from._internal_local_time() != 0) {
    _internal_set_local_time(from._internal_local_time());
  }
  if (from._internal_server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSysTimeResponse::CopyFrom(const CGSysTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGSysTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSysTimeResponse::IsInitialized() const {
  return true;
}

void CGSysTimeResponse::InternalSwap(CGSysTimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSysTimeResponse, server_time_)
      + sizeof(CGSysTimeResponse::server_time_)
      - PROTOBUF_FIELD_OFFSET(CGSysTimeResponse, years_)>(
          reinterpret_cast<char*>(&years_),
          reinterpret_cast<char*>(&other->years_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSysTimeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[45]);
}

// ===================================================================

class CGPlayerFlagEnabledData::_Internal {
 public:
};

CGPlayerFlagEnabledData::CGPlayerFlagEnabledData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGData.CGPlayerFlagEnabledData)
}
CGPlayerFlagEnabledData::CGPlayerFlagEnabledData(const CGPlayerFlagEnabledData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:CGData.CGPlayerFlagEnabledData)
}

inline void CGPlayerFlagEnabledData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enable_));
}

CGPlayerFlagEnabledData::~CGPlayerFlagEnabledData() {
  // @@protoc_insertion_point(destructor:CGData.CGPlayerFlagEnabledData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGPlayerFlagEnabledData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPlayerFlagEnabledData::ArenaDtor(void* object) {
  CGPlayerFlagEnabledData* _this = reinterpret_cast< CGPlayerFlagEnabledData* >(object);
  (void)_this;
}
void CGPlayerFlagEnabledData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGPlayerFlagEnabledData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGPlayerFlagEnabledData::Clear() {
// @@protoc_insertion_point(message_clear_start:CGData.CGPlayerFlagEnabledData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&index_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerFlagEnabledData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGPlayerFlagEnabledData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGData.CGPlayerFlagEnabledData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGData.CGPlayerFlagEnabledData)
  return target;
}

size_t CGPlayerFlagEnabledData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGData.CGPlayerFlagEnabledData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerFlagEnabledData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGPlayerFlagEnabledData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerFlagEnabledData::GetClassData() const { return &_class_data_; }

void CGPlayerFlagEnabledData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CGPlayerFlagEnabledData *>(to)->MergeFrom(
      static_cast<const CGPlayerFlagEnabledData &>(from));
}


void CGPlayerFlagEnabledData::MergeFrom(const CGPlayerFlagEnabledData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGData.CGPlayerFlagEnabledData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerFlagEnabledData::CopyFrom(const CGPlayerFlagEnabledData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGData.CGPlayerFlagEnabledData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerFlagEnabledData::IsInitialized() const {
  return true;
}

void CGPlayerFlagEnabledData::InternalSwap(CGPlayerFlagEnabledData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPlayerFlagEnabledData, enable_)
      + sizeof(CGPlayerFlagEnabledData::enable_)
      - PROTOBUF_FIELD_OFFSET(CGPlayerFlagEnabledData, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerFlagEnabledData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CGData_2eproto_getter, &descriptor_table_CGData_2eproto_once,
      file_level_metadata_CGData_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CGData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGData::CGGmeTypeRequest* Arena::CreateMaybeMessage< ::CGData::CGGmeTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGGmeTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::StringPub* Arena::CreateMaybeMessage< ::CGData::StringPub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::StringPub >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadGidDataRequest* Arena::CreateMaybeMessage< ::CGData::UploadGidDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadGidDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadGidDataResponse* Arena::CreateMaybeMessage< ::CGData::UploadGidDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadGidDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadGidBankDataRequest* Arena::CreateMaybeMessage< ::CGData::UploadGidBankDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadGidBankDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadGidBankDataResponse* Arena::CreateMaybeMessage< ::CGData::UploadGidBankDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadGidBankDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadMapDataRequest* Arena::CreateMaybeMessage< ::CGData::UploadMapDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadMapDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadMapDataResponse* Arena::CreateMaybeMessage< ::CGData::UploadMapDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadMapDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::DownloadMapDataRequest* Arena::CreateMaybeMessage< ::CGData::DownloadMapDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::DownloadMapDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::DownloadMapDataResponse* Arena::CreateMaybeMessage< ::CGData::DownloadMapDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::DownloadMapDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadCharcterServerRequest* Arena::CreateMaybeMessage< ::CGData::UploadCharcterServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadCharcterServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::UploadCharcterServerResponse* Arena::CreateMaybeMessage< ::CGData::UploadCharcterServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::UploadCharcterServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGAccountGidData* Arena::CreateMaybeMessage< ::CGData::CGAccountGidData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGAccountGidData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectAccountGidDataRequest* Arena::CreateMaybeMessage< ::CGData::SelectAccountGidDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectAccountGidDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectGidDataRequest* Arena::CreateMaybeMessage< ::CGData::SelectGidDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectGidDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectCharacterDataRequest* Arena::CreateMaybeMessage< ::CGData::SelectCharacterDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectCharacterDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectCharacterDataResponse* Arena::CreateMaybeMessage< ::CGData::SelectCharacterDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectCharacterDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectCharacterServerRequest* Arena::CreateMaybeMessage< ::CGData::SelectCharacterServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectCharacterServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectCharacterServerResponse* Arena::CreateMaybeMessage< ::CGData::SelectCharacterServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectCharacterServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectTaskInfoRequest* Arena::CreateMaybeMessage< ::CGData::SelectTaskInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectTaskInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectTaskInfoResponse* Arena::CreateMaybeMessage< ::CGData::SelectTaskInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectTaskInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectAccountGidDataResponse* Arena::CreateMaybeMessage< ::CGData::SelectAccountGidDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectAccountGidDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::SelectGidDataResponse* Arena::CreateMaybeMessage< ::CGData::SelectGidDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::SelectGidDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGBaseData* Arena::CreateMaybeMessage< ::CGData::CGBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGSkillBaseData* Arena::CreateMaybeMessage< ::CGData::CGSkillBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGSkillBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGAttrBaseData* Arena::CreateMaybeMessage< ::CGData::CGAttrBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGAttrBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGCharacterPersDesc* Arena::CreateMaybeMessage< ::CGData::CGCharacterPersDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGCharacterPersDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGCharacterData* Arena::CreateMaybeMessage< ::CGData::CGCharacterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGCharacterData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGPetData* Arena::CreateMaybeMessage< ::CGData::CGPetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGPetData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGItemData* Arena::CreateMaybeMessage< ::CGData::CGItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGStoreMapRequest* Arena::CreateMaybeMessage< ::CGData::CGStoreMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGStoreMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGStoreMapResponse* Arena::CreateMaybeMessage< ::CGData::CGStoreMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGStoreMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGMapDataRequest* Arena::CreateMaybeMessage< ::CGData::CGMapDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGMapDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGMapDataResponse* Arena::CreateMaybeMessage< ::CGData::CGMapDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGMapDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGMapData* Arena::CreateMaybeMessage< ::CGData::CGMapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGMapData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGPetGradeCalcRequest* Arena::CreateMaybeMessage< ::CGData::CGPetGradeCalcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGPetGradeCalcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGPetGradeCalcResponse* Arena::CreateMaybeMessage< ::CGData::CGPetGradeCalcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGPetGradeCalcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGPetGradeCalcData* Arena::CreateMaybeMessage< ::CGData::CGPetGradeCalcData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGPetGradeCalcData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGItemRequest* Arena::CreateMaybeMessage< ::CGData::CGItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGItemResponse* Arena::CreateMaybeMessage< ::CGData::CGItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGStoreItemRequest* Arena::CreateMaybeMessage< ::CGData::CGStoreItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGStoreItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGStoreItemResponse* Arena::CreateMaybeMessage< ::CGData::CGStoreItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGStoreItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGVoidData* Arena::CreateMaybeMessage< ::CGData::CGVoidData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGVoidData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGBoolData* Arena::CreateMaybeMessage< ::CGData::CGBoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGBoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGIntData* Arena::CreateMaybeMessage< ::CGData::CGIntData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGIntData >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGSysTimeResponse* Arena::CreateMaybeMessage< ::CGData::CGSysTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGSysTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGData::CGPlayerFlagEnabledData* Arena::CreateMaybeMessage< ::CGData::CGPlayerFlagEnabledData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGData::CGPlayerFlagEnabledData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
