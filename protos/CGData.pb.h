// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CGData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CGData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CGData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CGData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[47]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CGData_2eproto;
namespace CGData {
class CGAccountGidData;
struct CGAccountGidDataDefaultTypeInternal;
extern CGAccountGidDataDefaultTypeInternal _CGAccountGidData_default_instance_;
class CGAttrBaseData;
struct CGAttrBaseDataDefaultTypeInternal;
extern CGAttrBaseDataDefaultTypeInternal _CGAttrBaseData_default_instance_;
class CGBaseData;
struct CGBaseDataDefaultTypeInternal;
extern CGBaseDataDefaultTypeInternal _CGBaseData_default_instance_;
class CGBoolData;
struct CGBoolDataDefaultTypeInternal;
extern CGBoolDataDefaultTypeInternal _CGBoolData_default_instance_;
class CGCharacterData;
struct CGCharacterDataDefaultTypeInternal;
extern CGCharacterDataDefaultTypeInternal _CGCharacterData_default_instance_;
class CGCharacterPersDesc;
struct CGCharacterPersDescDefaultTypeInternal;
extern CGCharacterPersDescDefaultTypeInternal _CGCharacterPersDesc_default_instance_;
class CGGmeTypeRequest;
struct CGGmeTypeRequestDefaultTypeInternal;
extern CGGmeTypeRequestDefaultTypeInternal _CGGmeTypeRequest_default_instance_;
class CGIntData;
struct CGIntDataDefaultTypeInternal;
extern CGIntDataDefaultTypeInternal _CGIntData_default_instance_;
class CGItemData;
struct CGItemDataDefaultTypeInternal;
extern CGItemDataDefaultTypeInternal _CGItemData_default_instance_;
class CGItemRequest;
struct CGItemRequestDefaultTypeInternal;
extern CGItemRequestDefaultTypeInternal _CGItemRequest_default_instance_;
class CGItemResponse;
struct CGItemResponseDefaultTypeInternal;
extern CGItemResponseDefaultTypeInternal _CGItemResponse_default_instance_;
class CGMapData;
struct CGMapDataDefaultTypeInternal;
extern CGMapDataDefaultTypeInternal _CGMapData_default_instance_;
class CGMapDataRequest;
struct CGMapDataRequestDefaultTypeInternal;
extern CGMapDataRequestDefaultTypeInternal _CGMapDataRequest_default_instance_;
class CGMapDataResponse;
struct CGMapDataResponseDefaultTypeInternal;
extern CGMapDataResponseDefaultTypeInternal _CGMapDataResponse_default_instance_;
class CGPetData;
struct CGPetDataDefaultTypeInternal;
extern CGPetDataDefaultTypeInternal _CGPetData_default_instance_;
class CGPetGradeCalcData;
struct CGPetGradeCalcDataDefaultTypeInternal;
extern CGPetGradeCalcDataDefaultTypeInternal _CGPetGradeCalcData_default_instance_;
class CGPetGradeCalcRequest;
struct CGPetGradeCalcRequestDefaultTypeInternal;
extern CGPetGradeCalcRequestDefaultTypeInternal _CGPetGradeCalcRequest_default_instance_;
class CGPetGradeCalcResponse;
struct CGPetGradeCalcResponseDefaultTypeInternal;
extern CGPetGradeCalcResponseDefaultTypeInternal _CGPetGradeCalcResponse_default_instance_;
class CGPlayerFlagEnabledData;
struct CGPlayerFlagEnabledDataDefaultTypeInternal;
extern CGPlayerFlagEnabledDataDefaultTypeInternal _CGPlayerFlagEnabledData_default_instance_;
class CGSkillBaseData;
struct CGSkillBaseDataDefaultTypeInternal;
extern CGSkillBaseDataDefaultTypeInternal _CGSkillBaseData_default_instance_;
class CGStoreItemRequest;
struct CGStoreItemRequestDefaultTypeInternal;
extern CGStoreItemRequestDefaultTypeInternal _CGStoreItemRequest_default_instance_;
class CGStoreItemResponse;
struct CGStoreItemResponseDefaultTypeInternal;
extern CGStoreItemResponseDefaultTypeInternal _CGStoreItemResponse_default_instance_;
class CGStoreMapRequest;
struct CGStoreMapRequestDefaultTypeInternal;
extern CGStoreMapRequestDefaultTypeInternal _CGStoreMapRequest_default_instance_;
class CGStoreMapResponse;
struct CGStoreMapResponseDefaultTypeInternal;
extern CGStoreMapResponseDefaultTypeInternal _CGStoreMapResponse_default_instance_;
class CGSysTimeResponse;
struct CGSysTimeResponseDefaultTypeInternal;
extern CGSysTimeResponseDefaultTypeInternal _CGSysTimeResponse_default_instance_;
class CGVoidData;
struct CGVoidDataDefaultTypeInternal;
extern CGVoidDataDefaultTypeInternal _CGVoidData_default_instance_;
class DownloadMapDataRequest;
struct DownloadMapDataRequestDefaultTypeInternal;
extern DownloadMapDataRequestDefaultTypeInternal _DownloadMapDataRequest_default_instance_;
class DownloadMapDataResponse;
struct DownloadMapDataResponseDefaultTypeInternal;
extern DownloadMapDataResponseDefaultTypeInternal _DownloadMapDataResponse_default_instance_;
class SelectAccountGidDataRequest;
struct SelectAccountGidDataRequestDefaultTypeInternal;
extern SelectAccountGidDataRequestDefaultTypeInternal _SelectAccountGidDataRequest_default_instance_;
class SelectAccountGidDataResponse;
struct SelectAccountGidDataResponseDefaultTypeInternal;
extern SelectAccountGidDataResponseDefaultTypeInternal _SelectAccountGidDataResponse_default_instance_;
class SelectCharacterDataRequest;
struct SelectCharacterDataRequestDefaultTypeInternal;
extern SelectCharacterDataRequestDefaultTypeInternal _SelectCharacterDataRequest_default_instance_;
class SelectCharacterDataResponse;
struct SelectCharacterDataResponseDefaultTypeInternal;
extern SelectCharacterDataResponseDefaultTypeInternal _SelectCharacterDataResponse_default_instance_;
class SelectCharacterServerRequest;
struct SelectCharacterServerRequestDefaultTypeInternal;
extern SelectCharacterServerRequestDefaultTypeInternal _SelectCharacterServerRequest_default_instance_;
class SelectCharacterServerResponse;
struct SelectCharacterServerResponseDefaultTypeInternal;
extern SelectCharacterServerResponseDefaultTypeInternal _SelectCharacterServerResponse_default_instance_;
class SelectGidDataRequest;
struct SelectGidDataRequestDefaultTypeInternal;
extern SelectGidDataRequestDefaultTypeInternal _SelectGidDataRequest_default_instance_;
class SelectGidDataResponse;
struct SelectGidDataResponseDefaultTypeInternal;
extern SelectGidDataResponseDefaultTypeInternal _SelectGidDataResponse_default_instance_;
class SelectTaskInfoRequest;
struct SelectTaskInfoRequestDefaultTypeInternal;
extern SelectTaskInfoRequestDefaultTypeInternal _SelectTaskInfoRequest_default_instance_;
class SelectTaskInfoResponse;
struct SelectTaskInfoResponseDefaultTypeInternal;
extern SelectTaskInfoResponseDefaultTypeInternal _SelectTaskInfoResponse_default_instance_;
class StringPub;
struct StringPubDefaultTypeInternal;
extern StringPubDefaultTypeInternal _StringPub_default_instance_;
class UploadCharcterServerRequest;
struct UploadCharcterServerRequestDefaultTypeInternal;
extern UploadCharcterServerRequestDefaultTypeInternal _UploadCharcterServerRequest_default_instance_;
class UploadCharcterServerResponse;
struct UploadCharcterServerResponseDefaultTypeInternal;
extern UploadCharcterServerResponseDefaultTypeInternal _UploadCharcterServerResponse_default_instance_;
class UploadGidBankDataRequest;
struct UploadGidBankDataRequestDefaultTypeInternal;
extern UploadGidBankDataRequestDefaultTypeInternal _UploadGidBankDataRequest_default_instance_;
class UploadGidBankDataResponse;
struct UploadGidBankDataResponseDefaultTypeInternal;
extern UploadGidBankDataResponseDefaultTypeInternal _UploadGidBankDataResponse_default_instance_;
class UploadGidDataRequest;
struct UploadGidDataRequestDefaultTypeInternal;
extern UploadGidDataRequestDefaultTypeInternal _UploadGidDataRequest_default_instance_;
class UploadGidDataResponse;
struct UploadGidDataResponseDefaultTypeInternal;
extern UploadGidDataResponseDefaultTypeInternal _UploadGidDataResponse_default_instance_;
class UploadMapDataRequest;
struct UploadMapDataRequestDefaultTypeInternal;
extern UploadMapDataRequestDefaultTypeInternal _UploadMapDataRequest_default_instance_;
class UploadMapDataResponse;
struct UploadMapDataResponseDefaultTypeInternal;
extern UploadMapDataResponseDefaultTypeInternal _UploadMapDataResponse_default_instance_;
}  // namespace CGData
PROTOBUF_NAMESPACE_OPEN
template<> ::CGData::CGAccountGidData* Arena::CreateMaybeMessage<::CGData::CGAccountGidData>(Arena*);
template<> ::CGData::CGAttrBaseData* Arena::CreateMaybeMessage<::CGData::CGAttrBaseData>(Arena*);
template<> ::CGData::CGBaseData* Arena::CreateMaybeMessage<::CGData::CGBaseData>(Arena*);
template<> ::CGData::CGBoolData* Arena::CreateMaybeMessage<::CGData::CGBoolData>(Arena*);
template<> ::CGData::CGCharacterData* Arena::CreateMaybeMessage<::CGData::CGCharacterData>(Arena*);
template<> ::CGData::CGCharacterPersDesc* Arena::CreateMaybeMessage<::CGData::CGCharacterPersDesc>(Arena*);
template<> ::CGData::CGGmeTypeRequest* Arena::CreateMaybeMessage<::CGData::CGGmeTypeRequest>(Arena*);
template<> ::CGData::CGIntData* Arena::CreateMaybeMessage<::CGData::CGIntData>(Arena*);
template<> ::CGData::CGItemData* Arena::CreateMaybeMessage<::CGData::CGItemData>(Arena*);
template<> ::CGData::CGItemRequest* Arena::CreateMaybeMessage<::CGData::CGItemRequest>(Arena*);
template<> ::CGData::CGItemResponse* Arena::CreateMaybeMessage<::CGData::CGItemResponse>(Arena*);
template<> ::CGData::CGMapData* Arena::CreateMaybeMessage<::CGData::CGMapData>(Arena*);
template<> ::CGData::CGMapDataRequest* Arena::CreateMaybeMessage<::CGData::CGMapDataRequest>(Arena*);
template<> ::CGData::CGMapDataResponse* Arena::CreateMaybeMessage<::CGData::CGMapDataResponse>(Arena*);
template<> ::CGData::CGPetData* Arena::CreateMaybeMessage<::CGData::CGPetData>(Arena*);
template<> ::CGData::CGPetGradeCalcData* Arena::CreateMaybeMessage<::CGData::CGPetGradeCalcData>(Arena*);
template<> ::CGData::CGPetGradeCalcRequest* Arena::CreateMaybeMessage<::CGData::CGPetGradeCalcRequest>(Arena*);
template<> ::CGData::CGPetGradeCalcResponse* Arena::CreateMaybeMessage<::CGData::CGPetGradeCalcResponse>(Arena*);
template<> ::CGData::CGPlayerFlagEnabledData* Arena::CreateMaybeMessage<::CGData::CGPlayerFlagEnabledData>(Arena*);
template<> ::CGData::CGSkillBaseData* Arena::CreateMaybeMessage<::CGData::CGSkillBaseData>(Arena*);
template<> ::CGData::CGStoreItemRequest* Arena::CreateMaybeMessage<::CGData::CGStoreItemRequest>(Arena*);
template<> ::CGData::CGStoreItemResponse* Arena::CreateMaybeMessage<::CGData::CGStoreItemResponse>(Arena*);
template<> ::CGData::CGStoreMapRequest* Arena::CreateMaybeMessage<::CGData::CGStoreMapRequest>(Arena*);
template<> ::CGData::CGStoreMapResponse* Arena::CreateMaybeMessage<::CGData::CGStoreMapResponse>(Arena*);
template<> ::CGData::CGSysTimeResponse* Arena::CreateMaybeMessage<::CGData::CGSysTimeResponse>(Arena*);
template<> ::CGData::CGVoidData* Arena::CreateMaybeMessage<::CGData::CGVoidData>(Arena*);
template<> ::CGData::DownloadMapDataRequest* Arena::CreateMaybeMessage<::CGData::DownloadMapDataRequest>(Arena*);
template<> ::CGData::DownloadMapDataResponse* Arena::CreateMaybeMessage<::CGData::DownloadMapDataResponse>(Arena*);
template<> ::CGData::SelectAccountGidDataRequest* Arena::CreateMaybeMessage<::CGData::SelectAccountGidDataRequest>(Arena*);
template<> ::CGData::SelectAccountGidDataResponse* Arena::CreateMaybeMessage<::CGData::SelectAccountGidDataResponse>(Arena*);
template<> ::CGData::SelectCharacterDataRequest* Arena::CreateMaybeMessage<::CGData::SelectCharacterDataRequest>(Arena*);
template<> ::CGData::SelectCharacterDataResponse* Arena::CreateMaybeMessage<::CGData::SelectCharacterDataResponse>(Arena*);
template<> ::CGData::SelectCharacterServerRequest* Arena::CreateMaybeMessage<::CGData::SelectCharacterServerRequest>(Arena*);
template<> ::CGData::SelectCharacterServerResponse* Arena::CreateMaybeMessage<::CGData::SelectCharacterServerResponse>(Arena*);
template<> ::CGData::SelectGidDataRequest* Arena::CreateMaybeMessage<::CGData::SelectGidDataRequest>(Arena*);
template<> ::CGData::SelectGidDataResponse* Arena::CreateMaybeMessage<::CGData::SelectGidDataResponse>(Arena*);
template<> ::CGData::SelectTaskInfoRequest* Arena::CreateMaybeMessage<::CGData::SelectTaskInfoRequest>(Arena*);
template<> ::CGData::SelectTaskInfoResponse* Arena::CreateMaybeMessage<::CGData::SelectTaskInfoResponse>(Arena*);
template<> ::CGData::StringPub* Arena::CreateMaybeMessage<::CGData::StringPub>(Arena*);
template<> ::CGData::UploadCharcterServerRequest* Arena::CreateMaybeMessage<::CGData::UploadCharcterServerRequest>(Arena*);
template<> ::CGData::UploadCharcterServerResponse* Arena::CreateMaybeMessage<::CGData::UploadCharcterServerResponse>(Arena*);
template<> ::CGData::UploadGidBankDataRequest* Arena::CreateMaybeMessage<::CGData::UploadGidBankDataRequest>(Arena*);
template<> ::CGData::UploadGidBankDataResponse* Arena::CreateMaybeMessage<::CGData::UploadGidBankDataResponse>(Arena*);
template<> ::CGData::UploadGidDataRequest* Arena::CreateMaybeMessage<::CGData::UploadGidDataRequest>(Arena*);
template<> ::CGData::UploadGidDataResponse* Arena::CreateMaybeMessage<::CGData::UploadGidDataResponse>(Arena*);
template<> ::CGData::UploadMapDataRequest* Arena::CreateMaybeMessage<::CGData::UploadMapDataRequest>(Arena*);
template<> ::CGData::UploadMapDataResponse* Arena::CreateMaybeMessage<::CGData::UploadMapDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CGData {

// ===================================================================

class CGGmeTypeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGGmeTypeRequest) */ {
 public:
  inline CGGmeTypeRequest() : CGGmeTypeRequest(nullptr) {}
  ~CGGmeTypeRequest() override;
  explicit constexpr CGGmeTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGGmeTypeRequest(const CGGmeTypeRequest& from);
  CGGmeTypeRequest(CGGmeTypeRequest&& from) noexcept
    : CGGmeTypeRequest() {
    *this = ::std::move(from);
  }

  inline CGGmeTypeRequest& operator=(const CGGmeTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGGmeTypeRequest& operator=(CGGmeTypeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGGmeTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGGmeTypeRequest* internal_default_instance() {
    return reinterpret_cast<const CGGmeTypeRequest*>(
               &_CGGmeTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGGmeTypeRequest& a, CGGmeTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGGmeTypeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGGmeTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGGmeTypeRequest* New() const final {
    return new CGGmeTypeRequest();
  }

  CGGmeTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGGmeTypeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGGmeTypeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGGmeTypeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGGmeTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGGmeTypeRequest";
  }
  protected:
  explicit CGGmeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGGmeTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class StringPub final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.StringPub) */ {
 public:
  inline StringPub() : StringPub(nullptr) {}
  ~StringPub() override;
  explicit constexpr StringPub(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPub(const StringPub& from);
  StringPub(StringPub&& from) noexcept
    : StringPub() {
    *this = ::std::move(from);
  }

  inline StringPub& operator=(const StringPub& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPub& operator=(StringPub&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPub& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringPub* internal_default_instance() {
    return reinterpret_cast<const StringPub*>(
               &_StringPub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringPub& a, StringPub& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPub* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringPub* New() const final {
    return new StringPub();
  }

  StringPub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringPub>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPub& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringPub& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.StringPub";
  }
  protected:
  explicit StringPub(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CGData.StringPub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadGidDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadGidDataRequest) */ {
 public:
  inline UploadGidDataRequest() : UploadGidDataRequest(nullptr) {}
  ~UploadGidDataRequest() override;
  explicit constexpr UploadGidDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGidDataRequest(const UploadGidDataRequest& from);
  UploadGidDataRequest(UploadGidDataRequest&& from) noexcept
    : UploadGidDataRequest() {
    *this = ::std::move(from);
  }

  inline UploadGidDataRequest& operator=(const UploadGidDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGidDataRequest& operator=(UploadGidDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGidDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGidDataRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGidDataRequest*>(
               &_UploadGidDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadGidDataRequest& a, UploadGidDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGidDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGidDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGidDataRequest* New() const final {
    return new UploadGidDataRequest();
  }

  UploadGidDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGidDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGidDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGidDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGidDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadGidDataRequest";
  }
  protected:
  explicit UploadGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetDataFieldNumber = 4,
    kItemsFieldNumber = 5,
    kGidFieldNumber = 1,
    kCharacterNameFieldNumber = 2,
    kCharacterDataFieldNumber = 3,
    kRoleTypeFieldNumber = 6,
    kBigLineFieldNumber = 7,
  };
  // repeated .CGData.CGPetData pet_data = 4;
  int pet_data_size() const;
  private:
  int _internal_pet_data_size() const;
  public:
  void clear_pet_data();
  ::CGData::CGPetData* mutable_pet_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
      mutable_pet_data();
  private:
  const ::CGData::CGPetData& _internal_pet_data(int index) const;
  ::CGData::CGPetData* _internal_add_pet_data();
  public:
  const ::CGData::CGPetData& pet_data(int index) const;
  ::CGData::CGPetData* add_pet_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
      pet_data() const;

  // repeated .CGData.CGItemData items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CGData::CGItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
      mutable_items();
  private:
  const ::CGData::CGItemData& _internal_items(int index) const;
  ::CGData::CGItemData* _internal_add_items();
  public:
  const ::CGData::CGItemData& items(int index) const;
  ::CGData::CGItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
      items() const;

  // string gid = 1;
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .CGData.CGCharacterData character_data = 3;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::CGData::CGCharacterData& character_data() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGCharacterData* release_character_data();
  ::CGData::CGCharacterData* mutable_character_data();
  void set_allocated_character_data(::CGData::CGCharacterData* character_data);
  private:
  const ::CGData::CGCharacterData& _internal_character_data() const;
  ::CGData::CGCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::CGData::CGCharacterData* character_data);
  ::CGData::CGCharacterData* unsafe_arena_release_character_data();

  // int32 role_type = 6;
  void clear_role_type();
  ::PROTOBUF_NAMESPACE_ID::int32 role_type() const;
  void set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_type() const;
  void _internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 big_line = 7;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.UploadGidDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData > pet_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  ::CGData::CGCharacterData* character_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadGidDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadGidDataResponse) */ {
 public:
  inline UploadGidDataResponse() : UploadGidDataResponse(nullptr) {}
  ~UploadGidDataResponse() override;
  explicit constexpr UploadGidDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGidDataResponse(const UploadGidDataResponse& from);
  UploadGidDataResponse(UploadGidDataResponse&& from) noexcept
    : UploadGidDataResponse() {
    *this = ::std::move(from);
  }

  inline UploadGidDataResponse& operator=(const UploadGidDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGidDataResponse& operator=(UploadGidDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGidDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGidDataResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGidDataResponse*>(
               &_UploadGidDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadGidDataResponse& a, UploadGidDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGidDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGidDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGidDataResponse* New() const final {
    return new UploadGidDataResponse();
  }

  UploadGidDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGidDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGidDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGidDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGidDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadGidDataResponse";
  }
  protected:
  explicit UploadGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.UploadGidDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadGidBankDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadGidBankDataRequest) */ {
 public:
  inline UploadGidBankDataRequest() : UploadGidBankDataRequest(nullptr) {}
  ~UploadGidBankDataRequest() override;
  explicit constexpr UploadGidBankDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGidBankDataRequest(const UploadGidBankDataRequest& from);
  UploadGidBankDataRequest(UploadGidBankDataRequest&& from) noexcept
    : UploadGidBankDataRequest() {
    *this = ::std::move(from);
  }

  inline UploadGidBankDataRequest& operator=(const UploadGidBankDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGidBankDataRequest& operator=(UploadGidBankDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGidBankDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGidBankDataRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGidBankDataRequest*>(
               &_UploadGidBankDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UploadGidBankDataRequest& a, UploadGidBankDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGidBankDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGidBankDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGidBankDataRequest* New() const final {
    return new UploadGidBankDataRequest();
  }

  UploadGidBankDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGidBankDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGidBankDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGidBankDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGidBankDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadGidBankDataRequest";
  }
  protected:
  explicit UploadGidBankDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetDataFieldNumber = 4,
    kItemsFieldNumber = 5,
    kGidFieldNumber = 1,
    kCharacterNameFieldNumber = 2,
    kGoldFieldNumber = 3,
    kRoleTypeFieldNumber = 6,
    kBigLineFieldNumber = 7,
  };
  // repeated .CGData.CGPetData pet_data = 4;
  int pet_data_size() const;
  private:
  int _internal_pet_data_size() const;
  public:
  void clear_pet_data();
  ::CGData::CGPetData* mutable_pet_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
      mutable_pet_data();
  private:
  const ::CGData::CGPetData& _internal_pet_data(int index) const;
  ::CGData::CGPetData* _internal_add_pet_data();
  public:
  const ::CGData::CGPetData& pet_data(int index) const;
  ::CGData::CGPetData* add_pet_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
      pet_data() const;

  // repeated .CGData.CGItemData items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CGData::CGItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
      mutable_items();
  private:
  const ::CGData::CGItemData& _internal_items(int index) const;
  ::CGData::CGItemData* _internal_add_items();
  public:
  const ::CGData::CGItemData& items(int index) const;
  ::CGData::CGItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
      items() const;

  // string gid = 1;
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // int32 gold = 3;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role_type = 6;
  void clear_role_type();
  ::PROTOBUF_NAMESPACE_ID::int32 role_type() const;
  void set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_type() const;
  void _internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 big_line = 7;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.UploadGidBankDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData > pet_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadGidBankDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadGidBankDataResponse) */ {
 public:
  inline UploadGidBankDataResponse() : UploadGidBankDataResponse(nullptr) {}
  ~UploadGidBankDataResponse() override;
  explicit constexpr UploadGidBankDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadGidBankDataResponse(const UploadGidBankDataResponse& from);
  UploadGidBankDataResponse(UploadGidBankDataResponse&& from) noexcept
    : UploadGidBankDataResponse() {
    *this = ::std::move(from);
  }

  inline UploadGidBankDataResponse& operator=(const UploadGidBankDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGidBankDataResponse& operator=(UploadGidBankDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGidBankDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGidBankDataResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGidBankDataResponse*>(
               &_UploadGidBankDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UploadGidBankDataResponse& a, UploadGidBankDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGidBankDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGidBankDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGidBankDataResponse* New() const final {
    return new UploadGidBankDataResponse();
  }

  UploadGidBankDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGidBankDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadGidBankDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadGidBankDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGidBankDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadGidBankDataResponse";
  }
  protected:
  explicit UploadGidBankDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.UploadGidBankDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadMapDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadMapDataRequest) */ {
 public:
  inline UploadMapDataRequest() : UploadMapDataRequest(nullptr) {}
  ~UploadMapDataRequest() override;
  explicit constexpr UploadMapDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMapDataRequest(const UploadMapDataRequest& from);
  UploadMapDataRequest(UploadMapDataRequest&& from) noexcept
    : UploadMapDataRequest() {
    *this = ::std::move(from);
  }

  inline UploadMapDataRequest& operator=(const UploadMapDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMapDataRequest& operator=(UploadMapDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMapDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMapDataRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMapDataRequest*>(
               &_UploadMapDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UploadMapDataRequest& a, UploadMapDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMapDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMapDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMapDataRequest* New() const final {
    return new UploadMapDataRequest();
  }

  UploadMapDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMapDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMapDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadMapDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMapDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadMapDataRequest";
  }
  protected:
  explicit UploadMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kServerLineFieldNumber = 2,
    kMapTypeFieldNumber = 3,
    kFileTimeFieldNumber = 4,
    kImageDataFieldNumber = 5,
  };
  // string FileName = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string ServerLine = 2;
  void clear_serverline();
  const std::string& serverline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverline();
  PROTOBUF_MUST_USE_RESULT std::string* release_serverline();
  void set_allocated_serverline(std::string* serverline);
  private:
  const std::string& _internal_serverline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverline(const std::string& value);
  std::string* _internal_mutable_serverline();
  public:

  // string MapType = 3;
  void clear_maptype();
  const std::string& maptype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maptype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maptype();
  PROTOBUF_MUST_USE_RESULT std::string* release_maptype();
  void set_allocated_maptype(std::string* maptype);
  private:
  const std::string& _internal_maptype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maptype(const std::string& value);
  std::string* _internal_mutable_maptype();
  public:

  // string fileTime = 4;
  void clear_filetime();
  const std::string& filetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filetime();
  PROTOBUF_MUST_USE_RESULT std::string* release_filetime();
  void set_allocated_filetime(std::string* filetime);
  private:
  const std::string& _internal_filetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filetime(const std::string& value);
  std::string* _internal_mutable_filetime();
  public:

  // bytes ImageData = 5;
  void clear_imagedata();
  const std::string& imagedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagedata();
  PROTOBUF_MUST_USE_RESULT std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // @@protoc_insertion_point(class_scope:CGData.UploadMapDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maptype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadMapDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadMapDataResponse) */ {
 public:
  inline UploadMapDataResponse() : UploadMapDataResponse(nullptr) {}
  ~UploadMapDataResponse() override;
  explicit constexpr UploadMapDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMapDataResponse(const UploadMapDataResponse& from);
  UploadMapDataResponse(UploadMapDataResponse&& from) noexcept
    : UploadMapDataResponse() {
    *this = ::std::move(from);
  }

  inline UploadMapDataResponse& operator=(const UploadMapDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMapDataResponse& operator=(UploadMapDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMapDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMapDataResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMapDataResponse*>(
               &_UploadMapDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UploadMapDataResponse& a, UploadMapDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMapDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMapDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMapDataResponse* New() const final {
    return new UploadMapDataResponse();
  }

  UploadMapDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMapDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMapDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadMapDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMapDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadMapDataResponse";
  }
  protected:
  explicit UploadMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.UploadMapDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class DownloadMapDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.DownloadMapDataRequest) */ {
 public:
  inline DownloadMapDataRequest() : DownloadMapDataRequest(nullptr) {}
  ~DownloadMapDataRequest() override;
  explicit constexpr DownloadMapDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMapDataRequest(const DownloadMapDataRequest& from);
  DownloadMapDataRequest(DownloadMapDataRequest&& from) noexcept
    : DownloadMapDataRequest() {
    *this = ::std::move(from);
  }

  inline DownloadMapDataRequest& operator=(const DownloadMapDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMapDataRequest& operator=(DownloadMapDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMapDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMapDataRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadMapDataRequest*>(
               &_DownloadMapDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DownloadMapDataRequest& a, DownloadMapDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMapDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMapDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadMapDataRequest* New() const final {
    return new DownloadMapDataRequest();
  }

  DownloadMapDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadMapDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadMapDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadMapDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMapDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.DownloadMapDataRequest";
  }
  protected:
  explicit DownloadMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kServerLineFieldNumber = 2,
    kMapTypeFieldNumber = 3,
  };
  // string FileName = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string ServerLine = 2;
  void clear_serverline();
  const std::string& serverline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverline();
  PROTOBUF_MUST_USE_RESULT std::string* release_serverline();
  void set_allocated_serverline(std::string* serverline);
  private:
  const std::string& _internal_serverline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverline(const std::string& value);
  std::string* _internal_mutable_serverline();
  public:

  // string MapType = 3;
  void clear_maptype();
  const std::string& maptype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maptype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maptype();
  PROTOBUF_MUST_USE_RESULT std::string* release_maptype();
  void set_allocated_maptype(std::string* maptype);
  private:
  const std::string& _internal_maptype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maptype(const std::string& value);
  std::string* _internal_mutable_maptype();
  public:

  // @@protoc_insertion_point(class_scope:CGData.DownloadMapDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class DownloadMapDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.DownloadMapDataResponse) */ {
 public:
  inline DownloadMapDataResponse() : DownloadMapDataResponse(nullptr) {}
  ~DownloadMapDataResponse() override;
  explicit constexpr DownloadMapDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMapDataResponse(const DownloadMapDataResponse& from);
  DownloadMapDataResponse(DownloadMapDataResponse&& from) noexcept
    : DownloadMapDataResponse() {
    *this = ::std::move(from);
  }

  inline DownloadMapDataResponse& operator=(const DownloadMapDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMapDataResponse& operator=(DownloadMapDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMapDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMapDataResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadMapDataResponse*>(
               &_DownloadMapDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DownloadMapDataResponse& a, DownloadMapDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMapDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMapDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadMapDataResponse* New() const final {
    return new DownloadMapDataResponse();
  }

  DownloadMapDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadMapDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadMapDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadMapDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMapDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.DownloadMapDataResponse";
  }
  protected:
  explicit DownloadMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kServerLineFieldNumber = 2,
    kMapTypeFieldNumber = 3,
    kFileTimeFieldNumber = 4,
    kImageDataFieldNumber = 5,
  };
  // string FileName = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string ServerLine = 2;
  void clear_serverline();
  const std::string& serverline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverline();
  PROTOBUF_MUST_USE_RESULT std::string* release_serverline();
  void set_allocated_serverline(std::string* serverline);
  private:
  const std::string& _internal_serverline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverline(const std::string& value);
  std::string* _internal_mutable_serverline();
  public:

  // string MapType = 3;
  void clear_maptype();
  const std::string& maptype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maptype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maptype();
  PROTOBUF_MUST_USE_RESULT std::string* release_maptype();
  void set_allocated_maptype(std::string* maptype);
  private:
  const std::string& _internal_maptype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maptype(const std::string& value);
  std::string* _internal_mutable_maptype();
  public:

  // string fileTime = 4;
  void clear_filetime();
  const std::string& filetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filetime();
  PROTOBUF_MUST_USE_RESULT std::string* release_filetime();
  void set_allocated_filetime(std::string* filetime);
  private:
  const std::string& _internal_filetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filetime(const std::string& value);
  std::string* _internal_mutable_filetime();
  public:

  // bytes ImageData = 5;
  void clear_imagedata();
  const std::string& imagedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagedata();
  PROTOBUF_MUST_USE_RESULT std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // @@protoc_insertion_point(class_scope:CGData.DownloadMapDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maptype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadCharcterServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadCharcterServerRequest) */ {
 public:
  inline UploadCharcterServerRequest() : UploadCharcterServerRequest(nullptr) {}
  ~UploadCharcterServerRequest() override;
  explicit constexpr UploadCharcterServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadCharcterServerRequest(const UploadCharcterServerRequest& from);
  UploadCharcterServerRequest(UploadCharcterServerRequest&& from) noexcept
    : UploadCharcterServerRequest() {
    *this = ::std::move(from);
  }

  inline UploadCharcterServerRequest& operator=(const UploadCharcterServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadCharcterServerRequest& operator=(UploadCharcterServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadCharcterServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadCharcterServerRequest* internal_default_instance() {
    return reinterpret_cast<const UploadCharcterServerRequest*>(
               &_UploadCharcterServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UploadCharcterServerRequest& a, UploadCharcterServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadCharcterServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadCharcterServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadCharcterServerRequest* New() const final {
    return new UploadCharcterServerRequest();
  }

  UploadCharcterServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadCharcterServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadCharcterServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadCharcterServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadCharcterServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadCharcterServerRequest";
  }
  protected:
  explicit UploadCharcterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharNameFieldNumber = 1,
    kIpFieldNumber = 3,
    kBigLineFieldNumber = 2,
    kPortFieldNumber = 4,
    kOnlineFieldNumber = 5,
  };
  // string char_name = 1;
  void clear_char_name();
  const std::string& char_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_char_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_char_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_char_name();
  void set_allocated_char_name(std::string* char_name);
  private:
  const std::string& _internal_char_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_name(const std::string& value);
  std::string* _internal_mutable_char_name();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online = 5;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.UploadCharcterServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class UploadCharcterServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.UploadCharcterServerResponse) */ {
 public:
  inline UploadCharcterServerResponse() : UploadCharcterServerResponse(nullptr) {}
  ~UploadCharcterServerResponse() override;
  explicit constexpr UploadCharcterServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadCharcterServerResponse(const UploadCharcterServerResponse& from);
  UploadCharcterServerResponse(UploadCharcterServerResponse&& from) noexcept
    : UploadCharcterServerResponse() {
    *this = ::std::move(from);
  }

  inline UploadCharcterServerResponse& operator=(const UploadCharcterServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadCharcterServerResponse& operator=(UploadCharcterServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadCharcterServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadCharcterServerResponse* internal_default_instance() {
    return reinterpret_cast<const UploadCharcterServerResponse*>(
               &_UploadCharcterServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UploadCharcterServerResponse& a, UploadCharcterServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadCharcterServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadCharcterServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadCharcterServerResponse* New() const final {
    return new UploadCharcterServerResponse();
  }

  UploadCharcterServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadCharcterServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadCharcterServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadCharcterServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadCharcterServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.UploadCharcterServerResponse";
  }
  protected:
  explicit UploadCharcterServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.UploadCharcterServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGAccountGidData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGAccountGidData) */ {
 public:
  inline CGAccountGidData() : CGAccountGidData(nullptr) {}
  ~CGAccountGidData() override;
  explicit constexpr CGAccountGidData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGAccountGidData(const CGAccountGidData& from);
  CGAccountGidData(CGAccountGidData&& from) noexcept
    : CGAccountGidData() {
    *this = ::std::move(from);
  }

  inline CGAccountGidData& operator=(const CGAccountGidData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGAccountGidData& operator=(CGAccountGidData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGAccountGidData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGAccountGidData* internal_default_instance() {
    return reinterpret_cast<const CGAccountGidData*>(
               &_CGAccountGidData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CGAccountGidData& a, CGAccountGidData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGAccountGidData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGAccountGidData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGAccountGidData* New() const final {
    return new CGAccountGidData();
  }

  CGAccountGidData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGAccountGidData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGAccountGidData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGAccountGidData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGAccountGidData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGAccountGidData";
  }
  protected:
  explicit CGAccountGidData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kGidFieldNumber = 2,
    kGameTypeFieldNumber = 3,
    kBigServerFieldNumber = 4,
    kServerLineFieldNumber = 5,
    kCharacterFieldNumber = 6,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string gid = 2;
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // int32 game_type = 3;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::int32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 big_server = 4;
  void clear_big_server();
  ::PROTOBUF_NAMESPACE_ID::int32 big_server() const;
  void set_big_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_server() const;
  void _internal_set_big_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 server_line = 5;
  void clear_server_line();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_line() const;
  void set_server_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_line() const;
  void _internal_set_server_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 character = 6;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::int32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGAccountGidData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_server_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectAccountGidDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectAccountGidDataRequest) */ {
 public:
  inline SelectAccountGidDataRequest() : SelectAccountGidDataRequest(nullptr) {}
  ~SelectAccountGidDataRequest() override;
  explicit constexpr SelectAccountGidDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectAccountGidDataRequest(const SelectAccountGidDataRequest& from);
  SelectAccountGidDataRequest(SelectAccountGidDataRequest&& from) noexcept
    : SelectAccountGidDataRequest() {
    *this = ::std::move(from);
  }

  inline SelectAccountGidDataRequest& operator=(const SelectAccountGidDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectAccountGidDataRequest& operator=(SelectAccountGidDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectAccountGidDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectAccountGidDataRequest* internal_default_instance() {
    return reinterpret_cast<const SelectAccountGidDataRequest*>(
               &_SelectAccountGidDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SelectAccountGidDataRequest& a, SelectAccountGidDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectAccountGidDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectAccountGidDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectAccountGidDataRequest* New() const final {
    return new SelectAccountGidDataRequest();
  }

  SelectAccountGidDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectAccountGidDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectAccountGidDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectAccountGidDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectAccountGidDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectAccountGidDataRequest";
  }
  protected:
  explicit SelectAccountGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectAccountGidDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectGidDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectGidDataRequest) */ {
 public:
  inline SelectGidDataRequest() : SelectGidDataRequest(nullptr) {}
  ~SelectGidDataRequest() override;
  explicit constexpr SelectGidDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectGidDataRequest(const SelectGidDataRequest& from);
  SelectGidDataRequest(SelectGidDataRequest&& from) noexcept
    : SelectGidDataRequest() {
    *this = ::std::move(from);
  }

  inline SelectGidDataRequest& operator=(const SelectGidDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectGidDataRequest& operator=(SelectGidDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectGidDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectGidDataRequest* internal_default_instance() {
    return reinterpret_cast<const SelectGidDataRequest*>(
               &_SelectGidDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SelectGidDataRequest& a, SelectGidDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectGidDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectGidDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectGidDataRequest* New() const final {
    return new SelectGidDataRequest();
  }

  SelectGidDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectGidDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectGidDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectGidDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectGidDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectGidDataRequest";
  }
  protected:
  explicit SelectGidDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
    kRoleTypeFieldNumber = 2,
  };
  // string gid = 1;
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // int32 role_type = 2;
  void clear_role_type();
  ::PROTOBUF_NAMESPACE_ID::int32 role_type() const;
  void set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_type() const;
  void _internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectGidDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectCharacterDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectCharacterDataRequest) */ {
 public:
  inline SelectCharacterDataRequest() : SelectCharacterDataRequest(nullptr) {}
  ~SelectCharacterDataRequest() override;
  explicit constexpr SelectCharacterDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectCharacterDataRequest(const SelectCharacterDataRequest& from);
  SelectCharacterDataRequest(SelectCharacterDataRequest&& from) noexcept
    : SelectCharacterDataRequest() {
    *this = ::std::move(from);
  }

  inline SelectCharacterDataRequest& operator=(const SelectCharacterDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectCharacterDataRequest& operator=(SelectCharacterDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectCharacterDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectCharacterDataRequest* internal_default_instance() {
    return reinterpret_cast<const SelectCharacterDataRequest*>(
               &_SelectCharacterDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SelectCharacterDataRequest& a, SelectCharacterDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectCharacterDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectCharacterDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectCharacterDataRequest* New() const final {
    return new SelectCharacterDataRequest();
  }

  SelectCharacterDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectCharacterDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectCharacterDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectCharacterDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectCharacterDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectCharacterDataRequest";
  }
  protected:
  explicit SelectCharacterDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharNameFieldNumber = 1,
    kBigLineFieldNumber = 2,
  };
  // string char_name = 1;
  void clear_char_name();
  const std::string& char_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_char_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_char_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_char_name();
  void set_allocated_char_name(std::string* char_name);
  private:
  const std::string& _internal_char_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_name(const std::string& value);
  std::string* _internal_mutable_char_name();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectCharacterDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectCharacterDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectCharacterDataResponse) */ {
 public:
  inline SelectCharacterDataResponse() : SelectCharacterDataResponse(nullptr) {}
  ~SelectCharacterDataResponse() override;
  explicit constexpr SelectCharacterDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectCharacterDataResponse(const SelectCharacterDataResponse& from);
  SelectCharacterDataResponse(SelectCharacterDataResponse&& from) noexcept
    : SelectCharacterDataResponse() {
    *this = ::std::move(from);
  }

  inline SelectCharacterDataResponse& operator=(const SelectCharacterDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectCharacterDataResponse& operator=(SelectCharacterDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectCharacterDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectCharacterDataResponse* internal_default_instance() {
    return reinterpret_cast<const SelectCharacterDataResponse*>(
               &_SelectCharacterDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SelectCharacterDataResponse& a, SelectCharacterDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectCharacterDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectCharacterDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectCharacterDataResponse* New() const final {
    return new SelectCharacterDataResponse();
  }

  SelectCharacterDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectCharacterDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectCharacterDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectCharacterDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectCharacterDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectCharacterDataResponse";
  }
  protected:
  explicit SelectCharacterDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetDataFieldNumber = 4,
    kItemsFieldNumber = 5,
    kCharacterNameFieldNumber = 1,
    kCharacterDataFieldNumber = 3,
    kBigLineFieldNumber = 2,
  };
  // repeated .CGData.CGPetData pet_data = 4;
  int pet_data_size() const;
  private:
  int _internal_pet_data_size() const;
  public:
  void clear_pet_data();
  ::CGData::CGPetData* mutable_pet_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
      mutable_pet_data();
  private:
  const ::CGData::CGPetData& _internal_pet_data(int index) const;
  ::CGData::CGPetData* _internal_add_pet_data();
  public:
  const ::CGData::CGPetData& pet_data(int index) const;
  ::CGData::CGPetData* add_pet_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
      pet_data() const;

  // repeated .CGData.CGItemData items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CGData::CGItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
      mutable_items();
  private:
  const ::CGData::CGItemData& _internal_items(int index) const;
  ::CGData::CGItemData* _internal_add_items();
  public:
  const ::CGData::CGItemData& items(int index) const;
  ::CGData::CGItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
      items() const;

  // string character_name = 1;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .CGData.CGCharacterData character_data = 3;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::CGData::CGCharacterData& character_data() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGCharacterData* release_character_data();
  ::CGData::CGCharacterData* mutable_character_data();
  void set_allocated_character_data(::CGData::CGCharacterData* character_data);
  private:
  const ::CGData::CGCharacterData& _internal_character_data() const;
  ::CGData::CGCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::CGData::CGCharacterData* character_data);
  ::CGData::CGCharacterData* unsafe_arena_release_character_data();

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectCharacterDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData > pet_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  ::CGData::CGCharacterData* character_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectCharacterServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectCharacterServerRequest) */ {
 public:
  inline SelectCharacterServerRequest() : SelectCharacterServerRequest(nullptr) {}
  ~SelectCharacterServerRequest() override;
  explicit constexpr SelectCharacterServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectCharacterServerRequest(const SelectCharacterServerRequest& from);
  SelectCharacterServerRequest(SelectCharacterServerRequest&& from) noexcept
    : SelectCharacterServerRequest() {
    *this = ::std::move(from);
  }

  inline SelectCharacterServerRequest& operator=(const SelectCharacterServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectCharacterServerRequest& operator=(SelectCharacterServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectCharacterServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectCharacterServerRequest* internal_default_instance() {
    return reinterpret_cast<const SelectCharacterServerRequest*>(
               &_SelectCharacterServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SelectCharacterServerRequest& a, SelectCharacterServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectCharacterServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectCharacterServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectCharacterServerRequest* New() const final {
    return new SelectCharacterServerRequest();
  }

  SelectCharacterServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectCharacterServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectCharacterServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectCharacterServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectCharacterServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectCharacterServerRequest";
  }
  protected:
  explicit SelectCharacterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharNameFieldNumber = 1,
    kBigLineFieldNumber = 2,
  };
  // string char_name = 1;
  void clear_char_name();
  const std::string& char_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_char_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_char_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_char_name();
  void set_allocated_char_name(std::string* char_name);
  private:
  const std::string& _internal_char_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_name(const std::string& value);
  std::string* _internal_mutable_char_name();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectCharacterServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectCharacterServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectCharacterServerResponse) */ {
 public:
  inline SelectCharacterServerResponse() : SelectCharacterServerResponse(nullptr) {}
  ~SelectCharacterServerResponse() override;
  explicit constexpr SelectCharacterServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectCharacterServerResponse(const SelectCharacterServerResponse& from);
  SelectCharacterServerResponse(SelectCharacterServerResponse&& from) noexcept
    : SelectCharacterServerResponse() {
    *this = ::std::move(from);
  }

  inline SelectCharacterServerResponse& operator=(const SelectCharacterServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectCharacterServerResponse& operator=(SelectCharacterServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectCharacterServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectCharacterServerResponse* internal_default_instance() {
    return reinterpret_cast<const SelectCharacterServerResponse*>(
               &_SelectCharacterServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SelectCharacterServerResponse& a, SelectCharacterServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectCharacterServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectCharacterServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectCharacterServerResponse* New() const final {
    return new SelectCharacterServerResponse();
  }

  SelectCharacterServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectCharacterServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectCharacterServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectCharacterServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectCharacterServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectCharacterServerResponse";
  }
  protected:
  explicit SelectCharacterServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharNameFieldNumber = 1,
    kIpFieldNumber = 3,
    kBigLineFieldNumber = 2,
    kPortFieldNumber = 4,
    kOnlineFieldNumber = 5,
  };
  // string char_name = 1;
  void clear_char_name();
  const std::string& char_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_char_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_char_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_char_name();
  void set_allocated_char_name(std::string* char_name);
  private:
  const std::string& _internal_char_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_name(const std::string& value);
  std::string* _internal_mutable_char_name();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online = 5;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectCharacterServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectTaskInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectTaskInfoRequest) */ {
 public:
  inline SelectTaskInfoRequest() : SelectTaskInfoRequest(nullptr) {}
  ~SelectTaskInfoRequest() override;
  explicit constexpr SelectTaskInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectTaskInfoRequest(const SelectTaskInfoRequest& from);
  SelectTaskInfoRequest(SelectTaskInfoRequest&& from) noexcept
    : SelectTaskInfoRequest() {
    *this = ::std::move(from);
  }

  inline SelectTaskInfoRequest& operator=(const SelectTaskInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectTaskInfoRequest& operator=(SelectTaskInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectTaskInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectTaskInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SelectTaskInfoRequest*>(
               &_SelectTaskInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SelectTaskInfoRequest& a, SelectTaskInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectTaskInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectTaskInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectTaskInfoRequest* New() const final {
    return new SelectTaskInfoRequest();
  }

  SelectTaskInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectTaskInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectTaskInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectTaskInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectTaskInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectTaskInfoRequest";
  }
  protected:
  explicit SelectTaskInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kBigLineFieldNumber = 2,
    kLineFieldNumber = 3,
  };
  // string task_name = 1;
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line = 3;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectTaskInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectTaskInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectTaskInfoResponse) */ {
 public:
  inline SelectTaskInfoResponse() : SelectTaskInfoResponse(nullptr) {}
  ~SelectTaskInfoResponse() override;
  explicit constexpr SelectTaskInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectTaskInfoResponse(const SelectTaskInfoResponse& from);
  SelectTaskInfoResponse(SelectTaskInfoResponse&& from) noexcept
    : SelectTaskInfoResponse() {
    *this = ::std::move(from);
  }

  inline SelectTaskInfoResponse& operator=(const SelectTaskInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectTaskInfoResponse& operator=(SelectTaskInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectTaskInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectTaskInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SelectTaskInfoResponse*>(
               &_SelectTaskInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SelectTaskInfoResponse& a, SelectTaskInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectTaskInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectTaskInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectTaskInfoResponse* New() const final {
    return new SelectTaskInfoResponse();
  }

  SelectTaskInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectTaskInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectTaskInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectTaskInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectTaskInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectTaskInfoResponse";
  }
  protected:
  explicit SelectTaskInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kBigLineFieldNumber = 2,
    kLineFieldNumber = 3,
    kNpcPosXFieldNumber = 4,
    kNpcPosYFieldNumber = 5,
    kLastTimeFieldNumber = 6,
    kLastMapFirstNumFieldNumber = 7,
    kLastMapFirstWidthFieldNumber = 8,
    kLastMapFirstHeightFieldNumber = 9,
  };
  // string task_name = 1;
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // int32 big_line = 2;
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line = 3;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 npc_pos_x = 4;
  void clear_npc_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 npc_pos_x() const;
  void set_npc_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npc_pos_x() const;
  void _internal_set_npc_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 npc_pos_y = 5;
  void clear_npc_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 npc_pos_y() const;
  void set_npc_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npc_pos_y() const;
  void _internal_set_npc_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_time = 6;
  void clear_last_time();
  ::PROTOBUF_NAMESPACE_ID::int32 last_time() const;
  void set_last_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_time() const;
  void _internal_set_last_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_map_first_num = 7;
  void clear_last_map_first_num();
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_num() const;
  void set_last_map_first_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_map_first_num() const;
  void _internal_set_last_map_first_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_map_first_width = 8;
  void clear_last_map_first_width();
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_width() const;
  void set_last_map_first_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_map_first_width() const;
  void _internal_set_last_map_first_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_map_first_height = 9;
  void clear_last_map_first_height();
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_height() const;
  void set_last_map_first_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_map_first_height() const;
  void _internal_set_last_map_first_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectTaskInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  ::PROTOBUF_NAMESPACE_ID::int32 npc_pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 npc_pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_map_first_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectAccountGidDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectAccountGidDataResponse) */ {
 public:
  inline SelectAccountGidDataResponse() : SelectAccountGidDataResponse(nullptr) {}
  ~SelectAccountGidDataResponse() override;
  explicit constexpr SelectAccountGidDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectAccountGidDataResponse(const SelectAccountGidDataResponse& from);
  SelectAccountGidDataResponse(SelectAccountGidDataResponse&& from) noexcept
    : SelectAccountGidDataResponse() {
    *this = ::std::move(from);
  }

  inline SelectAccountGidDataResponse& operator=(const SelectAccountGidDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectAccountGidDataResponse& operator=(SelectAccountGidDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectAccountGidDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectAccountGidDataResponse* internal_default_instance() {
    return reinterpret_cast<const SelectAccountGidDataResponse*>(
               &_SelectAccountGidDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SelectAccountGidDataResponse& a, SelectAccountGidDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectAccountGidDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectAccountGidDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectAccountGidDataResponse* New() const final {
    return new SelectAccountGidDataResponse();
  }

  SelectAccountGidDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectAccountGidDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectAccountGidDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectAccountGidDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectAccountGidDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectAccountGidDataResponse";
  }
  protected:
  explicit SelectAccountGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidDataFieldNumber = 1,
  };
  // repeated .CGData.SelectGidDataResponse gidData = 1;
  int giddata_size() const;
  private:
  int _internal_giddata_size() const;
  public:
  void clear_giddata();
  ::CGData::SelectGidDataResponse* mutable_giddata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::SelectGidDataResponse >*
      mutable_giddata();
  private:
  const ::CGData::SelectGidDataResponse& _internal_giddata(int index) const;
  ::CGData::SelectGidDataResponse* _internal_add_giddata();
  public:
  const ::CGData::SelectGidDataResponse& giddata(int index) const;
  ::CGData::SelectGidDataResponse* add_giddata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::SelectGidDataResponse >&
      giddata() const;

  // @@protoc_insertion_point(class_scope:CGData.SelectAccountGidDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::SelectGidDataResponse > giddata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class SelectGidDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.SelectGidDataResponse) */ {
 public:
  inline SelectGidDataResponse() : SelectGidDataResponse(nullptr) {}
  ~SelectGidDataResponse() override;
  explicit constexpr SelectGidDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectGidDataResponse(const SelectGidDataResponse& from);
  SelectGidDataResponse(SelectGidDataResponse&& from) noexcept
    : SelectGidDataResponse() {
    *this = ::std::move(from);
  }

  inline SelectGidDataResponse& operator=(const SelectGidDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectGidDataResponse& operator=(SelectGidDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectGidDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectGidDataResponse* internal_default_instance() {
    return reinterpret_cast<const SelectGidDataResponse*>(
               &_SelectGidDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SelectGidDataResponse& a, SelectGidDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectGidDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectGidDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectGidDataResponse* New() const final {
    return new SelectGidDataResponse();
  }

  SelectGidDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectGidDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectGidDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectGidDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectGidDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.SelectGidDataResponse";
  }
  protected:
  explicit SelectGidDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetDataFieldNumber = 5,
    kItemsFieldNumber = 6,
    kGidFieldNumber = 1,
    kCharacterNameFieldNumber = 3,
    kCharacterDataFieldNumber = 4,
    kRoleTypeFieldNumber = 2,
  };
  // repeated .CGData.CGPetData pet_data = 5;
  int pet_data_size() const;
  private:
  int _internal_pet_data_size() const;
  public:
  void clear_pet_data();
  ::CGData::CGPetData* mutable_pet_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
      mutable_pet_data();
  private:
  const ::CGData::CGPetData& _internal_pet_data(int index) const;
  ::CGData::CGPetData* _internal_add_pet_data();
  public:
  const ::CGData::CGPetData& pet_data(int index) const;
  ::CGData::CGPetData* add_pet_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
      pet_data() const;

  // repeated .CGData.CGItemData items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CGData::CGItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
      mutable_items();
  private:
  const ::CGData::CGItemData& _internal_items(int index) const;
  ::CGData::CGItemData* _internal_add_items();
  public:
  const ::CGData::CGItemData& items(int index) const;
  ::CGData::CGItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
      items() const;

  // string gid = 1;
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_MUST_USE_RESULT std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // string character_name = 3;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .CGData.CGCharacterData character_data = 4;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::CGData::CGCharacterData& character_data() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGCharacterData* release_character_data();
  ::CGData::CGCharacterData* mutable_character_data();
  void set_allocated_character_data(::CGData::CGCharacterData* character_data);
  private:
  const ::CGData::CGCharacterData& _internal_character_data() const;
  ::CGData::CGCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::CGData::CGCharacterData* character_data);
  ::CGData::CGCharacterData* unsafe_arena_release_character_data();

  // int32 role_type = 2;
  void clear_role_type();
  ::PROTOBUF_NAMESPACE_ID::int32 role_type() const;
  void set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_type() const;
  void _internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.SelectGidDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData > pet_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
  ::CGData::CGCharacterData* character_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGBaseData) */ {
 public:
  inline CGBaseData() : CGBaseData(nullptr) {}
  ~CGBaseData() override;
  explicit constexpr CGBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGBaseData(const CGBaseData& from);
  CGBaseData(CGBaseData&& from) noexcept
    : CGBaseData() {
    *this = ::std::move(from);
  }

  inline CGBaseData& operator=(const CGBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGBaseData& operator=(CGBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGBaseData* internal_default_instance() {
    return reinterpret_cast<const CGBaseData*>(
               &_CGBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CGBaseData& a, CGBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGBaseData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGBaseData* New() const final {
    return new CGBaseData();
  }

  CGBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGBaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGBaseData";
  }
  protected:
  explicit CGBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHpFieldNumber = 2,
    kMpFieldNumber = 3,
    kMaxhpFieldNumber = 4,
    kMaxmpFieldNumber = 5,
    kLevelFieldNumber = 6,
    kXpFieldNumber = 7,
    kMaxxpFieldNumber = 8,
    kHealthFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mp = 3;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxhp = 4;
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxmp = 5;
  void clear_maxmp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp() const;
  void set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxmp() const;
  void _internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 6;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xp = 7;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xp() const;
  void _internal_set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxxp = 8;
  void clear_maxxp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxxp() const;
  void set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxxp() const;
  void _internal_set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 health = 9;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::int32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxxp_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGSkillBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGSkillBaseData) */ {
 public:
  inline CGSkillBaseData() : CGSkillBaseData(nullptr) {}
  ~CGSkillBaseData() override;
  explicit constexpr CGSkillBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGSkillBaseData(const CGSkillBaseData& from);
  CGSkillBaseData(CGSkillBaseData&& from) noexcept
    : CGSkillBaseData() {
    *this = ::std::move(from);
  }

  inline CGSkillBaseData& operator=(const CGSkillBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGSkillBaseData& operator=(CGSkillBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGSkillBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGSkillBaseData* internal_default_instance() {
    return reinterpret_cast<const CGSkillBaseData*>(
               &_CGSkillBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CGSkillBaseData& a, CGSkillBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGSkillBaseData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGSkillBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGSkillBaseData* New() const final {
    return new CGSkillBaseData();
  }

  CGSkillBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGSkillBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGSkillBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGSkillBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGSkillBaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGSkillBaseData";
  }
  protected:
  explicit CGSkillBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubskillsFieldNumber = 12,
    kNameFieldNumber = 1,
    kInfoFieldNumber = 2,
    kIdFieldNumber = 3,
    kCostFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kIndexFieldNumber = 6,
    kLevelFieldNumber = 7,
    kMaxLevelFieldNumber = 8,
    kAvailableFieldNumber = 9,
    kXpFieldNumber = 10,
    kMaxxpFieldNumber = 11,
  };
  // repeated .CGData.CGSkillBaseData subskills = 12;
  int subskills_size() const;
  private:
  int _internal_subskills_size() const;
  public:
  void clear_subskills();
  ::CGData::CGSkillBaseData* mutable_subskills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
      mutable_subskills();
  private:
  const ::CGData::CGSkillBaseData& _internal_subskills(int index) const;
  ::CGData::CGSkillBaseData* _internal_add_subskills();
  public:
  const ::CGData::CGSkillBaseData& subskills(int index) const;
  ::CGData::CGSkillBaseData* add_subskills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
      subskills() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string info = 2;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 4;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 5;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 6;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxLevel = 8;
  void clear_maxlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 maxlevel() const;
  void set_maxlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxlevel() const;
  void _internal_set_maxlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool available = 9;
  void clear_available();
  bool available() const;
  void set_available(bool value);
  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);
  public:

  // int32 xp = 10;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xp() const;
  void _internal_set_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxxp = 11;
  void clear_maxxp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxxp() const;
  void set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxxp() const;
  void _internal_set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGSkillBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData > subskills_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxlevel_;
  bool available_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxxp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGAttrBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGAttrBaseData) */ {
 public:
  inline CGAttrBaseData() : CGAttrBaseData(nullptr) {}
  ~CGAttrBaseData() override;
  explicit constexpr CGAttrBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGAttrBaseData(const CGAttrBaseData& from);
  CGAttrBaseData(CGAttrBaseData&& from) noexcept
    : CGAttrBaseData() {
    *this = ::std::move(from);
  }

  inline CGAttrBaseData& operator=(const CGAttrBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGAttrBaseData& operator=(CGAttrBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGAttrBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGAttrBaseData* internal_default_instance() {
    return reinterpret_cast<const CGAttrBaseData*>(
               &_CGAttrBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CGAttrBaseData& a, CGAttrBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGAttrBaseData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGAttrBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGAttrBaseData* New() const final {
    return new CGAttrBaseData();
  }

  CGAttrBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGAttrBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGAttrBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGAttrBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGAttrBaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGAttrBaseData";
  }
  protected:
  explicit CGAttrBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsRemainFieldNumber = 1,
    kPointsEnduranceFieldNumber = 2,
    kPointsStrengthFieldNumber = 3,
    kPointsDefenseFieldNumber = 4,
    kPointsAgilityFieldNumber = 5,
    kPointsMagicalFieldNumber = 6,
    kValueAttackFieldNumber = 7,
    kValueDefensiveFieldNumber = 8,
    kValueAgilityFieldNumber = 9,
    kValueSpiritFieldNumber = 10,
    kValueRecoveryFieldNumber = 11,
    kResistPoisonFieldNumber = 12,
    kResistSleepFieldNumber = 13,
    kResistMedusaFieldNumber = 14,
    kResistDrunkFieldNumber = 15,
    kResistChaosFieldNumber = 16,
    kResistForgetFieldNumber = 17,
    kFixCriticalFieldNumber = 18,
    kFixStrikebackFieldNumber = 19,
    kFixAccurancyFieldNumber = 20,
    kFixDodgeFieldNumber = 21,
    kElementEarthFieldNumber = 22,
    kElementWaterFieldNumber = 23,
    kElementFireFieldNumber = 24,
    kElementWindFieldNumber = 25,
  };
  // int32 points_remain = 1;
  void clear_points_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 points_remain() const;
  void set_points_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_remain() const;
  void _internal_set_points_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_endurance = 2;
  void clear_points_endurance();
  ::PROTOBUF_NAMESPACE_ID::int32 points_endurance() const;
  void set_points_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_endurance() const;
  void _internal_set_points_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_strength = 3;
  void clear_points_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 points_strength() const;
  void set_points_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_strength() const;
  void _internal_set_points_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_defense = 4;
  void clear_points_defense();
  ::PROTOBUF_NAMESPACE_ID::int32 points_defense() const;
  void set_points_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_defense() const;
  void _internal_set_points_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_agility = 5;
  void clear_points_agility();
  ::PROTOBUF_NAMESPACE_ID::int32 points_agility() const;
  void set_points_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_agility() const;
  void _internal_set_points_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 points_magical = 6;
  void clear_points_magical();
  ::PROTOBUF_NAMESPACE_ID::int32 points_magical() const;
  void set_points_magical(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points_magical() const;
  void _internal_set_points_magical(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_attack = 7;
  void clear_value_attack();
  ::PROTOBUF_NAMESPACE_ID::int32 value_attack() const;
  void set_value_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_attack() const;
  void _internal_set_value_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_defensive = 8;
  void clear_value_defensive();
  ::PROTOBUF_NAMESPACE_ID::int32 value_defensive() const;
  void set_value_defensive(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_defensive() const;
  void _internal_set_value_defensive(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_agility = 9;
  void clear_value_agility();
  ::PROTOBUF_NAMESPACE_ID::int32 value_agility() const;
  void set_value_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_agility() const;
  void _internal_set_value_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_spirit = 10;
  void clear_value_spirit();
  ::PROTOBUF_NAMESPACE_ID::int32 value_spirit() const;
  void set_value_spirit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_spirit() const;
  void _internal_set_value_spirit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_recovery = 11;
  void clear_value_recovery();
  ::PROTOBUF_NAMESPACE_ID::int32 value_recovery() const;
  void set_value_recovery(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_recovery() const;
  void _internal_set_value_recovery(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_poison = 12;
  void clear_resist_poison();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_poison() const;
  void set_resist_poison(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_poison() const;
  void _internal_set_resist_poison(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_sleep = 13;
  void clear_resist_sleep();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_sleep() const;
  void set_resist_sleep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_sleep() const;
  void _internal_set_resist_sleep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_medusa = 14;
  void clear_resist_medusa();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_medusa() const;
  void set_resist_medusa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_medusa() const;
  void _internal_set_resist_medusa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_drunk = 15;
  void clear_resist_drunk();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_drunk() const;
  void set_resist_drunk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_drunk() const;
  void _internal_set_resist_drunk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_chaos = 16;
  void clear_resist_chaos();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_chaos() const;
  void set_resist_chaos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_chaos() const;
  void _internal_set_resist_chaos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resist_forget = 17;
  void clear_resist_forget();
  ::PROTOBUF_NAMESPACE_ID::int32 resist_forget() const;
  void set_resist_forget(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resist_forget() const;
  void _internal_set_resist_forget(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fix_critical = 18;
  void clear_fix_critical();
  ::PROTOBUF_NAMESPACE_ID::int32 fix_critical() const;
  void set_fix_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fix_critical() const;
  void _internal_set_fix_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fix_strikeback = 19;
  void clear_fix_strikeback();
  ::PROTOBUF_NAMESPACE_ID::int32 fix_strikeback() const;
  void set_fix_strikeback(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fix_strikeback() const;
  void _internal_set_fix_strikeback(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fix_accurancy = 20;
  void clear_fix_accurancy();
  ::PROTOBUF_NAMESPACE_ID::int32 fix_accurancy() const;
  void set_fix_accurancy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fix_accurancy() const;
  void _internal_set_fix_accurancy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fix_dodge = 21;
  void clear_fix_dodge();
  ::PROTOBUF_NAMESPACE_ID::int32 fix_dodge() const;
  void set_fix_dodge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fix_dodge() const;
  void _internal_set_fix_dodge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_earth = 22;
  void clear_element_earth();
  ::PROTOBUF_NAMESPACE_ID::int32 element_earth() const;
  void set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_earth() const;
  void _internal_set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_water = 23;
  void clear_element_water();
  ::PROTOBUF_NAMESPACE_ID::int32 element_water() const;
  void set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_water() const;
  void _internal_set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_fire = 24;
  void clear_element_fire();
  ::PROTOBUF_NAMESPACE_ID::int32 element_fire() const;
  void set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_fire() const;
  void _internal_set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_wind = 25;
  void clear_element_wind();
  ::PROTOBUF_NAMESPACE_ID::int32 element_wind() const;
  void set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_wind() const;
  void _internal_set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGAttrBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_remain_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_endurance_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_strength_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_defense_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_agility_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_magical_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_attack_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_defensive_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_agility_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_spirit_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_recovery_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_poison_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_sleep_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_medusa_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_drunk_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_chaos_;
  ::PROTOBUF_NAMESPACE_ID::int32 resist_forget_;
  ::PROTOBUF_NAMESPACE_ID::int32 fix_critical_;
  ::PROTOBUF_NAMESPACE_ID::int32 fix_strikeback_;
  ::PROTOBUF_NAMESPACE_ID::int32 fix_accurancy_;
  ::PROTOBUF_NAMESPACE_ID::int32 fix_dodge_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_earth_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_water_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_fire_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_wind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGCharacterPersDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGCharacterPersDesc) */ {
 public:
  inline CGCharacterPersDesc() : CGCharacterPersDesc(nullptr) {}
  ~CGCharacterPersDesc() override;
  explicit constexpr CGCharacterPersDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCharacterPersDesc(const CGCharacterPersDesc& from);
  CGCharacterPersDesc(CGCharacterPersDesc&& from) noexcept
    : CGCharacterPersDesc() {
    *this = ::std::move(from);
  }

  inline CGCharacterPersDesc& operator=(const CGCharacterPersDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCharacterPersDesc& operator=(CGCharacterPersDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCharacterPersDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCharacterPersDesc* internal_default_instance() {
    return reinterpret_cast<const CGCharacterPersDesc*>(
               &_CGCharacterPersDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CGCharacterPersDesc& a, CGCharacterPersDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCharacterPersDesc* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCharacterPersDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCharacterPersDesc* New() const final {
    return new CGCharacterPersDesc();
  }

  CGCharacterPersDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCharacterPersDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCharacterPersDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGCharacterPersDesc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCharacterPersDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGCharacterPersDesc";
  }
  protected:
  explicit CGCharacterPersDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellStringFieldNumber = 3,
    kBuyStringFieldNumber = 5,
    kWantStringFieldNumber = 7,
    kDescStringFieldNumber = 8,
    kChangeBitsFieldNumber = 1,
    kSellIconFieldNumber = 2,
    kBuyIconFieldNumber = 4,
    kWantIconFieldNumber = 6,
  };
  // string sellString = 3;
  void clear_sellstring();
  const std::string& sellstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sellstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sellstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_sellstring();
  void set_allocated_sellstring(std::string* sellstring);
  private:
  const std::string& _internal_sellstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sellstring(const std::string& value);
  std::string* _internal_mutable_sellstring();
  public:

  // string buyString = 5;
  void clear_buystring();
  const std::string& buystring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buystring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buystring();
  PROTOBUF_MUST_USE_RESULT std::string* release_buystring();
  void set_allocated_buystring(std::string* buystring);
  private:
  const std::string& _internal_buystring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buystring(const std::string& value);
  std::string* _internal_mutable_buystring();
  public:

  // string wantString = 7;
  void clear_wantstring();
  const std::string& wantstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wantstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wantstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_wantstring();
  void set_allocated_wantstring(std::string* wantstring);
  private:
  const std::string& _internal_wantstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wantstring(const std::string& value);
  std::string* _internal_mutable_wantstring();
  public:

  // string descString = 8;
  void clear_descstring();
  const std::string& descstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_descstring();
  void set_allocated_descstring(std::string* descstring);
  private:
  const std::string& _internal_descstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descstring(const std::string& value);
  std::string* _internal_mutable_descstring();
  public:

  // int32 changeBits = 1;
  void clear_changebits();
  ::PROTOBUF_NAMESPACE_ID::int32 changebits() const;
  void set_changebits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changebits() const;
  void _internal_set_changebits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellIcon = 2;
  void clear_sellicon();
  ::PROTOBUF_NAMESPACE_ID::int32 sellicon() const;
  void set_sellicon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sellicon() const;
  void _internal_set_sellicon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buyIcon = 4;
  void clear_buyicon();
  ::PROTOBUF_NAMESPACE_ID::int32 buyicon() const;
  void set_buyicon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buyicon() const;
  void _internal_set_buyicon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wantIcon = 6;
  void clear_wanticon();
  ::PROTOBUF_NAMESPACE_ID::int32 wanticon() const;
  void set_wanticon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wanticon() const;
  void _internal_set_wanticon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGCharacterPersDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellstring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buystring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wantstring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 changebits_;
  ::PROTOBUF_NAMESPACE_ID::int32 sellicon_;
  ::PROTOBUF_NAMESPACE_ID::int32 buyicon_;
  ::PROTOBUF_NAMESPACE_ID::int32 wanticon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGCharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGCharacterData) */ {
 public:
  inline CGCharacterData() : CGCharacterData(nullptr) {}
  ~CGCharacterData() override;
  explicit constexpr CGCharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCharacterData(const CGCharacterData& from);
  CGCharacterData(CGCharacterData&& from) noexcept
    : CGCharacterData() {
    *this = ::std::move(from);
  }

  inline CGCharacterData& operator=(const CGCharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCharacterData& operator=(CGCharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCharacterData* internal_default_instance() {
    return reinterpret_cast<const CGCharacterData*>(
               &_CGCharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CGCharacterData& a, CGCharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCharacterData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGCharacterData* New() const final {
    return new CGCharacterData();
  }

  CGCharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGCharacterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCharacterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGCharacterData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCharacterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGCharacterData";
  }
  protected:
  explicit CGCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitlesFieldNumber = 17,
    kSkillFieldNumber = 28,
    kJobFieldNumber = 16,
    kMapNameFieldNumber = 24,
    kNickFieldNumber = 29,
    kBaseDataFieldNumber = 1,
    kDetailFieldNumber = 27,
    kPersDescFieldNumber = 30,
    kSoulsFieldNumber = 2,
    kLevelFieldNumber = 3,
    kGoldFieldNumber = 4,
    kImageIdFieldNumber = 5,
    kScoreFieldNumber = 6,
    kSkillslotsFieldNumber = 7,
    kUseTitleFieldNumber = 8,
    kAvatarIdFieldNumber = 9,
    kUnitidFieldNumber = 10,
    kPetidFieldNumber = 11,
    kDirectionFieldNumber = 13,
    kPetridingFieldNumber = 12,
    kUsingpunchclockFieldNumber = 15,
    kPunchclockFieldNumber = 14,
    kManuEnduranceFieldNumber = 18,
    kManuSkillfulFieldNumber = 19,
    kManuIntelligenceFieldNumber = 20,
    kValueCharismaFieldNumber = 21,
    kXFieldNumber = 22,
    kYFieldNumber = 23,
    kMapNumberFieldNumber = 25,
    kServerLineFieldNumber = 26,
    kBattlePositionFieldNumber = 31,
    kBankGoldFieldNumber = 32,
    kBigLineFieldNumber = 33,
  };
  // repeated string titles = 17;
  int titles_size() const;
  private:
  int _internal_titles_size() const;
  public:
  void clear_titles();
  const std::string& titles(int index) const;
  std::string* mutable_titles(int index);
  void set_titles(int index, const std::string& value);
  void set_titles(int index, std::string&& value);
  void set_titles(int index, const char* value);
  void set_titles(int index, const char* value, size_t size);
  std::string* add_titles();
  void add_titles(const std::string& value);
  void add_titles(std::string&& value);
  void add_titles(const char* value);
  void add_titles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& titles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_titles();
  private:
  const std::string& _internal_titles(int index) const;
  std::string* _internal_add_titles();
  public:

  // repeated .CGData.CGSkillBaseData skill = 28;
  int skill_size() const;
  private:
  int _internal_skill_size() const;
  public:
  void clear_skill();
  ::CGData::CGSkillBaseData* mutable_skill(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
      mutable_skill();
  private:
  const ::CGData::CGSkillBaseData& _internal_skill(int index) const;
  ::CGData::CGSkillBaseData* _internal_add_skill();
  public:
  const ::CGData::CGSkillBaseData& skill(int index) const;
  ::CGData::CGSkillBaseData* add_skill();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
      skill() const;

  // string job = 16;
  void clear_job();
  const std::string& job() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job();
  PROTOBUF_MUST_USE_RESULT std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // string map_name = 24;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // string nick = 29;
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_MUST_USE_RESULT std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // .CGData.CGBaseData base_data = 1;
  bool has_base_data() const;
  private:
  bool _internal_has_base_data() const;
  public:
  void clear_base_data();
  const ::CGData::CGBaseData& base_data() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGBaseData* release_base_data();
  ::CGData::CGBaseData* mutable_base_data();
  void set_allocated_base_data(::CGData::CGBaseData* base_data);
  private:
  const ::CGData::CGBaseData& _internal_base_data() const;
  ::CGData::CGBaseData* _internal_mutable_base_data();
  public:
  void unsafe_arena_set_allocated_base_data(
      ::CGData::CGBaseData* base_data);
  ::CGData::CGBaseData* unsafe_arena_release_base_data();

  // .CGData.CGAttrBaseData detail = 27;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::CGData::CGAttrBaseData& detail() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGAttrBaseData* release_detail();
  ::CGData::CGAttrBaseData* mutable_detail();
  void set_allocated_detail(::CGData::CGAttrBaseData* detail);
  private:
  const ::CGData::CGAttrBaseData& _internal_detail() const;
  ::CGData::CGAttrBaseData* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::CGData::CGAttrBaseData* detail);
  ::CGData::CGAttrBaseData* unsafe_arena_release_detail();

  // .CGData.CGCharacterPersDesc pers_desc = 30;
  bool has_pers_desc() const;
  private:
  bool _internal_has_pers_desc() const;
  public:
  void clear_pers_desc();
  const ::CGData::CGCharacterPersDesc& pers_desc() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGCharacterPersDesc* release_pers_desc();
  ::CGData::CGCharacterPersDesc* mutable_pers_desc();
  void set_allocated_pers_desc(::CGData::CGCharacterPersDesc* pers_desc);
  private:
  const ::CGData::CGCharacterPersDesc& _internal_pers_desc() const;
  ::CGData::CGCharacterPersDesc* _internal_mutable_pers_desc();
  public:
  void unsafe_arena_set_allocated_pers_desc(
      ::CGData::CGCharacterPersDesc* pers_desc);
  ::CGData::CGCharacterPersDesc* unsafe_arena_release_pers_desc();

  // int32 souls = 2;
  void clear_souls();
  ::PROTOBUF_NAMESPACE_ID::int32 souls() const;
  void set_souls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_souls() const;
  void _internal_set_souls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gold = 4;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_id = 5;
  void clear_image_id();
  ::PROTOBUF_NAMESPACE_ID::int32 image_id() const;
  void set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_id() const;
  void _internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 6;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 skillslots = 7;
  void clear_skillslots();
  ::PROTOBUF_NAMESPACE_ID::int32 skillslots() const;
  void set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skillslots() const;
  void _internal_set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 use_title = 8;
  void clear_use_title();
  ::PROTOBUF_NAMESPACE_ID::int32 use_title() const;
  void set_use_title(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_title() const;
  void _internal_set_use_title(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar_id = 9;
  void clear_avatar_id();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_id() const;
  void set_avatar_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar_id() const;
  void _internal_set_avatar_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unitid = 10;
  void clear_unitid();
  ::PROTOBUF_NAMESPACE_ID::int32 unitid() const;
  void set_unitid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unitid() const;
  void _internal_set_unitid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 petid = 11;
  void clear_petid();
  ::PROTOBUF_NAMESPACE_ID::int32 petid() const;
  void set_petid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_petid() const;
  void _internal_set_petid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 direction = 13;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool petriding = 12;
  void clear_petriding();
  bool petriding() const;
  void set_petriding(bool value);
  private:
  bool _internal_petriding() const;
  void _internal_set_petriding(bool value);
  public:

  // bool usingpunchclock = 15;
  void clear_usingpunchclock();
  bool usingpunchclock() const;
  void set_usingpunchclock(bool value);
  private:
  bool _internal_usingpunchclock() const;
  void _internal_set_usingpunchclock(bool value);
  public:

  // int32 punchclock = 14;
  void clear_punchclock();
  ::PROTOBUF_NAMESPACE_ID::int32 punchclock() const;
  void set_punchclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_punchclock() const;
  void _internal_set_punchclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 manu_endurance = 18;
  void clear_manu_endurance();
  ::PROTOBUF_NAMESPACE_ID::int32 manu_endurance() const;
  void set_manu_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manu_endurance() const;
  void _internal_set_manu_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 manu_skillful = 19;
  void clear_manu_skillful();
  ::PROTOBUF_NAMESPACE_ID::int32 manu_skillful() const;
  void set_manu_skillful(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manu_skillful() const;
  void _internal_set_manu_skillful(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 manu_intelligence = 20;
  void clear_manu_intelligence();
  ::PROTOBUF_NAMESPACE_ID::int32 manu_intelligence() const;
  void set_manu_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manu_intelligence() const;
  void _internal_set_manu_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_charisma = 21;
  void clear_value_charisma();
  ::PROTOBUF_NAMESPACE_ID::int32 value_charisma() const;
  void set_value_charisma(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_charisma() const;
  void _internal_set_value_charisma(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 22;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 23;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_number = 25;
  void clear_map_number();
  ::PROTOBUF_NAMESPACE_ID::int32 map_number() const;
  void set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_number() const;
  void _internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_line = 26;
  void clear_server_line();
  ::PROTOBUF_NAMESPACE_ID::int32 server_line() const;
  void set_server_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_line() const;
  void _internal_set_server_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 battle_position = 31;
  void clear_battle_position();
  ::PROTOBUF_NAMESPACE_ID::int32 battle_position() const;
  void set_battle_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battle_position() const;
  void _internal_set_battle_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bank_gold = 32;
  void clear_bank_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 bank_gold() const;
  void set_bank_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bank_gold() const;
  void _internal_set_bank_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 big_line = 33;
  bool has_big_line() const;
  private:
  bool _internal_has_big_line() const;
  public:
  void clear_big_line();
  ::PROTOBUF_NAMESPACE_ID::int32 big_line() const;
  void set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_big_line() const;
  void _internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGCharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> titles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData > skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::CGData::CGBaseData* base_data_;
  ::CGData::CGAttrBaseData* detail_;
  ::CGData::CGCharacterPersDesc* pers_desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 souls_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillslots_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_title_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 unitid_;
  ::PROTOBUF_NAMESPACE_ID::int32 petid_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  bool petriding_;
  bool usingpunchclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 punchclock_;
  ::PROTOBUF_NAMESPACE_ID::int32 manu_endurance_;
  ::PROTOBUF_NAMESPACE_ID::int32 manu_skillful_;
  ::PROTOBUF_NAMESPACE_ID::int32 manu_intelligence_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_charisma_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_line_;
  ::PROTOBUF_NAMESPACE_ID::int32 battle_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 big_line_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGPetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGPetData) */ {
 public:
  inline CGPetData() : CGPetData(nullptr) {}
  ~CGPetData() override;
  explicit constexpr CGPetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGPetData(const CGPetData& from);
  CGPetData(CGPetData&& from) noexcept
    : CGPetData() {
    *this = ::std::move(from);
  }

  inline CGPetData& operator=(const CGPetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGPetData& operator=(CGPetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGPetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGPetData* internal_default_instance() {
    return reinterpret_cast<const CGPetData*>(
               &_CGPetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CGPetData& a, CGPetData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGPetData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGPetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGPetData* New() const final {
    return new CGPetData();
  }

  CGPetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGPetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGPetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGPetData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGPetData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGPetData";
  }
  protected:
  explicit CGPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillFieldNumber = 11,
    kRealNameFieldNumber = 13,
    kBaseDataFieldNumber = 1,
    kDetailFieldNumber = 12,
    kIndexFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kBattleFlagsFieldNumber = 4,
    kLoyalityFieldNumber = 5,
    kDefaultBattleFieldNumber = 6,
    kStateFieldNumber = 7,
    kGradeFieldNumber = 8,
    kLossMinGradeFieldNumber = 9,
    kLossMaxGradeFieldNumber = 10,
    kRaceFieldNumber = 14,
    kSkillslotsFieldNumber = 15,
  };
  // repeated .CGData.CGSkillBaseData skill = 11;
  int skill_size() const;
  private:
  int _internal_skill_size() const;
  public:
  void clear_skill();
  ::CGData::CGSkillBaseData* mutable_skill(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
      mutable_skill();
  private:
  const ::CGData::CGSkillBaseData& _internal_skill(int index) const;
  ::CGData::CGSkillBaseData* _internal_add_skill();
  public:
  const ::CGData::CGSkillBaseData& skill(int index) const;
  ::CGData::CGSkillBaseData* add_skill();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
      skill() const;

  // string real_name = 13;
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // .CGData.CGBaseData base_data = 1;
  bool has_base_data() const;
  private:
  bool _internal_has_base_data() const;
  public:
  void clear_base_data();
  const ::CGData::CGBaseData& base_data() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGBaseData* release_base_data();
  ::CGData::CGBaseData* mutable_base_data();
  void set_allocated_base_data(::CGData::CGBaseData* base_data);
  private:
  const ::CGData::CGBaseData& _internal_base_data() const;
  ::CGData::CGBaseData* _internal_mutable_base_data();
  public:
  void unsafe_arena_set_allocated_base_data(
      ::CGData::CGBaseData* base_data);
  ::CGData::CGBaseData* unsafe_arena_release_base_data();

  // .CGData.CGAttrBaseData detail = 12;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::CGData::CGAttrBaseData& detail() const;
  PROTOBUF_MUST_USE_RESULT ::CGData::CGAttrBaseData* release_detail();
  ::CGData::CGAttrBaseData* mutable_detail();
  void set_allocated_detail(::CGData::CGAttrBaseData* detail);
  private:
  const ::CGData::CGAttrBaseData& _internal_detail() const;
  ::CGData::CGAttrBaseData* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::CGData::CGAttrBaseData* detail);
  ::CGData::CGAttrBaseData* unsafe_arena_release_detail();

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 battle_flags = 4;
  void clear_battle_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 battle_flags() const;
  void set_battle_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battle_flags() const;
  void _internal_set_battle_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 loyality = 5;
  void clear_loyality();
  ::PROTOBUF_NAMESPACE_ID::int32 loyality() const;
  void set_loyality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loyality() const;
  void _internal_set_loyality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool default_battle = 6;
  void clear_default_battle();
  bool default_battle() const;
  void set_default_battle(bool value);
  private:
  bool _internal_default_battle() const;
  void _internal_set_default_battle(bool value);
  public:

  // int32 state = 7;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grade = 8;
  void clear_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 grade() const;
  void set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grade() const;
  void _internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lossMinGrade = 9;
  void clear_lossmingrade();
  ::PROTOBUF_NAMESPACE_ID::int32 lossmingrade() const;
  void set_lossmingrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lossmingrade() const;
  void _internal_set_lossmingrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lossMaxGrade = 10;
  void clear_lossmaxgrade();
  ::PROTOBUF_NAMESPACE_ID::int32 lossmaxgrade() const;
  void set_lossmaxgrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lossmaxgrade() const;
  void _internal_set_lossmaxgrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 race = 14;
  void clear_race();
  ::PROTOBUF_NAMESPACE_ID::int32 race() const;
  void set_race(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_race() const;
  void _internal_set_race(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 skillslots = 15;
  void clear_skillslots();
  ::PROTOBUF_NAMESPACE_ID::int32 skillslots() const;
  void set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skillslots() const;
  void _internal_set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGPetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData > skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
  ::CGData::CGBaseData* base_data_;
  ::CGData::CGAttrBaseData* detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 battle_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 loyality_;
  bool default_battle_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 grade_;
  ::PROTOBUF_NAMESPACE_ID::int32 lossmingrade_;
  ::PROTOBUF_NAMESPACE_ID::int32 lossmaxgrade_;
  ::PROTOBUF_NAMESPACE_ID::int32 race_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillslots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGItemData) */ {
 public:
  inline CGItemData() : CGItemData(nullptr) {}
  ~CGItemData() override;
  explicit constexpr CGItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGItemData(const CGItemData& from);
  CGItemData(CGItemData&& from) noexcept
    : CGItemData() {
    *this = ::std::move(from);
  }

  inline CGItemData& operator=(const CGItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGItemData& operator=(CGItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGItemData* internal_default_instance() {
    return reinterpret_cast<const CGItemData*>(
               &_CGItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CGItemData& a, CGItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGItemData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGItemData* New() const final {
    return new CGItemData();
  }

  CGItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGItemData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGItemData";
  }
  protected:
  explicit CGItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAttrFieldNumber = 6,
    kInfoFieldNumber = 7,
    kImageIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kLevelFieldNumber = 5,
    kPosFieldNumber = 8,
    kAssessedFieldNumber = 9,
    kCountFieldNumber = 10,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string attr = 6;
  void clear_attr();
  const std::string& attr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr();
  PROTOBUF_MUST_USE_RESULT std::string* release_attr();
  void set_allocated_attr(std::string* attr);
  private:
  const std::string& _internal_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr(const std::string& value);
  std::string* _internal_mutable_attr();
  public:

  // string info = 7;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_MUST_USE_RESULT std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 image_id = 1;
  void clear_image_id();
  ::PROTOBUF_NAMESPACE_ID::int32 image_id() const;
  void set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_id() const;
  void _internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pos = 8;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool assessed = 9;
  void clear_assessed();
  bool assessed() const;
  void set_assessed(bool value);
  private:
  bool _internal_assessed() const;
  void _internal_set_assessed(bool value);
  public:

  // int32 count = 10;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  bool assessed_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGStoreMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGStoreMapRequest) */ {
 public:
  inline CGStoreMapRequest() : CGStoreMapRequest(nullptr) {}
  ~CGStoreMapRequest() override;
  explicit constexpr CGStoreMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGStoreMapRequest(const CGStoreMapRequest& from);
  CGStoreMapRequest(CGStoreMapRequest&& from) noexcept
    : CGStoreMapRequest() {
    *this = ::std::move(from);
  }

  inline CGStoreMapRequest& operator=(const CGStoreMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGStoreMapRequest& operator=(CGStoreMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGStoreMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGStoreMapRequest* internal_default_instance() {
    return reinterpret_cast<const CGStoreMapRequest*>(
               &_CGStoreMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CGStoreMapRequest& a, CGStoreMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGStoreMapRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGStoreMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGStoreMapRequest* New() const final {
    return new CGStoreMapRequest();
  }

  CGStoreMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGStoreMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGStoreMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGStoreMapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGStoreMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGStoreMapRequest";
  }
  protected:
  explicit CGStoreMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 2,
    kMapNumberFieldNumber = 1,
  };
  // string map_name = 2;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // int32 map_number = 1;
  void clear_map_number();
  ::PROTOBUF_NAMESPACE_ID::int32 map_number() const;
  void set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_number() const;
  void _internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGStoreMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGStoreMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGStoreMapResponse) */ {
 public:
  inline CGStoreMapResponse() : CGStoreMapResponse(nullptr) {}
  ~CGStoreMapResponse() override;
  explicit constexpr CGStoreMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGStoreMapResponse(const CGStoreMapResponse& from);
  CGStoreMapResponse(CGStoreMapResponse&& from) noexcept
    : CGStoreMapResponse() {
    *this = ::std::move(from);
  }

  inline CGStoreMapResponse& operator=(const CGStoreMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGStoreMapResponse& operator=(CGStoreMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGStoreMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGStoreMapResponse* internal_default_instance() {
    return reinterpret_cast<const CGStoreMapResponse*>(
               &_CGStoreMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CGStoreMapResponse& a, CGStoreMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGStoreMapResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGStoreMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGStoreMapResponse* New() const final {
    return new CGStoreMapResponse();
  }

  CGStoreMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGStoreMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGStoreMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGStoreMapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGStoreMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGStoreMapResponse";
  }
  protected:
  explicit CGStoreMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.CGStoreMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGMapDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGMapDataRequest) */ {
 public:
  inline CGMapDataRequest() : CGMapDataRequest(nullptr) {}
  ~CGMapDataRequest() override;
  explicit constexpr CGMapDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGMapDataRequest(const CGMapDataRequest& from);
  CGMapDataRequest(CGMapDataRequest&& from) noexcept
    : CGMapDataRequest() {
    *this = ::std::move(from);
  }

  inline CGMapDataRequest& operator=(const CGMapDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGMapDataRequest& operator=(CGMapDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGMapDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGMapDataRequest* internal_default_instance() {
    return reinterpret_cast<const CGMapDataRequest*>(
               &_CGMapDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CGMapDataRequest& a, CGMapDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGMapDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGMapDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGMapDataRequest* New() const final {
    return new CGMapDataRequest();
  }

  CGMapDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGMapDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGMapDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGMapDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGMapDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGMapDataRequest";
  }
  protected:
  explicit CGMapDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.CGMapDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGMapDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGMapDataResponse) */ {
 public:
  inline CGMapDataResponse() : CGMapDataResponse(nullptr) {}
  ~CGMapDataResponse() override;
  explicit constexpr CGMapDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGMapDataResponse(const CGMapDataResponse& from);
  CGMapDataResponse(CGMapDataResponse&& from) noexcept
    : CGMapDataResponse() {
    *this = ::std::move(from);
  }

  inline CGMapDataResponse& operator=(const CGMapDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGMapDataResponse& operator=(CGMapDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGMapDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGMapDataResponse* internal_default_instance() {
    return reinterpret_cast<const CGMapDataResponse*>(
               &_CGMapDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CGMapDataResponse& a, CGMapDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGMapDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGMapDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGMapDataResponse* New() const final {
    return new CGMapDataResponse();
  }

  CGMapDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGMapDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGMapDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGMapDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGMapDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGMapDataResponse";
  }
  protected:
  explicit CGMapDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 1,
  };
  // repeated .CGData.CGMapData maps = 1;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  ::CGData::CGMapData* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGMapData >*
      mutable_maps();
  private:
  const ::CGData::CGMapData& _internal_maps(int index) const;
  ::CGData::CGMapData* _internal_add_maps();
  public:
  const ::CGData::CGMapData& maps(int index) const;
  ::CGData::CGMapData* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGMapData >&
      maps() const;

  // @@protoc_insertion_point(class_scope:CGData.CGMapDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGMapData > maps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGMapData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGMapData) */ {
 public:
  inline CGMapData() : CGMapData(nullptr) {}
  ~CGMapData() override;
  explicit constexpr CGMapData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGMapData(const CGMapData& from);
  CGMapData(CGMapData&& from) noexcept
    : CGMapData() {
    *this = ::std::move(from);
  }

  inline CGMapData& operator=(const CGMapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGMapData& operator=(CGMapData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGMapData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGMapData* internal_default_instance() {
    return reinterpret_cast<const CGMapData*>(
               &_CGMapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CGMapData& a, CGMapData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGMapData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGMapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGMapData* New() const final {
    return new CGMapData();
  }

  CGMapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGMapData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGMapData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGMapData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGMapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGMapData";
  }
  protected:
  explicit CGMapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kIdFieldNumber = 1,
    kMapNumberFieldNumber = 2,
    kOftenFieldNumber = 5,
  };
  // string map_name = 3;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // string desc = 4;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 map_number = 2;
  void clear_map_number();
  ::PROTOBUF_NAMESPACE_ID::int32 map_number() const;
  void set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_number() const;
  void _internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 often = 5;
  void clear_often();
  ::PROTOBUF_NAMESPACE_ID::int32 often() const;
  void set_often(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_often() const;
  void _internal_set_often(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGMapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 often_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGPetGradeCalcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGPetGradeCalcRequest) */ {
 public:
  inline CGPetGradeCalcRequest() : CGPetGradeCalcRequest(nullptr) {}
  ~CGPetGradeCalcRequest() override;
  explicit constexpr CGPetGradeCalcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGPetGradeCalcRequest(const CGPetGradeCalcRequest& from);
  CGPetGradeCalcRequest(CGPetGradeCalcRequest&& from) noexcept
    : CGPetGradeCalcRequest() {
    *this = ::std::move(from);
  }

  inline CGPetGradeCalcRequest& operator=(const CGPetGradeCalcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGPetGradeCalcRequest& operator=(CGPetGradeCalcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGPetGradeCalcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGPetGradeCalcRequest* internal_default_instance() {
    return reinterpret_cast<const CGPetGradeCalcRequest*>(
               &_CGPetGradeCalcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CGPetGradeCalcRequest& a, CGPetGradeCalcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGPetGradeCalcRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGPetGradeCalcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGPetGradeCalcRequest* New() const final {
    return new CGPetGradeCalcRequest();
  }

  CGPetGradeCalcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGPetGradeCalcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGPetGradeCalcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGPetGradeCalcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGPetGradeCalcRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGPetGradeCalcRequest";
  }
  protected:
  explicit CGPetGradeCalcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.CGPetGradeCalcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGPetGradeCalcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGPetGradeCalcResponse) */ {
 public:
  inline CGPetGradeCalcResponse() : CGPetGradeCalcResponse(nullptr) {}
  ~CGPetGradeCalcResponse() override;
  explicit constexpr CGPetGradeCalcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGPetGradeCalcResponse(const CGPetGradeCalcResponse& from);
  CGPetGradeCalcResponse(CGPetGradeCalcResponse&& from) noexcept
    : CGPetGradeCalcResponse() {
    *this = ::std::move(from);
  }

  inline CGPetGradeCalcResponse& operator=(const CGPetGradeCalcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGPetGradeCalcResponse& operator=(CGPetGradeCalcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGPetGradeCalcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGPetGradeCalcResponse* internal_default_instance() {
    return reinterpret_cast<const CGPetGradeCalcResponse*>(
               &_CGPetGradeCalcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CGPetGradeCalcResponse& a, CGPetGradeCalcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGPetGradeCalcResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGPetGradeCalcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGPetGradeCalcResponse* New() const final {
    return new CGPetGradeCalcResponse();
  }

  CGPetGradeCalcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGPetGradeCalcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGPetGradeCalcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGPetGradeCalcResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGPetGradeCalcResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGPetGradeCalcResponse";
  }
  protected:
  explicit CGPetGradeCalcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetFieldNumber = 1,
  };
  // repeated .CGData.CGPetGradeCalcData pet = 1;
  int pet_size() const;
  private:
  int _internal_pet_size() const;
  public:
  void clear_pet();
  ::CGData::CGPetGradeCalcData* mutable_pet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetGradeCalcData >*
      mutable_pet();
  private:
  const ::CGData::CGPetGradeCalcData& _internal_pet(int index) const;
  ::CGData::CGPetGradeCalcData* _internal_add_pet();
  public:
  const ::CGData::CGPetGradeCalcData& pet(int index) const;
  ::CGData::CGPetGradeCalcData* add_pet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetGradeCalcData >&
      pet() const;

  // @@protoc_insertion_point(class_scope:CGData.CGPetGradeCalcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetGradeCalcData > pet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGPetGradeCalcData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGPetGradeCalcData) */ {
 public:
  inline CGPetGradeCalcData() : CGPetGradeCalcData(nullptr) {}
  ~CGPetGradeCalcData() override;
  explicit constexpr CGPetGradeCalcData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGPetGradeCalcData(const CGPetGradeCalcData& from);
  CGPetGradeCalcData(CGPetGradeCalcData&& from) noexcept
    : CGPetGradeCalcData() {
    *this = ::std::move(from);
  }

  inline CGPetGradeCalcData& operator=(const CGPetGradeCalcData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGPetGradeCalcData& operator=(CGPetGradeCalcData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGPetGradeCalcData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGPetGradeCalcData* internal_default_instance() {
    return reinterpret_cast<const CGPetGradeCalcData*>(
               &_CGPetGradeCalcData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CGPetGradeCalcData& a, CGPetGradeCalcData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGPetGradeCalcData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGPetGradeCalcData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGPetGradeCalcData* New() const final {
    return new CGPetGradeCalcData();
  }

  CGPetGradeCalcData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGPetGradeCalcData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGPetGradeCalcData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGPetGradeCalcData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGPetGradeCalcData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGPetGradeCalcData";
  }
  protected:
  explicit CGPetGradeCalcData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestBPGradeFieldNumber = 8,
    kNameFieldNumber = 3,
    kRaceTypeNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kNumberFieldNumber = 2,
    kRaceTypeFieldNumber = 4,
    kBaseBPFieldNumber = 6,
    kTotalGradeFieldNumber = 7,
    kCanCatchFieldNumber = 9,
    kCardTypeFieldNumber = 10,
    kImageIdFieldNumber = 11,
    kRateEnduranceFieldNumber = 12,
    kRateStrengthFieldNumber = 13,
    kRateDefenseFieldNumber = 14,
    kRateAgilityFieldNumber = 15,
    kRateMagicalFieldNumber = 16,
    kElementEarthFieldNumber = 17,
    kElementWaterFieldNumber = 18,
    kElementFireFieldNumber = 19,
    kElementWindFieldNumber = 20,
    kSkillSlotsFieldNumber = 21,
  };
  // repeated double bestBPGrade = 8;
  int bestbpgrade_size() const;
  private:
  int _internal_bestbpgrade_size() const;
  public:
  void clear_bestbpgrade();
  private:
  double _internal_bestbpgrade(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bestbpgrade() const;
  void _internal_add_bestbpgrade(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bestbpgrade();
  public:
  double bestbpgrade(int index) const;
  void set_bestbpgrade(int index, double value);
  void add_bestbpgrade(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bestbpgrade() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bestbpgrade();

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string raceTypeName = 5;
  void clear_racetypename();
  const std::string& racetypename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_racetypename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_racetypename();
  PROTOBUF_MUST_USE_RESULT std::string* release_racetypename();
  void set_allocated_racetypename(std::string* racetypename);
  private:
  const std::string& _internal_racetypename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_racetypename(const std::string& value);
  std::string* _internal_mutable_racetypename();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 raceType = 4;
  void clear_racetype();
  ::PROTOBUF_NAMESPACE_ID::int32 racetype() const;
  void set_racetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_racetype() const;
  void _internal_set_racetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double baseBP = 6;
  void clear_basebp();
  double basebp() const;
  void set_basebp(double value);
  private:
  double _internal_basebp() const;
  void _internal_set_basebp(double value);
  public:

  // int32 totalGrade = 7;
  void clear_totalgrade();
  ::PROTOBUF_NAMESPACE_ID::int32 totalgrade() const;
  void set_totalgrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalgrade() const;
  void _internal_set_totalgrade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 can_catch = 9;
  void clear_can_catch();
  ::PROTOBUF_NAMESPACE_ID::int32 can_catch() const;
  void set_can_catch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_catch() const;
  void _internal_set_can_catch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_type = 10;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_id = 11;
  void clear_image_id();
  ::PROTOBUF_NAMESPACE_ID::int32 image_id() const;
  void set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_id() const;
  void _internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rate_endurance = 12;
  void clear_rate_endurance();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_endurance() const;
  void set_rate_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_endurance() const;
  void _internal_set_rate_endurance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rate_strength = 13;
  void clear_rate_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_strength() const;
  void set_rate_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_strength() const;
  void _internal_set_rate_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rate_defense = 14;
  void clear_rate_defense();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_defense() const;
  void set_rate_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_defense() const;
  void _internal_set_rate_defense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rate_agility = 15;
  void clear_rate_agility();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_agility() const;
  void set_rate_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_agility() const;
  void _internal_set_rate_agility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rate_magical = 16;
  void clear_rate_magical();
  ::PROTOBUF_NAMESPACE_ID::int32 rate_magical() const;
  void set_rate_magical(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rate_magical() const;
  void _internal_set_rate_magical(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_earth = 17;
  void clear_element_earth();
  ::PROTOBUF_NAMESPACE_ID::int32 element_earth() const;
  void set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_earth() const;
  void _internal_set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_water = 18;
  void clear_element_water();
  ::PROTOBUF_NAMESPACE_ID::int32 element_water() const;
  void set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_water() const;
  void _internal_set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_fire = 19;
  void clear_element_fire();
  ::PROTOBUF_NAMESPACE_ID::int32 element_fire() const;
  void set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_fire() const;
  void _internal_set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 element_wind = 20;
  void clear_element_wind();
  ::PROTOBUF_NAMESPACE_ID::int32 element_wind() const;
  void set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_wind() const;
  void _internal_set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 skill_slots = 21;
  void clear_skill_slots();
  ::PROTOBUF_NAMESPACE_ID::int32 skill_slots() const;
  void set_skill_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skill_slots() const;
  void _internal_set_skill_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGPetGradeCalcData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bestbpgrade_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr racetypename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  ::PROTOBUF_NAMESPACE_ID::int32 racetype_;
  double basebp_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalgrade_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_catch_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_endurance_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_strength_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_defense_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_agility_;
  ::PROTOBUF_NAMESPACE_ID::int32 rate_magical_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_earth_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_water_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_fire_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_wind_;
  ::PROTOBUF_NAMESPACE_ID::int32 skill_slots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGItemRequest) */ {
 public:
  inline CGItemRequest() : CGItemRequest(nullptr) {}
  ~CGItemRequest() override;
  explicit constexpr CGItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGItemRequest(const CGItemRequest& from);
  CGItemRequest(CGItemRequest&& from) noexcept
    : CGItemRequest() {
    *this = ::std::move(from);
  }

  inline CGItemRequest& operator=(const CGItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGItemRequest& operator=(CGItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGItemRequest* internal_default_instance() {
    return reinterpret_cast<const CGItemRequest*>(
               &_CGItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CGItemRequest& a, CGItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGItemRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGItemRequest* New() const final {
    return new CGItemRequest();
  }

  CGItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGItemRequest";
  }
  protected:
  explicit CGItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // int32 item_id = 1;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGItemResponse) */ {
 public:
  inline CGItemResponse() : CGItemResponse(nullptr) {}
  ~CGItemResponse() override;
  explicit constexpr CGItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGItemResponse(const CGItemResponse& from);
  CGItemResponse(CGItemResponse&& from) noexcept
    : CGItemResponse() {
    *this = ::std::move(from);
  }

  inline CGItemResponse& operator=(const CGItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGItemResponse& operator=(CGItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGItemResponse* internal_default_instance() {
    return reinterpret_cast<const CGItemResponse*>(
               &_CGItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CGItemResponse& a, CGItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGItemResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGItemResponse* New() const final {
    return new CGItemResponse();
  }

  CGItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGItemResponse";
  }
  protected:
  explicit CGItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAttributeFieldNumber = 9,
    kDescFieldNumber = 10,
    kIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kPriceFieldNumber = 5,
    kMaxpileFieldNumber = 6,
    kLevelFieldNumber = 7,
    kSellLimitCountFieldNumber = 8,
    kExistFieldNumber = 11,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string attribute = 9;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_MUST_USE_RESULT std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // string desc = 10;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxpile = 6;
  void clear_maxpile();
  ::PROTOBUF_NAMESPACE_ID::int32 maxpile() const;
  void set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxpile() const;
  void _internal_set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellLimitCount = 8;
  void clear_selllimitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 selllimitcount() const;
  void set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selllimitcount() const;
  void _internal_set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool exist = 11;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxpile_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 selllimitcount_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGStoreItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGStoreItemRequest) */ {
 public:
  inline CGStoreItemRequest() : CGStoreItemRequest(nullptr) {}
  ~CGStoreItemRequest() override;
  explicit constexpr CGStoreItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGStoreItemRequest(const CGStoreItemRequest& from);
  CGStoreItemRequest(CGStoreItemRequest&& from) noexcept
    : CGStoreItemRequest() {
    *this = ::std::move(from);
  }

  inline CGStoreItemRequest& operator=(const CGStoreItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGStoreItemRequest& operator=(CGStoreItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGStoreItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGStoreItemRequest* internal_default_instance() {
    return reinterpret_cast<const CGStoreItemRequest*>(
               &_CGStoreItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CGStoreItemRequest& a, CGStoreItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CGStoreItemRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGStoreItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGStoreItemRequest* New() const final {
    return new CGStoreItemRequest();
  }

  CGStoreItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGStoreItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGStoreItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGStoreItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGStoreItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGStoreItemRequest";
  }
  protected:
  explicit CGStoreItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAttributeFieldNumber = 8,
    kDescFieldNumber = 9,
    kItemIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPriceFieldNumber = 4,
    kMaxpileFieldNumber = 5,
    kLevelFieldNumber = 6,
    kSellLimitCountFieldNumber = 7,
    kAssessedFieldNumber = 10,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string attribute = 8;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_MUST_USE_RESULT std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // string desc = 9;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 item_id = 1;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 price = 4;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxpile = 5;
  void clear_maxpile();
  ::PROTOBUF_NAMESPACE_ID::int32 maxpile() const;
  void set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxpile() const;
  void _internal_set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 6;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellLimitCount = 7;
  void clear_selllimitcount();
  ::PROTOBUF_NAMESPACE_ID::int32 selllimitcount() const;
  void set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selllimitcount() const;
  void _internal_set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool assessed = 10;
  void clear_assessed();
  bool assessed() const;
  void set_assessed(bool value);
  private:
  bool _internal_assessed() const;
  void _internal_set_assessed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGStoreItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxpile_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 selllimitcount_;
  bool assessed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGStoreItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGStoreItemResponse) */ {
 public:
  inline CGStoreItemResponse() : CGStoreItemResponse(nullptr) {}
  ~CGStoreItemResponse() override;
  explicit constexpr CGStoreItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGStoreItemResponse(const CGStoreItemResponse& from);
  CGStoreItemResponse(CGStoreItemResponse&& from) noexcept
    : CGStoreItemResponse() {
    *this = ::std::move(from);
  }

  inline CGStoreItemResponse& operator=(const CGStoreItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGStoreItemResponse& operator=(CGStoreItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGStoreItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGStoreItemResponse* internal_default_instance() {
    return reinterpret_cast<const CGStoreItemResponse*>(
               &_CGStoreItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CGStoreItemResponse& a, CGStoreItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGStoreItemResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGStoreItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGStoreItemResponse* New() const final {
    return new CGStoreItemResponse();
  }

  CGStoreItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGStoreItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGStoreItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGStoreItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGStoreItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGStoreItemResponse";
  }
  protected:
  explicit CGStoreItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaybeNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string maybeName = 2;
  void clear_maybename();
  const std::string& maybename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maybename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maybename();
  PROTOBUF_MUST_USE_RESULT std::string* release_maybename();
  void set_allocated_maybename(std::string* maybename);
  private:
  const std::string& _internal_maybename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maybename(const std::string& value);
  std::string* _internal_mutable_maybename();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGStoreItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maybename_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGVoidData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGVoidData) */ {
 public:
  inline CGVoidData() : CGVoidData(nullptr) {}
  ~CGVoidData() override;
  explicit constexpr CGVoidData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGVoidData(const CGVoidData& from);
  CGVoidData(CGVoidData&& from) noexcept
    : CGVoidData() {
    *this = ::std::move(from);
  }

  inline CGVoidData& operator=(const CGVoidData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGVoidData& operator=(CGVoidData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGVoidData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGVoidData* internal_default_instance() {
    return reinterpret_cast<const CGVoidData*>(
               &_CGVoidData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CGVoidData& a, CGVoidData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGVoidData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGVoidData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGVoidData* New() const final {
    return new CGVoidData();
  }

  CGVoidData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGVoidData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGVoidData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGVoidData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGVoidData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGVoidData";
  }
  protected:
  explicit CGVoidData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGData.CGVoidData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGBoolData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGBoolData) */ {
 public:
  inline CGBoolData() : CGBoolData(nullptr) {}
  ~CGBoolData() override;
  explicit constexpr CGBoolData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGBoolData(const CGBoolData& from);
  CGBoolData(CGBoolData&& from) noexcept
    : CGBoolData() {
    *this = ::std::move(from);
  }

  inline CGBoolData& operator=(const CGBoolData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGBoolData& operator=(CGBoolData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGBoolData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGBoolData* internal_default_instance() {
    return reinterpret_cast<const CGBoolData*>(
               &_CGBoolData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CGBoolData& a, CGBoolData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGBoolData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGBoolData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGBoolData* New() const final {
    return new CGBoolData();
  }

  CGBoolData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGBoolData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGBoolData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGBoolData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGBoolData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGBoolData";
  }
  protected:
  explicit CGBoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // bool val = 1;
  void clear_val();
  bool val() const;
  void set_val(bool value);
  private:
  bool _internal_val() const;
  void _internal_set_val(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGBoolData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGIntData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGIntData) */ {
 public:
  inline CGIntData() : CGIntData(nullptr) {}
  ~CGIntData() override;
  explicit constexpr CGIntData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGIntData(const CGIntData& from);
  CGIntData(CGIntData&& from) noexcept
    : CGIntData() {
    *this = ::std::move(from);
  }

  inline CGIntData& operator=(const CGIntData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGIntData& operator=(CGIntData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGIntData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGIntData* internal_default_instance() {
    return reinterpret_cast<const CGIntData*>(
               &_CGIntData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CGIntData& a, CGIntData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGIntData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGIntData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGIntData* New() const final {
    return new CGIntData();
  }

  CGIntData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGIntData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGIntData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGIntData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGIntData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGIntData";
  }
  protected:
  explicit CGIntData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int32 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGIntData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGSysTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGSysTimeResponse) */ {
 public:
  inline CGSysTimeResponse() : CGSysTimeResponse(nullptr) {}
  ~CGSysTimeResponse() override;
  explicit constexpr CGSysTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGSysTimeResponse(const CGSysTimeResponse& from);
  CGSysTimeResponse(CGSysTimeResponse&& from) noexcept
    : CGSysTimeResponse() {
    *this = ::std::move(from);
  }

  inline CGSysTimeResponse& operator=(const CGSysTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGSysTimeResponse& operator=(CGSysTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGSysTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGSysTimeResponse* internal_default_instance() {
    return reinterpret_cast<const CGSysTimeResponse*>(
               &_CGSysTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CGSysTimeResponse& a, CGSysTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGSysTimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGSysTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGSysTimeResponse* New() const final {
    return new CGSysTimeResponse();
  }

  CGSysTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGSysTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGSysTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGSysTimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGSysTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGSysTimeResponse";
  }
  protected:
  explicit CGSysTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearsFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDaysFieldNumber = 3,
    kHoursFieldNumber = 4,
    kMinsFieldNumber = 5,
    kSecsFieldNumber = 6,
    kLocalTimeFieldNumber = 7,
    kServerTimeFieldNumber = 8,
  };
  // int32 years = 1;
  void clear_years();
  ::PROTOBUF_NAMESPACE_ID::int32 years() const;
  void set_years(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_years() const;
  void _internal_set_years(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 days = 3;
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hours = 4;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mins = 5;
  void clear_mins();
  ::PROTOBUF_NAMESPACE_ID::int32 mins() const;
  void set_mins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins() const;
  void _internal_set_mins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 secs = 6;
  void clear_secs();
  ::PROTOBUF_NAMESPACE_ID::int32 secs() const;
  void set_secs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secs() const;
  void _internal_set_secs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 local_time = 7;
  void clear_local_time();
  ::PROTOBUF_NAMESPACE_ID::int32 local_time() const;
  void set_local_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_local_time() const;
  void _internal_set_local_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_time = 8;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::int32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGSysTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 years_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_;
  ::PROTOBUF_NAMESPACE_ID::int32 hours_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins_;
  ::PROTOBUF_NAMESPACE_ID::int32 secs_;
  ::PROTOBUF_NAMESPACE_ID::int32 local_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// -------------------------------------------------------------------

class CGPlayerFlagEnabledData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGData.CGPlayerFlagEnabledData) */ {
 public:
  inline CGPlayerFlagEnabledData() : CGPlayerFlagEnabledData(nullptr) {}
  ~CGPlayerFlagEnabledData() override;
  explicit constexpr CGPlayerFlagEnabledData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGPlayerFlagEnabledData(const CGPlayerFlagEnabledData& from);
  CGPlayerFlagEnabledData(CGPlayerFlagEnabledData&& from) noexcept
    : CGPlayerFlagEnabledData() {
    *this = ::std::move(from);
  }

  inline CGPlayerFlagEnabledData& operator=(const CGPlayerFlagEnabledData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGPlayerFlagEnabledData& operator=(CGPlayerFlagEnabledData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGPlayerFlagEnabledData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGPlayerFlagEnabledData* internal_default_instance() {
    return reinterpret_cast<const CGPlayerFlagEnabledData*>(
               &_CGPlayerFlagEnabledData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CGPlayerFlagEnabledData& a, CGPlayerFlagEnabledData& b) {
    a.Swap(&b);
  }
  inline void Swap(CGPlayerFlagEnabledData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGPlayerFlagEnabledData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGPlayerFlagEnabledData* New() const final {
    return new CGPlayerFlagEnabledData();
  }

  CGPlayerFlagEnabledData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGPlayerFlagEnabledData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGPlayerFlagEnabledData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGPlayerFlagEnabledData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGPlayerFlagEnabledData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGData.CGPlayerFlagEnabledData";
  }
  protected:
  explicit CGPlayerFlagEnabledData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGData.CGPlayerFlagEnabledData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CGData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGGmeTypeRequest

// int32 type = 1;
inline void CGGmeTypeRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGGmeTypeRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGGmeTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:CGData.CGGmeTypeRequest.type)
  return _internal_type();
}
inline void CGGmeTypeRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CGGmeTypeRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGGmeTypeRequest.type)
}

// -------------------------------------------------------------------

// StringPub

// string value = 1;
inline void StringPub::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StringPub::value() const {
  // @@protoc_insertion_point(field_get:CGData.StringPub.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringPub::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.StringPub.value)
}
inline std::string* StringPub::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CGData.StringPub.value)
  return _s;
}
inline const std::string& StringPub::_internal_value() const {
  return value_.Get();
}
inline void StringPub::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringPub::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringPub::release_value() {
  // @@protoc_insertion_point(field_release:CGData.StringPub.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringPub::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.StringPub.value)
}

// -------------------------------------------------------------------

// UploadGidDataRequest

// string gid = 1;
inline void UploadGidDataRequest::clear_gid() {
  gid_.ClearToEmpty();
}
inline const std::string& UploadGidDataRequest::gid() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGidDataRequest::set_gid(ArgT0&& arg0, ArgT... args) {
 
 gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadGidDataRequest.gid)
}
inline std::string* UploadGidDataRequest::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidDataRequest.gid)
  return _s;
}
inline const std::string& UploadGidDataRequest::_internal_gid() const {
  return gid_.Get();
}
inline void UploadGidDataRequest::_internal_set_gid(const std::string& value) {
  
  gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadGidDataRequest::_internal_mutable_gid() {
  
  return gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadGidDataRequest::release_gid() {
  // @@protoc_insertion_point(field_release:CGData.UploadGidDataRequest.gid)
  return gid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadGidDataRequest::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    
  } else {
    
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadGidDataRequest.gid)
}

// string character_name = 2;
inline void UploadGidDataRequest::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& UploadGidDataRequest::character_name() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGidDataRequest::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadGidDataRequest.character_name)
}
inline std::string* UploadGidDataRequest::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidDataRequest.character_name)
  return _s;
}
inline const std::string& UploadGidDataRequest::_internal_character_name() const {
  return character_name_.Get();
}
inline void UploadGidDataRequest::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadGidDataRequest::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadGidDataRequest::release_character_name() {
  // @@protoc_insertion_point(field_release:CGData.UploadGidDataRequest.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadGidDataRequest::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadGidDataRequest.character_name)
}

// .CGData.CGCharacterData character_data = 3;
inline bool UploadGidDataRequest::_internal_has_character_data() const {
  return this != internal_default_instance() && character_data_ != nullptr;
}
inline bool UploadGidDataRequest::has_character_data() const {
  return _internal_has_character_data();
}
inline void UploadGidDataRequest::clear_character_data() {
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
}
inline const ::CGData::CGCharacterData& UploadGidDataRequest::_internal_character_data() const {
  const ::CGData::CGCharacterData* p = character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGCharacterData&>(
      ::CGData::_CGCharacterData_default_instance_);
}
inline const ::CGData::CGCharacterData& UploadGidDataRequest::character_data() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.character_data)
  return _internal_character_data();
}
inline void UploadGidDataRequest::unsafe_arena_set_allocated_character_data(
    ::CGData::CGCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data_);
  }
  character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.UploadGidDataRequest.character_data)
}
inline ::CGData::CGCharacterData* UploadGidDataRequest::release_character_data() {
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGCharacterData* UploadGidDataRequest::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:CGData.UploadGidDataRequest.character_data)
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
  return temp;
}
inline ::CGData::CGCharacterData* UploadGidDataRequest::_internal_mutable_character_data() {
  
  if (character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGCharacterData>(GetArenaForAllocation());
    character_data_ = p;
  }
  return character_data_;
}
inline ::CGData::CGCharacterData* UploadGidDataRequest::mutable_character_data() {
  ::CGData::CGCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidDataRequest.character_data)
  return _msg;
}
inline void UploadGidDataRequest::set_allocated_character_data(::CGData::CGCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete character_data_;
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGCharacterData>::GetOwningArena(character_data);
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadGidDataRequest.character_data)
}

// repeated .CGData.CGPetData pet_data = 4;
inline int UploadGidDataRequest::_internal_pet_data_size() const {
  return pet_data_.size();
}
inline int UploadGidDataRequest::pet_data_size() const {
  return _internal_pet_data_size();
}
inline void UploadGidDataRequest::clear_pet_data() {
  pet_data_.Clear();
}
inline ::CGData::CGPetData* UploadGidDataRequest::mutable_pet_data(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidDataRequest.pet_data)
  return pet_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
UploadGidDataRequest::mutable_pet_data() {
  // @@protoc_insertion_point(field_mutable_list:CGData.UploadGidDataRequest.pet_data)
  return &pet_data_;
}
inline const ::CGData::CGPetData& UploadGidDataRequest::_internal_pet_data(int index) const {
  return pet_data_.Get(index);
}
inline const ::CGData::CGPetData& UploadGidDataRequest::pet_data(int index) const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.pet_data)
  return _internal_pet_data(index);
}
inline ::CGData::CGPetData* UploadGidDataRequest::_internal_add_pet_data() {
  return pet_data_.Add();
}
inline ::CGData::CGPetData* UploadGidDataRequest::add_pet_data() {
  ::CGData::CGPetData* _add = _internal_add_pet_data();
  // @@protoc_insertion_point(field_add:CGData.UploadGidDataRequest.pet_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
UploadGidDataRequest::pet_data() const {
  // @@protoc_insertion_point(field_list:CGData.UploadGidDataRequest.pet_data)
  return pet_data_;
}

// repeated .CGData.CGItemData items = 5;
inline int UploadGidDataRequest::_internal_items_size() const {
  return items_.size();
}
inline int UploadGidDataRequest::items_size() const {
  return _internal_items_size();
}
inline void UploadGidDataRequest::clear_items() {
  items_.Clear();
}
inline ::CGData::CGItemData* UploadGidDataRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidDataRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
UploadGidDataRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CGData.UploadGidDataRequest.items)
  return &items_;
}
inline const ::CGData::CGItemData& UploadGidDataRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CGData::CGItemData& UploadGidDataRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.items)
  return _internal_items(index);
}
inline ::CGData::CGItemData* UploadGidDataRequest::_internal_add_items() {
  return items_.Add();
}
inline ::CGData::CGItemData* UploadGidDataRequest::add_items() {
  ::CGData::CGItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CGData.UploadGidDataRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
UploadGidDataRequest::items() const {
  // @@protoc_insertion_point(field_list:CGData.UploadGidDataRequest.items)
  return items_;
}

// int32 role_type = 6;
inline void UploadGidDataRequest::clear_role_type() {
  role_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidDataRequest::_internal_role_type() const {
  return role_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidDataRequest::role_type() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.role_type)
  return _internal_role_type();
}
inline void UploadGidDataRequest::_internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_type_ = value;
}
inline void UploadGidDataRequest::set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_type(value);
  // @@protoc_insertion_point(field_set:CGData.UploadGidDataRequest.role_type)
}

// int32 big_line = 7;
inline void UploadGidDataRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidDataRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidDataRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidDataRequest.big_line)
  return _internal_big_line();
}
inline void UploadGidDataRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void UploadGidDataRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.UploadGidDataRequest.big_line)
}

// -------------------------------------------------------------------

// UploadGidDataResponse

// -------------------------------------------------------------------

// UploadGidBankDataRequest

// string gid = 1;
inline void UploadGidBankDataRequest::clear_gid() {
  gid_.ClearToEmpty();
}
inline const std::string& UploadGidBankDataRequest::gid() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGidBankDataRequest::set_gid(ArgT0&& arg0, ArgT... args) {
 
 gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadGidBankDataRequest.gid)
}
inline std::string* UploadGidBankDataRequest::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidBankDataRequest.gid)
  return _s;
}
inline const std::string& UploadGidBankDataRequest::_internal_gid() const {
  return gid_.Get();
}
inline void UploadGidBankDataRequest::_internal_set_gid(const std::string& value) {
  
  gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadGidBankDataRequest::_internal_mutable_gid() {
  
  return gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadGidBankDataRequest::release_gid() {
  // @@protoc_insertion_point(field_release:CGData.UploadGidBankDataRequest.gid)
  return gid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadGidBankDataRequest::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    
  } else {
    
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadGidBankDataRequest.gid)
}

// string character_name = 2;
inline void UploadGidBankDataRequest::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& UploadGidBankDataRequest::character_name() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadGidBankDataRequest::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadGidBankDataRequest.character_name)
}
inline std::string* UploadGidBankDataRequest::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidBankDataRequest.character_name)
  return _s;
}
inline const std::string& UploadGidBankDataRequest::_internal_character_name() const {
  return character_name_.Get();
}
inline void UploadGidBankDataRequest::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadGidBankDataRequest::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadGidBankDataRequest::release_character_name() {
  // @@protoc_insertion_point(field_release:CGData.UploadGidBankDataRequest.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadGidBankDataRequest::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadGidBankDataRequest.character_name)
}

// int32 gold = 3;
inline void UploadGidBankDataRequest::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::gold() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.gold)
  return _internal_gold();
}
inline void UploadGidBankDataRequest::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void UploadGidBankDataRequest::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CGData.UploadGidBankDataRequest.gold)
}

// repeated .CGData.CGPetData pet_data = 4;
inline int UploadGidBankDataRequest::_internal_pet_data_size() const {
  return pet_data_.size();
}
inline int UploadGidBankDataRequest::pet_data_size() const {
  return _internal_pet_data_size();
}
inline void UploadGidBankDataRequest::clear_pet_data() {
  pet_data_.Clear();
}
inline ::CGData::CGPetData* UploadGidBankDataRequest::mutable_pet_data(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidBankDataRequest.pet_data)
  return pet_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
UploadGidBankDataRequest::mutable_pet_data() {
  // @@protoc_insertion_point(field_mutable_list:CGData.UploadGidBankDataRequest.pet_data)
  return &pet_data_;
}
inline const ::CGData::CGPetData& UploadGidBankDataRequest::_internal_pet_data(int index) const {
  return pet_data_.Get(index);
}
inline const ::CGData::CGPetData& UploadGidBankDataRequest::pet_data(int index) const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.pet_data)
  return _internal_pet_data(index);
}
inline ::CGData::CGPetData* UploadGidBankDataRequest::_internal_add_pet_data() {
  return pet_data_.Add();
}
inline ::CGData::CGPetData* UploadGidBankDataRequest::add_pet_data() {
  ::CGData::CGPetData* _add = _internal_add_pet_data();
  // @@protoc_insertion_point(field_add:CGData.UploadGidBankDataRequest.pet_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
UploadGidBankDataRequest::pet_data() const {
  // @@protoc_insertion_point(field_list:CGData.UploadGidBankDataRequest.pet_data)
  return pet_data_;
}

// repeated .CGData.CGItemData items = 5;
inline int UploadGidBankDataRequest::_internal_items_size() const {
  return items_.size();
}
inline int UploadGidBankDataRequest::items_size() const {
  return _internal_items_size();
}
inline void UploadGidBankDataRequest::clear_items() {
  items_.Clear();
}
inline ::CGData::CGItemData* UploadGidBankDataRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.UploadGidBankDataRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
UploadGidBankDataRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CGData.UploadGidBankDataRequest.items)
  return &items_;
}
inline const ::CGData::CGItemData& UploadGidBankDataRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CGData::CGItemData& UploadGidBankDataRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.items)
  return _internal_items(index);
}
inline ::CGData::CGItemData* UploadGidBankDataRequest::_internal_add_items() {
  return items_.Add();
}
inline ::CGData::CGItemData* UploadGidBankDataRequest::add_items() {
  ::CGData::CGItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CGData.UploadGidBankDataRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
UploadGidBankDataRequest::items() const {
  // @@protoc_insertion_point(field_list:CGData.UploadGidBankDataRequest.items)
  return items_;
}

// int32 role_type = 6;
inline void UploadGidBankDataRequest::clear_role_type() {
  role_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::_internal_role_type() const {
  return role_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::role_type() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.role_type)
  return _internal_role_type();
}
inline void UploadGidBankDataRequest::_internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_type_ = value;
}
inline void UploadGidBankDataRequest::set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_type(value);
  // @@protoc_insertion_point(field_set:CGData.UploadGidBankDataRequest.role_type)
}

// int32 big_line = 7;
inline void UploadGidBankDataRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadGidBankDataRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.UploadGidBankDataRequest.big_line)
  return _internal_big_line();
}
inline void UploadGidBankDataRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void UploadGidBankDataRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.UploadGidBankDataRequest.big_line)
}

// -------------------------------------------------------------------

// UploadGidBankDataResponse

// -------------------------------------------------------------------

// UploadMapDataRequest

// string FileName = 1;
inline void UploadMapDataRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& UploadMapDataRequest::filename() const {
  // @@protoc_insertion_point(field_get:CGData.UploadMapDataRequest.FileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMapDataRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadMapDataRequest.FileName)
}
inline std::string* UploadMapDataRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CGData.UploadMapDataRequest.FileName)
  return _s;
}
inline const std::string& UploadMapDataRequest::_internal_filename() const {
  return filename_.Get();
}
inline void UploadMapDataRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::release_filename() {
  // @@protoc_insertion_point(field_release:CGData.UploadMapDataRequest.FileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadMapDataRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadMapDataRequest.FileName)
}

// string ServerLine = 2;
inline void UploadMapDataRequest::clear_serverline() {
  serverline_.ClearToEmpty();
}
inline const std::string& UploadMapDataRequest::serverline() const {
  // @@protoc_insertion_point(field_get:CGData.UploadMapDataRequest.ServerLine)
  return _internal_serverline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMapDataRequest::set_serverline(ArgT0&& arg0, ArgT... args) {
 
 serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadMapDataRequest.ServerLine)
}
inline std::string* UploadMapDataRequest::mutable_serverline() {
  std::string* _s = _internal_mutable_serverline();
  // @@protoc_insertion_point(field_mutable:CGData.UploadMapDataRequest.ServerLine)
  return _s;
}
inline const std::string& UploadMapDataRequest::_internal_serverline() const {
  return serverline_.Get();
}
inline void UploadMapDataRequest::_internal_set_serverline(const std::string& value) {
  
  serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::_internal_mutable_serverline() {
  
  return serverline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::release_serverline() {
  // @@protoc_insertion_point(field_release:CGData.UploadMapDataRequest.ServerLine)
  return serverline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadMapDataRequest::set_allocated_serverline(std::string* serverline) {
  if (serverline != nullptr) {
    
  } else {
    
  }
  serverline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadMapDataRequest.ServerLine)
}

// string MapType = 3;
inline void UploadMapDataRequest::clear_maptype() {
  maptype_.ClearToEmpty();
}
inline const std::string& UploadMapDataRequest::maptype() const {
  // @@protoc_insertion_point(field_get:CGData.UploadMapDataRequest.MapType)
  return _internal_maptype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMapDataRequest::set_maptype(ArgT0&& arg0, ArgT... args) {
 
 maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadMapDataRequest.MapType)
}
inline std::string* UploadMapDataRequest::mutable_maptype() {
  std::string* _s = _internal_mutable_maptype();
  // @@protoc_insertion_point(field_mutable:CGData.UploadMapDataRequest.MapType)
  return _s;
}
inline const std::string& UploadMapDataRequest::_internal_maptype() const {
  return maptype_.Get();
}
inline void UploadMapDataRequest::_internal_set_maptype(const std::string& value) {
  
  maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::_internal_mutable_maptype() {
  
  return maptype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::release_maptype() {
  // @@protoc_insertion_point(field_release:CGData.UploadMapDataRequest.MapType)
  return maptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadMapDataRequest::set_allocated_maptype(std::string* maptype) {
  if (maptype != nullptr) {
    
  } else {
    
  }
  maptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maptype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadMapDataRequest.MapType)
}

// string fileTime = 4;
inline void UploadMapDataRequest::clear_filetime() {
  filetime_.ClearToEmpty();
}
inline const std::string& UploadMapDataRequest::filetime() const {
  // @@protoc_insertion_point(field_get:CGData.UploadMapDataRequest.fileTime)
  return _internal_filetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMapDataRequest::set_filetime(ArgT0&& arg0, ArgT... args) {
 
 filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadMapDataRequest.fileTime)
}
inline std::string* UploadMapDataRequest::mutable_filetime() {
  std::string* _s = _internal_mutable_filetime();
  // @@protoc_insertion_point(field_mutable:CGData.UploadMapDataRequest.fileTime)
  return _s;
}
inline const std::string& UploadMapDataRequest::_internal_filetime() const {
  return filetime_.Get();
}
inline void UploadMapDataRequest::_internal_set_filetime(const std::string& value) {
  
  filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::_internal_mutable_filetime() {
  
  return filetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::release_filetime() {
  // @@protoc_insertion_point(field_release:CGData.UploadMapDataRequest.fileTime)
  return filetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadMapDataRequest::set_allocated_filetime(std::string* filetime) {
  if (filetime != nullptr) {
    
  } else {
    
  }
  filetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadMapDataRequest.fileTime)
}

// bytes ImageData = 5;
inline void UploadMapDataRequest::clear_imagedata() {
  imagedata_.ClearToEmpty();
}
inline const std::string& UploadMapDataRequest::imagedata() const {
  // @@protoc_insertion_point(field_get:CGData.UploadMapDataRequest.ImageData)
  return _internal_imagedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMapDataRequest::set_imagedata(ArgT0&& arg0, ArgT... args) {
 
 imagedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadMapDataRequest.ImageData)
}
inline std::string* UploadMapDataRequest::mutable_imagedata() {
  std::string* _s = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:CGData.UploadMapDataRequest.ImageData)
  return _s;
}
inline const std::string& UploadMapDataRequest::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void UploadMapDataRequest::_internal_set_imagedata(const std::string& value) {
  
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::_internal_mutable_imagedata() {
  
  return imagedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadMapDataRequest::release_imagedata() {
  // @@protoc_insertion_point(field_release:CGData.UploadMapDataRequest.ImageData)
  return imagedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadMapDataRequest::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    
  } else {
    
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadMapDataRequest.ImageData)
}

// -------------------------------------------------------------------

// UploadMapDataResponse

// -------------------------------------------------------------------

// DownloadMapDataRequest

// string FileName = 1;
inline void DownloadMapDataRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& DownloadMapDataRequest::filename() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataRequest.FileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataRequest.FileName)
}
inline std::string* DownloadMapDataRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataRequest.FileName)
  return _s;
}
inline const std::string& DownloadMapDataRequest::_internal_filename() const {
  return filename_.Get();
}
inline void DownloadMapDataRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::release_filename() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataRequest.FileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataRequest.FileName)
}

// string ServerLine = 2;
inline void DownloadMapDataRequest::clear_serverline() {
  serverline_.ClearToEmpty();
}
inline const std::string& DownloadMapDataRequest::serverline() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataRequest.ServerLine)
  return _internal_serverline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataRequest::set_serverline(ArgT0&& arg0, ArgT... args) {
 
 serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataRequest.ServerLine)
}
inline std::string* DownloadMapDataRequest::mutable_serverline() {
  std::string* _s = _internal_mutable_serverline();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataRequest.ServerLine)
  return _s;
}
inline const std::string& DownloadMapDataRequest::_internal_serverline() const {
  return serverline_.Get();
}
inline void DownloadMapDataRequest::_internal_set_serverline(const std::string& value) {
  
  serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::_internal_mutable_serverline() {
  
  return serverline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::release_serverline() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataRequest.ServerLine)
  return serverline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataRequest::set_allocated_serverline(std::string* serverline) {
  if (serverline != nullptr) {
    
  } else {
    
  }
  serverline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataRequest.ServerLine)
}

// string MapType = 3;
inline void DownloadMapDataRequest::clear_maptype() {
  maptype_.ClearToEmpty();
}
inline const std::string& DownloadMapDataRequest::maptype() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataRequest.MapType)
  return _internal_maptype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataRequest::set_maptype(ArgT0&& arg0, ArgT... args) {
 
 maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataRequest.MapType)
}
inline std::string* DownloadMapDataRequest::mutable_maptype() {
  std::string* _s = _internal_mutable_maptype();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataRequest.MapType)
  return _s;
}
inline const std::string& DownloadMapDataRequest::_internal_maptype() const {
  return maptype_.Get();
}
inline void DownloadMapDataRequest::_internal_set_maptype(const std::string& value) {
  
  maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::_internal_mutable_maptype() {
  
  return maptype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataRequest::release_maptype() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataRequest.MapType)
  return maptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataRequest::set_allocated_maptype(std::string* maptype) {
  if (maptype != nullptr) {
    
  } else {
    
  }
  maptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maptype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataRequest.MapType)
}

// -------------------------------------------------------------------

// DownloadMapDataResponse

// string FileName = 1;
inline void DownloadMapDataResponse::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& DownloadMapDataResponse::filename() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataResponse.FileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataResponse.FileName)
}
inline std::string* DownloadMapDataResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataResponse.FileName)
  return _s;
}
inline const std::string& DownloadMapDataResponse::_internal_filename() const {
  return filename_.Get();
}
inline void DownloadMapDataResponse::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::release_filename() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataResponse.FileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataResponse.FileName)
}

// string ServerLine = 2;
inline void DownloadMapDataResponse::clear_serverline() {
  serverline_.ClearToEmpty();
}
inline const std::string& DownloadMapDataResponse::serverline() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataResponse.ServerLine)
  return _internal_serverline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataResponse::set_serverline(ArgT0&& arg0, ArgT... args) {
 
 serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataResponse.ServerLine)
}
inline std::string* DownloadMapDataResponse::mutable_serverline() {
  std::string* _s = _internal_mutable_serverline();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataResponse.ServerLine)
  return _s;
}
inline const std::string& DownloadMapDataResponse::_internal_serverline() const {
  return serverline_.Get();
}
inline void DownloadMapDataResponse::_internal_set_serverline(const std::string& value) {
  
  serverline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::_internal_mutable_serverline() {
  
  return serverline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::release_serverline() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataResponse.ServerLine)
  return serverline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataResponse::set_allocated_serverline(std::string* serverline) {
  if (serverline != nullptr) {
    
  } else {
    
  }
  serverline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataResponse.ServerLine)
}

// string MapType = 3;
inline void DownloadMapDataResponse::clear_maptype() {
  maptype_.ClearToEmpty();
}
inline const std::string& DownloadMapDataResponse::maptype() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataResponse.MapType)
  return _internal_maptype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataResponse::set_maptype(ArgT0&& arg0, ArgT... args) {
 
 maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataResponse.MapType)
}
inline std::string* DownloadMapDataResponse::mutable_maptype() {
  std::string* _s = _internal_mutable_maptype();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataResponse.MapType)
  return _s;
}
inline const std::string& DownloadMapDataResponse::_internal_maptype() const {
  return maptype_.Get();
}
inline void DownloadMapDataResponse::_internal_set_maptype(const std::string& value) {
  
  maptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::_internal_mutable_maptype() {
  
  return maptype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::release_maptype() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataResponse.MapType)
  return maptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataResponse::set_allocated_maptype(std::string* maptype) {
  if (maptype != nullptr) {
    
  } else {
    
  }
  maptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maptype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataResponse.MapType)
}

// string fileTime = 4;
inline void DownloadMapDataResponse::clear_filetime() {
  filetime_.ClearToEmpty();
}
inline const std::string& DownloadMapDataResponse::filetime() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataResponse.fileTime)
  return _internal_filetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataResponse::set_filetime(ArgT0&& arg0, ArgT... args) {
 
 filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataResponse.fileTime)
}
inline std::string* DownloadMapDataResponse::mutable_filetime() {
  std::string* _s = _internal_mutable_filetime();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataResponse.fileTime)
  return _s;
}
inline const std::string& DownloadMapDataResponse::_internal_filetime() const {
  return filetime_.Get();
}
inline void DownloadMapDataResponse::_internal_set_filetime(const std::string& value) {
  
  filetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::_internal_mutable_filetime() {
  
  return filetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::release_filetime() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataResponse.fileTime)
  return filetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataResponse::set_allocated_filetime(std::string* filetime) {
  if (filetime != nullptr) {
    
  } else {
    
  }
  filetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataResponse.fileTime)
}

// bytes ImageData = 5;
inline void DownloadMapDataResponse::clear_imagedata() {
  imagedata_.ClearToEmpty();
}
inline const std::string& DownloadMapDataResponse::imagedata() const {
  // @@protoc_insertion_point(field_get:CGData.DownloadMapDataResponse.ImageData)
  return _internal_imagedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadMapDataResponse::set_imagedata(ArgT0&& arg0, ArgT... args) {
 
 imagedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.DownloadMapDataResponse.ImageData)
}
inline std::string* DownloadMapDataResponse::mutable_imagedata() {
  std::string* _s = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:CGData.DownloadMapDataResponse.ImageData)
  return _s;
}
inline const std::string& DownloadMapDataResponse::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void DownloadMapDataResponse::_internal_set_imagedata(const std::string& value) {
  
  imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::_internal_mutable_imagedata() {
  
  return imagedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DownloadMapDataResponse::release_imagedata() {
  // @@protoc_insertion_point(field_release:CGData.DownloadMapDataResponse.ImageData)
  return imagedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DownloadMapDataResponse::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    
  } else {
    
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.DownloadMapDataResponse.ImageData)
}

// -------------------------------------------------------------------

// UploadCharcterServerRequest

// string char_name = 1;
inline void UploadCharcterServerRequest::clear_char_name() {
  char_name_.ClearToEmpty();
}
inline const std::string& UploadCharcterServerRequest::char_name() const {
  // @@protoc_insertion_point(field_get:CGData.UploadCharcterServerRequest.char_name)
  return _internal_char_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadCharcterServerRequest::set_char_name(ArgT0&& arg0, ArgT... args) {
 
 char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadCharcterServerRequest.char_name)
}
inline std::string* UploadCharcterServerRequest::mutable_char_name() {
  std::string* _s = _internal_mutable_char_name();
  // @@protoc_insertion_point(field_mutable:CGData.UploadCharcterServerRequest.char_name)
  return _s;
}
inline const std::string& UploadCharcterServerRequest::_internal_char_name() const {
  return char_name_.Get();
}
inline void UploadCharcterServerRequest::_internal_set_char_name(const std::string& value) {
  
  char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadCharcterServerRequest::_internal_mutable_char_name() {
  
  return char_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadCharcterServerRequest::release_char_name() {
  // @@protoc_insertion_point(field_release:CGData.UploadCharcterServerRequest.char_name)
  return char_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadCharcterServerRequest::set_allocated_char_name(std::string* char_name) {
  if (char_name != nullptr) {
    
  } else {
    
  }
  char_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadCharcterServerRequest.char_name)
}

// int32 big_line = 2;
inline void UploadCharcterServerRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.UploadCharcterServerRequest.big_line)
  return _internal_big_line();
}
inline void UploadCharcterServerRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void UploadCharcterServerRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.UploadCharcterServerRequest.big_line)
}

// string ip = 3;
inline void UploadCharcterServerRequest::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& UploadCharcterServerRequest::ip() const {
  // @@protoc_insertion_point(field_get:CGData.UploadCharcterServerRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadCharcterServerRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.UploadCharcterServerRequest.ip)
}
inline std::string* UploadCharcterServerRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:CGData.UploadCharcterServerRequest.ip)
  return _s;
}
inline const std::string& UploadCharcterServerRequest::_internal_ip() const {
  return ip_.Get();
}
inline void UploadCharcterServerRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadCharcterServerRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadCharcterServerRequest::release_ip() {
  // @@protoc_insertion_point(field_release:CGData.UploadCharcterServerRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadCharcterServerRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.UploadCharcterServerRequest.ip)
}

// int32 port = 4;
inline void UploadCharcterServerRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::port() const {
  // @@protoc_insertion_point(field_get:CGData.UploadCharcterServerRequest.port)
  return _internal_port();
}
inline void UploadCharcterServerRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void UploadCharcterServerRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:CGData.UploadCharcterServerRequest.port)
}

// int32 online = 5;
inline void UploadCharcterServerRequest::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadCharcterServerRequest::online() const {
  // @@protoc_insertion_point(field_get:CGData.UploadCharcterServerRequest.online)
  return _internal_online();
}
inline void UploadCharcterServerRequest::_internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
}
inline void UploadCharcterServerRequest::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CGData.UploadCharcterServerRequest.online)
}

// -------------------------------------------------------------------

// UploadCharcterServerResponse

// -------------------------------------------------------------------

// CGAccountGidData

// string account = 1;
inline void CGAccountGidData::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& CGAccountGidData::account() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGAccountGidData::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.account)
}
inline std::string* CGAccountGidData::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:CGData.CGAccountGidData.account)
  return _s;
}
inline const std::string& CGAccountGidData::_internal_account() const {
  return account_.Get();
}
inline void CGAccountGidData::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGAccountGidData::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGAccountGidData::release_account() {
  // @@protoc_insertion_point(field_release:CGData.CGAccountGidData.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGAccountGidData::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGAccountGidData.account)
}

// string gid = 2;
inline void CGAccountGidData::clear_gid() {
  gid_.ClearToEmpty();
}
inline const std::string& CGAccountGidData::gid() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGAccountGidData::set_gid(ArgT0&& arg0, ArgT... args) {
 
 gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.gid)
}
inline std::string* CGAccountGidData::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:CGData.CGAccountGidData.gid)
  return _s;
}
inline const std::string& CGAccountGidData::_internal_gid() const {
  return gid_.Get();
}
inline void CGAccountGidData::_internal_set_gid(const std::string& value) {
  
  gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGAccountGidData::_internal_mutable_gid() {
  
  return gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGAccountGidData::release_gid() {
  // @@protoc_insertion_point(field_release:CGData.CGAccountGidData.gid)
  return gid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGAccountGidData::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    
  } else {
    
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGAccountGidData.gid)
}

// int32 game_type = 3;
inline void CGAccountGidData::clear_game_type() {
  game_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::game_type() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.game_type)
  return _internal_game_type();
}
inline void CGAccountGidData::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_type_ = value;
}
inline void CGAccountGidData::set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.game_type)
}

// int32 big_server = 4;
inline void CGAccountGidData::clear_big_server() {
  big_server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::_internal_big_server() const {
  return big_server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::big_server() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.big_server)
  return _internal_big_server();
}
inline void CGAccountGidData::_internal_set_big_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_server_ = value;
}
inline void CGAccountGidData::set_big_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_server(value);
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.big_server)
}

// uint32 server_line = 5;
inline void CGAccountGidData::clear_server_line() {
  server_line_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGAccountGidData::_internal_server_line() const {
  return server_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGAccountGidData::server_line() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.server_line)
  return _internal_server_line();
}
inline void CGAccountGidData::_internal_set_server_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_line_ = value;
}
inline void CGAccountGidData::set_server_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_line(value);
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.server_line)
}

// int32 character = 6;
inline void CGAccountGidData::clear_character() {
  character_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAccountGidData::character() const {
  // @@protoc_insertion_point(field_get:CGData.CGAccountGidData.character)
  return _internal_character();
}
inline void CGAccountGidData::_internal_set_character(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_ = value;
}
inline void CGAccountGidData::set_character(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:CGData.CGAccountGidData.character)
}

// -------------------------------------------------------------------

// SelectAccountGidDataRequest

// string account = 1;
inline void SelectAccountGidDataRequest::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& SelectAccountGidDataRequest::account() const {
  // @@protoc_insertion_point(field_get:CGData.SelectAccountGidDataRequest.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectAccountGidDataRequest::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectAccountGidDataRequest.account)
}
inline std::string* SelectAccountGidDataRequest::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:CGData.SelectAccountGidDataRequest.account)
  return _s;
}
inline const std::string& SelectAccountGidDataRequest::_internal_account() const {
  return account_.Get();
}
inline void SelectAccountGidDataRequest::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectAccountGidDataRequest::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectAccountGidDataRequest::release_account() {
  // @@protoc_insertion_point(field_release:CGData.SelectAccountGidDataRequest.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectAccountGidDataRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectAccountGidDataRequest.account)
}

// -------------------------------------------------------------------

// SelectGidDataRequest

// string gid = 1;
inline void SelectGidDataRequest::clear_gid() {
  gid_.ClearToEmpty();
}
inline const std::string& SelectGidDataRequest::gid() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataRequest.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectGidDataRequest::set_gid(ArgT0&& arg0, ArgT... args) {
 
 gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectGidDataRequest.gid)
}
inline std::string* SelectGidDataRequest::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataRequest.gid)
  return _s;
}
inline const std::string& SelectGidDataRequest::_internal_gid() const {
  return gid_.Get();
}
inline void SelectGidDataRequest::_internal_set_gid(const std::string& value) {
  
  gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectGidDataRequest::_internal_mutable_gid() {
  
  return gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectGidDataRequest::release_gid() {
  // @@protoc_insertion_point(field_release:CGData.SelectGidDataRequest.gid)
  return gid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectGidDataRequest::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    
  } else {
    
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectGidDataRequest.gid)
}

// int32 role_type = 2;
inline void SelectGidDataRequest::clear_role_type() {
  role_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectGidDataRequest::_internal_role_type() const {
  return role_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectGidDataRequest::role_type() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataRequest.role_type)
  return _internal_role_type();
}
inline void SelectGidDataRequest::_internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_type_ = value;
}
inline void SelectGidDataRequest::set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_type(value);
  // @@protoc_insertion_point(field_set:CGData.SelectGidDataRequest.role_type)
}

// -------------------------------------------------------------------

// SelectCharacterDataRequest

// string char_name = 1;
inline void SelectCharacterDataRequest::clear_char_name() {
  char_name_.ClearToEmpty();
}
inline const std::string& SelectCharacterDataRequest::char_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataRequest.char_name)
  return _internal_char_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectCharacterDataRequest::set_char_name(ArgT0&& arg0, ArgT... args) {
 
 char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterDataRequest.char_name)
}
inline std::string* SelectCharacterDataRequest::mutable_char_name() {
  std::string* _s = _internal_mutable_char_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterDataRequest.char_name)
  return _s;
}
inline const std::string& SelectCharacterDataRequest::_internal_char_name() const {
  return char_name_.Get();
}
inline void SelectCharacterDataRequest::_internal_set_char_name(const std::string& value) {
  
  char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectCharacterDataRequest::_internal_mutable_char_name() {
  
  return char_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectCharacterDataRequest::release_char_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterDataRequest.char_name)
  return char_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectCharacterDataRequest::set_allocated_char_name(std::string* char_name) {
  if (char_name != nullptr) {
    
  } else {
    
  }
  char_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterDataRequest.char_name)
}

// int32 big_line = 2;
inline void SelectCharacterDataRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterDataRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterDataRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataRequest.big_line)
  return _internal_big_line();
}
inline void SelectCharacterDataRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectCharacterDataRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterDataRequest.big_line)
}

// -------------------------------------------------------------------

// SelectCharacterDataResponse

// string character_name = 1;
inline void SelectCharacterDataResponse::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& SelectCharacterDataResponse::character_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataResponse.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectCharacterDataResponse::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterDataResponse.character_name)
}
inline std::string* SelectCharacterDataResponse::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterDataResponse.character_name)
  return _s;
}
inline const std::string& SelectCharacterDataResponse::_internal_character_name() const {
  return character_name_.Get();
}
inline void SelectCharacterDataResponse::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectCharacterDataResponse::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectCharacterDataResponse::release_character_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterDataResponse.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectCharacterDataResponse::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterDataResponse.character_name)
}

// int32 big_line = 2;
inline void SelectCharacterDataResponse::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterDataResponse::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterDataResponse::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataResponse.big_line)
  return _internal_big_line();
}
inline void SelectCharacterDataResponse::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectCharacterDataResponse::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterDataResponse.big_line)
}

// .CGData.CGCharacterData character_data = 3;
inline bool SelectCharacterDataResponse::_internal_has_character_data() const {
  return this != internal_default_instance() && character_data_ != nullptr;
}
inline bool SelectCharacterDataResponse::has_character_data() const {
  return _internal_has_character_data();
}
inline void SelectCharacterDataResponse::clear_character_data() {
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
}
inline const ::CGData::CGCharacterData& SelectCharacterDataResponse::_internal_character_data() const {
  const ::CGData::CGCharacterData* p = character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGCharacterData&>(
      ::CGData::_CGCharacterData_default_instance_);
}
inline const ::CGData::CGCharacterData& SelectCharacterDataResponse::character_data() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataResponse.character_data)
  return _internal_character_data();
}
inline void SelectCharacterDataResponse::unsafe_arena_set_allocated_character_data(
    ::CGData::CGCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data_);
  }
  character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.SelectCharacterDataResponse.character_data)
}
inline ::CGData::CGCharacterData* SelectCharacterDataResponse::release_character_data() {
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGCharacterData* SelectCharacterDataResponse::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterDataResponse.character_data)
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
  return temp;
}
inline ::CGData::CGCharacterData* SelectCharacterDataResponse::_internal_mutable_character_data() {
  
  if (character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGCharacterData>(GetArenaForAllocation());
    character_data_ = p;
  }
  return character_data_;
}
inline ::CGData::CGCharacterData* SelectCharacterDataResponse::mutable_character_data() {
  ::CGData::CGCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterDataResponse.character_data)
  return _msg;
}
inline void SelectCharacterDataResponse::set_allocated_character_data(::CGData::CGCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete character_data_;
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGCharacterData>::GetOwningArena(character_data);
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterDataResponse.character_data)
}

// repeated .CGData.CGPetData pet_data = 4;
inline int SelectCharacterDataResponse::_internal_pet_data_size() const {
  return pet_data_.size();
}
inline int SelectCharacterDataResponse::pet_data_size() const {
  return _internal_pet_data_size();
}
inline void SelectCharacterDataResponse::clear_pet_data() {
  pet_data_.Clear();
}
inline ::CGData::CGPetData* SelectCharacterDataResponse::mutable_pet_data(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterDataResponse.pet_data)
  return pet_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
SelectCharacterDataResponse::mutable_pet_data() {
  // @@protoc_insertion_point(field_mutable_list:CGData.SelectCharacterDataResponse.pet_data)
  return &pet_data_;
}
inline const ::CGData::CGPetData& SelectCharacterDataResponse::_internal_pet_data(int index) const {
  return pet_data_.Get(index);
}
inline const ::CGData::CGPetData& SelectCharacterDataResponse::pet_data(int index) const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataResponse.pet_data)
  return _internal_pet_data(index);
}
inline ::CGData::CGPetData* SelectCharacterDataResponse::_internal_add_pet_data() {
  return pet_data_.Add();
}
inline ::CGData::CGPetData* SelectCharacterDataResponse::add_pet_data() {
  ::CGData::CGPetData* _add = _internal_add_pet_data();
  // @@protoc_insertion_point(field_add:CGData.SelectCharacterDataResponse.pet_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
SelectCharacterDataResponse::pet_data() const {
  // @@protoc_insertion_point(field_list:CGData.SelectCharacterDataResponse.pet_data)
  return pet_data_;
}

// repeated .CGData.CGItemData items = 5;
inline int SelectCharacterDataResponse::_internal_items_size() const {
  return items_.size();
}
inline int SelectCharacterDataResponse::items_size() const {
  return _internal_items_size();
}
inline void SelectCharacterDataResponse::clear_items() {
  items_.Clear();
}
inline ::CGData::CGItemData* SelectCharacterDataResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterDataResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
SelectCharacterDataResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CGData.SelectCharacterDataResponse.items)
  return &items_;
}
inline const ::CGData::CGItemData& SelectCharacterDataResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CGData::CGItemData& SelectCharacterDataResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterDataResponse.items)
  return _internal_items(index);
}
inline ::CGData::CGItemData* SelectCharacterDataResponse::_internal_add_items() {
  return items_.Add();
}
inline ::CGData::CGItemData* SelectCharacterDataResponse::add_items() {
  ::CGData::CGItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CGData.SelectCharacterDataResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
SelectCharacterDataResponse::items() const {
  // @@protoc_insertion_point(field_list:CGData.SelectCharacterDataResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// SelectCharacterServerRequest

// string char_name = 1;
inline void SelectCharacterServerRequest::clear_char_name() {
  char_name_.ClearToEmpty();
}
inline const std::string& SelectCharacterServerRequest::char_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerRequest.char_name)
  return _internal_char_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectCharacterServerRequest::set_char_name(ArgT0&& arg0, ArgT... args) {
 
 char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerRequest.char_name)
}
inline std::string* SelectCharacterServerRequest::mutable_char_name() {
  std::string* _s = _internal_mutable_char_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterServerRequest.char_name)
  return _s;
}
inline const std::string& SelectCharacterServerRequest::_internal_char_name() const {
  return char_name_.Get();
}
inline void SelectCharacterServerRequest::_internal_set_char_name(const std::string& value) {
  
  char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerRequest::_internal_mutable_char_name() {
  
  return char_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerRequest::release_char_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterServerRequest.char_name)
  return char_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectCharacterServerRequest::set_allocated_char_name(std::string* char_name) {
  if (char_name != nullptr) {
    
  } else {
    
  }
  char_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterServerRequest.char_name)
}

// int32 big_line = 2;
inline void SelectCharacterServerRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerRequest.big_line)
  return _internal_big_line();
}
inline void SelectCharacterServerRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectCharacterServerRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerRequest.big_line)
}

// -------------------------------------------------------------------

// SelectCharacterServerResponse

// string char_name = 1;
inline void SelectCharacterServerResponse::clear_char_name() {
  char_name_.ClearToEmpty();
}
inline const std::string& SelectCharacterServerResponse::char_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerResponse.char_name)
  return _internal_char_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectCharacterServerResponse::set_char_name(ArgT0&& arg0, ArgT... args) {
 
 char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerResponse.char_name)
}
inline std::string* SelectCharacterServerResponse::mutable_char_name() {
  std::string* _s = _internal_mutable_char_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterServerResponse.char_name)
  return _s;
}
inline const std::string& SelectCharacterServerResponse::_internal_char_name() const {
  return char_name_.Get();
}
inline void SelectCharacterServerResponse::_internal_set_char_name(const std::string& value) {
  
  char_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerResponse::_internal_mutable_char_name() {
  
  return char_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerResponse::release_char_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterServerResponse.char_name)
  return char_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectCharacterServerResponse::set_allocated_char_name(std::string* char_name) {
  if (char_name != nullptr) {
    
  } else {
    
  }
  char_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterServerResponse.char_name)
}

// int32 big_line = 2;
inline void SelectCharacterServerResponse::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerResponse.big_line)
  return _internal_big_line();
}
inline void SelectCharacterServerResponse::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectCharacterServerResponse::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerResponse.big_line)
}

// string ip = 3;
inline void SelectCharacterServerResponse::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& SelectCharacterServerResponse::ip() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerResponse.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectCharacterServerResponse::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerResponse.ip)
}
inline std::string* SelectCharacterServerResponse::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:CGData.SelectCharacterServerResponse.ip)
  return _s;
}
inline const std::string& SelectCharacterServerResponse::_internal_ip() const {
  return ip_.Get();
}
inline void SelectCharacterServerResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectCharacterServerResponse::release_ip() {
  // @@protoc_insertion_point(field_release:CGData.SelectCharacterServerResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectCharacterServerResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectCharacterServerResponse.ip)
}

// int32 port = 4;
inline void SelectCharacterServerResponse::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::port() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerResponse.port)
  return _internal_port();
}
inline void SelectCharacterServerResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void SelectCharacterServerResponse::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerResponse.port)
}

// int32 online = 5;
inline void SelectCharacterServerResponse::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectCharacterServerResponse::online() const {
  // @@protoc_insertion_point(field_get:CGData.SelectCharacterServerResponse.online)
  return _internal_online();
}
inline void SelectCharacterServerResponse::_internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
}
inline void SelectCharacterServerResponse::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CGData.SelectCharacterServerResponse.online)
}

// -------------------------------------------------------------------

// SelectTaskInfoRequest

// string task_name = 1;
inline void SelectTaskInfoRequest::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& SelectTaskInfoRequest::task_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoRequest.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectTaskInfoRequest::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoRequest.task_name)
}
inline std::string* SelectTaskInfoRequest::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectTaskInfoRequest.task_name)
  return _s;
}
inline const std::string& SelectTaskInfoRequest::_internal_task_name() const {
  return task_name_.Get();
}
inline void SelectTaskInfoRequest::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectTaskInfoRequest::_internal_mutable_task_name() {
  
  return task_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectTaskInfoRequest::release_task_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectTaskInfoRequest.task_name)
  return task_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectTaskInfoRequest::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectTaskInfoRequest.task_name)
}

// int32 big_line = 2;
inline void SelectTaskInfoRequest::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoRequest::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoRequest::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoRequest.big_line)
  return _internal_big_line();
}
inline void SelectTaskInfoRequest::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectTaskInfoRequest::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoRequest.big_line)
}

// int32 line = 3;
inline void SelectTaskInfoRequest::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoRequest::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoRequest::line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoRequest.line)
  return _internal_line();
}
inline void SelectTaskInfoRequest::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void SelectTaskInfoRequest::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoRequest.line)
}

// -------------------------------------------------------------------

// SelectTaskInfoResponse

// string task_name = 1;
inline void SelectTaskInfoResponse::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& SelectTaskInfoResponse::task_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectTaskInfoResponse::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.task_name)
}
inline std::string* SelectTaskInfoResponse::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectTaskInfoResponse.task_name)
  return _s;
}
inline const std::string& SelectTaskInfoResponse::_internal_task_name() const {
  return task_name_.Get();
}
inline void SelectTaskInfoResponse::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectTaskInfoResponse::_internal_mutable_task_name() {
  
  return task_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectTaskInfoResponse::release_task_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectTaskInfoResponse.task_name)
  return task_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectTaskInfoResponse::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectTaskInfoResponse.task_name)
}

// int32 big_line = 2;
inline void SelectTaskInfoResponse::clear_big_line() {
  big_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.big_line)
  return _internal_big_line();
}
inline void SelectTaskInfoResponse::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  big_line_ = value;
}
inline void SelectTaskInfoResponse::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.big_line)
}

// int32 line = 3;
inline void SelectTaskInfoResponse::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::line() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.line)
  return _internal_line();
}
inline void SelectTaskInfoResponse::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void SelectTaskInfoResponse::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.line)
}

// int32 npc_pos_x = 4;
inline void SelectTaskInfoResponse::clear_npc_pos_x() {
  npc_pos_x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_npc_pos_x() const {
  return npc_pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::npc_pos_x() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.npc_pos_x)
  return _internal_npc_pos_x();
}
inline void SelectTaskInfoResponse::_internal_set_npc_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npc_pos_x_ = value;
}
inline void SelectTaskInfoResponse::set_npc_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npc_pos_x(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.npc_pos_x)
}

// int32 npc_pos_y = 5;
inline void SelectTaskInfoResponse::clear_npc_pos_y() {
  npc_pos_y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_npc_pos_y() const {
  return npc_pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::npc_pos_y() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.npc_pos_y)
  return _internal_npc_pos_y();
}
inline void SelectTaskInfoResponse::_internal_set_npc_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  npc_pos_y_ = value;
}
inline void SelectTaskInfoResponse::set_npc_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npc_pos_y(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.npc_pos_y)
}

// int32 last_time = 6;
inline void SelectTaskInfoResponse::clear_last_time() {
  last_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_last_time() const {
  return last_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::last_time() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.last_time)
  return _internal_last_time();
}
inline void SelectTaskInfoResponse::_internal_set_last_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_time_ = value;
}
inline void SelectTaskInfoResponse::set_last_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_time(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.last_time)
}

// int32 last_map_first_num = 7;
inline void SelectTaskInfoResponse::clear_last_map_first_num() {
  last_map_first_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_last_map_first_num() const {
  return last_map_first_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::last_map_first_num() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.last_map_first_num)
  return _internal_last_map_first_num();
}
inline void SelectTaskInfoResponse::_internal_set_last_map_first_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_map_first_num_ = value;
}
inline void SelectTaskInfoResponse::set_last_map_first_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_map_first_num(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.last_map_first_num)
}

// int32 last_map_first_width = 8;
inline void SelectTaskInfoResponse::clear_last_map_first_width() {
  last_map_first_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_last_map_first_width() const {
  return last_map_first_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::last_map_first_width() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.last_map_first_width)
  return _internal_last_map_first_width();
}
inline void SelectTaskInfoResponse::_internal_set_last_map_first_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_map_first_width_ = value;
}
inline void SelectTaskInfoResponse::set_last_map_first_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_map_first_width(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.last_map_first_width)
}

// int32 last_map_first_height = 9;
inline void SelectTaskInfoResponse::clear_last_map_first_height() {
  last_map_first_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::_internal_last_map_first_height() const {
  return last_map_first_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectTaskInfoResponse::last_map_first_height() const {
  // @@protoc_insertion_point(field_get:CGData.SelectTaskInfoResponse.last_map_first_height)
  return _internal_last_map_first_height();
}
inline void SelectTaskInfoResponse::_internal_set_last_map_first_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_map_first_height_ = value;
}
inline void SelectTaskInfoResponse::set_last_map_first_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_map_first_height(value);
  // @@protoc_insertion_point(field_set:CGData.SelectTaskInfoResponse.last_map_first_height)
}

// -------------------------------------------------------------------

// SelectAccountGidDataResponse

// repeated .CGData.SelectGidDataResponse gidData = 1;
inline int SelectAccountGidDataResponse::_internal_giddata_size() const {
  return giddata_.size();
}
inline int SelectAccountGidDataResponse::giddata_size() const {
  return _internal_giddata_size();
}
inline void SelectAccountGidDataResponse::clear_giddata() {
  giddata_.Clear();
}
inline ::CGData::SelectGidDataResponse* SelectAccountGidDataResponse::mutable_giddata(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.SelectAccountGidDataResponse.gidData)
  return giddata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::SelectGidDataResponse >*
SelectAccountGidDataResponse::mutable_giddata() {
  // @@protoc_insertion_point(field_mutable_list:CGData.SelectAccountGidDataResponse.gidData)
  return &giddata_;
}
inline const ::CGData::SelectGidDataResponse& SelectAccountGidDataResponse::_internal_giddata(int index) const {
  return giddata_.Get(index);
}
inline const ::CGData::SelectGidDataResponse& SelectAccountGidDataResponse::giddata(int index) const {
  // @@protoc_insertion_point(field_get:CGData.SelectAccountGidDataResponse.gidData)
  return _internal_giddata(index);
}
inline ::CGData::SelectGidDataResponse* SelectAccountGidDataResponse::_internal_add_giddata() {
  return giddata_.Add();
}
inline ::CGData::SelectGidDataResponse* SelectAccountGidDataResponse::add_giddata() {
  ::CGData::SelectGidDataResponse* _add = _internal_add_giddata();
  // @@protoc_insertion_point(field_add:CGData.SelectAccountGidDataResponse.gidData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::SelectGidDataResponse >&
SelectAccountGidDataResponse::giddata() const {
  // @@protoc_insertion_point(field_list:CGData.SelectAccountGidDataResponse.gidData)
  return giddata_;
}

// -------------------------------------------------------------------

// SelectGidDataResponse

// string gid = 1;
inline void SelectGidDataResponse::clear_gid() {
  gid_.ClearToEmpty();
}
inline const std::string& SelectGidDataResponse::gid() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectGidDataResponse::set_gid(ArgT0&& arg0, ArgT... args) {
 
 gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectGidDataResponse.gid)
}
inline std::string* SelectGidDataResponse::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataResponse.gid)
  return _s;
}
inline const std::string& SelectGidDataResponse::_internal_gid() const {
  return gid_.Get();
}
inline void SelectGidDataResponse::_internal_set_gid(const std::string& value) {
  
  gid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectGidDataResponse::_internal_mutable_gid() {
  
  return gid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectGidDataResponse::release_gid() {
  // @@protoc_insertion_point(field_release:CGData.SelectGidDataResponse.gid)
  return gid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectGidDataResponse::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    
  } else {
    
  }
  gid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectGidDataResponse.gid)
}

// int32 role_type = 2;
inline void SelectGidDataResponse::clear_role_type() {
  role_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectGidDataResponse::_internal_role_type() const {
  return role_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectGidDataResponse::role_type() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.role_type)
  return _internal_role_type();
}
inline void SelectGidDataResponse::_internal_set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_type_ = value;
}
inline void SelectGidDataResponse::set_role_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_type(value);
  // @@protoc_insertion_point(field_set:CGData.SelectGidDataResponse.role_type)
}

// string character_name = 3;
inline void SelectGidDataResponse::clear_character_name() {
  character_name_.ClearToEmpty();
}
inline const std::string& SelectGidDataResponse::character_name() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectGidDataResponse::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.SelectGidDataResponse.character_name)
}
inline std::string* SelectGidDataResponse::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataResponse.character_name)
  return _s;
}
inline const std::string& SelectGidDataResponse::_internal_character_name() const {
  return character_name_.Get();
}
inline void SelectGidDataResponse::_internal_set_character_name(const std::string& value) {
  
  character_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectGidDataResponse::_internal_mutable_character_name() {
  
  return character_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectGidDataResponse::release_character_name() {
  // @@protoc_insertion_point(field_release:CGData.SelectGidDataResponse.character_name)
  return character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectGidDataResponse::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectGidDataResponse.character_name)
}

// .CGData.CGCharacterData character_data = 4;
inline bool SelectGidDataResponse::_internal_has_character_data() const {
  return this != internal_default_instance() && character_data_ != nullptr;
}
inline bool SelectGidDataResponse::has_character_data() const {
  return _internal_has_character_data();
}
inline void SelectGidDataResponse::clear_character_data() {
  if (GetArenaForAllocation() == nullptr && character_data_ != nullptr) {
    delete character_data_;
  }
  character_data_ = nullptr;
}
inline const ::CGData::CGCharacterData& SelectGidDataResponse::_internal_character_data() const {
  const ::CGData::CGCharacterData* p = character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGCharacterData&>(
      ::CGData::_CGCharacterData_default_instance_);
}
inline const ::CGData::CGCharacterData& SelectGidDataResponse::character_data() const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.character_data)
  return _internal_character_data();
}
inline void SelectGidDataResponse::unsafe_arena_set_allocated_character_data(
    ::CGData::CGCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data_);
  }
  character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.SelectGidDataResponse.character_data)
}
inline ::CGData::CGCharacterData* SelectGidDataResponse::release_character_data() {
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGCharacterData* SelectGidDataResponse::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:CGData.SelectGidDataResponse.character_data)
  
  ::CGData::CGCharacterData* temp = character_data_;
  character_data_ = nullptr;
  return temp;
}
inline ::CGData::CGCharacterData* SelectGidDataResponse::_internal_mutable_character_data() {
  
  if (character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGCharacterData>(GetArenaForAllocation());
    character_data_ = p;
  }
  return character_data_;
}
inline ::CGData::CGCharacterData* SelectGidDataResponse::mutable_character_data() {
  ::CGData::CGCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataResponse.character_data)
  return _msg;
}
inline void SelectGidDataResponse::set_allocated_character_data(::CGData::CGCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete character_data_;
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGCharacterData>::GetOwningArena(character_data);
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:CGData.SelectGidDataResponse.character_data)
}

// repeated .CGData.CGPetData pet_data = 5;
inline int SelectGidDataResponse::_internal_pet_data_size() const {
  return pet_data_.size();
}
inline int SelectGidDataResponse::pet_data_size() const {
  return _internal_pet_data_size();
}
inline void SelectGidDataResponse::clear_pet_data() {
  pet_data_.Clear();
}
inline ::CGData::CGPetData* SelectGidDataResponse::mutable_pet_data(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataResponse.pet_data)
  return pet_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >*
SelectGidDataResponse::mutable_pet_data() {
  // @@protoc_insertion_point(field_mutable_list:CGData.SelectGidDataResponse.pet_data)
  return &pet_data_;
}
inline const ::CGData::CGPetData& SelectGidDataResponse::_internal_pet_data(int index) const {
  return pet_data_.Get(index);
}
inline const ::CGData::CGPetData& SelectGidDataResponse::pet_data(int index) const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.pet_data)
  return _internal_pet_data(index);
}
inline ::CGData::CGPetData* SelectGidDataResponse::_internal_add_pet_data() {
  return pet_data_.Add();
}
inline ::CGData::CGPetData* SelectGidDataResponse::add_pet_data() {
  ::CGData::CGPetData* _add = _internal_add_pet_data();
  // @@protoc_insertion_point(field_add:CGData.SelectGidDataResponse.pet_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetData >&
SelectGidDataResponse::pet_data() const {
  // @@protoc_insertion_point(field_list:CGData.SelectGidDataResponse.pet_data)
  return pet_data_;
}

// repeated .CGData.CGItemData items = 6;
inline int SelectGidDataResponse::_internal_items_size() const {
  return items_.size();
}
inline int SelectGidDataResponse::items_size() const {
  return _internal_items_size();
}
inline void SelectGidDataResponse::clear_items() {
  items_.Clear();
}
inline ::CGData::CGItemData* SelectGidDataResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.SelectGidDataResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >*
SelectGidDataResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CGData.SelectGidDataResponse.items)
  return &items_;
}
inline const ::CGData::CGItemData& SelectGidDataResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CGData::CGItemData& SelectGidDataResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:CGData.SelectGidDataResponse.items)
  return _internal_items(index);
}
inline ::CGData::CGItemData* SelectGidDataResponse::_internal_add_items() {
  return items_.Add();
}
inline ::CGData::CGItemData* SelectGidDataResponse::add_items() {
  ::CGData::CGItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CGData.SelectGidDataResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGItemData >&
SelectGidDataResponse::items() const {
  // @@protoc_insertion_point(field_list:CGData.SelectGidDataResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// CGBaseData

// string name = 1;
inline void CGBaseData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGBaseData::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGBaseData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.name)
}
inline std::string* CGBaseData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGBaseData.name)
  return _s;
}
inline const std::string& CGBaseData::_internal_name() const {
  return name_.Get();
}
inline void CGBaseData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGBaseData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGBaseData::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGBaseData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGBaseData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGBaseData.name)
}

// int32 hp = 2;
inline void CGBaseData::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::hp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.hp)
  return _internal_hp();
}
inline void CGBaseData::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void CGBaseData::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.hp)
}

// int32 mp = 3;
inline void CGBaseData::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::mp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.mp)
  return _internal_mp();
}
inline void CGBaseData::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
}
inline void CGBaseData::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.mp)
}

// int32 maxhp = 4;
inline void CGBaseData::clear_maxhp() {
  maxhp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::maxhp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.maxhp)
  return _internal_maxhp();
}
inline void CGBaseData::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxhp_ = value;
}
inline void CGBaseData::set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.maxhp)
}

// int32 maxmp = 5;
inline void CGBaseData::clear_maxmp() {
  maxmp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_maxmp() const {
  return maxmp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::maxmp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.maxmp)
  return _internal_maxmp();
}
inline void CGBaseData::_internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxmp_ = value;
}
inline void CGBaseData::set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxmp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.maxmp)
}

// int32 level = 6;
inline void CGBaseData::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.level)
  return _internal_level();
}
inline void CGBaseData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGBaseData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.level)
}

// int32 xp = 7;
inline void CGBaseData::clear_xp() {
  xp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_xp() const {
  return xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::xp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.xp)
  return _internal_xp();
}
inline void CGBaseData::_internal_set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xp_ = value;
}
inline void CGBaseData::set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.xp)
}

// int32 maxxp = 8;
inline void CGBaseData::clear_maxxp() {
  maxxp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_maxxp() const {
  return maxxp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::maxxp() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.maxxp)
  return _internal_maxxp();
}
inline void CGBaseData::_internal_set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxxp_ = value;
}
inline void CGBaseData::set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxxp(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.maxxp)
}

// int32 health = 9;
inline void CGBaseData::clear_health() {
  health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGBaseData::health() const {
  // @@protoc_insertion_point(field_get:CGData.CGBaseData.health)
  return _internal_health();
}
inline void CGBaseData::_internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_ = value;
}
inline void CGBaseData::set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:CGData.CGBaseData.health)
}

// -------------------------------------------------------------------

// CGSkillBaseData

// string name = 1;
inline void CGSkillBaseData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGSkillBaseData::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGSkillBaseData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.name)
}
inline std::string* CGSkillBaseData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGSkillBaseData.name)
  return _s;
}
inline const std::string& CGSkillBaseData::_internal_name() const {
  return name_.Get();
}
inline void CGSkillBaseData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGSkillBaseData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGSkillBaseData::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGSkillBaseData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGSkillBaseData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGSkillBaseData.name)
}

// string info = 2;
inline void CGSkillBaseData::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& CGSkillBaseData::info() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGSkillBaseData::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.info)
}
inline std::string* CGSkillBaseData::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CGData.CGSkillBaseData.info)
  return _s;
}
inline const std::string& CGSkillBaseData::_internal_info() const {
  return info_.Get();
}
inline void CGSkillBaseData::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGSkillBaseData::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGSkillBaseData::release_info() {
  // @@protoc_insertion_point(field_release:CGData.CGSkillBaseData.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGSkillBaseData::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGSkillBaseData.info)
}

// int32 id = 3;
inline void CGSkillBaseData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::id() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.id)
  return _internal_id();
}
inline void CGSkillBaseData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CGSkillBaseData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.id)
}

// int32 cost = 4;
inline void CGSkillBaseData::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::cost() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.cost)
  return _internal_cost();
}
inline void CGSkillBaseData::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void CGSkillBaseData::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.cost)
}

// int32 flags = 5;
inline void CGSkillBaseData::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::flags() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.flags)
  return _internal_flags();
}
inline void CGSkillBaseData::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void CGSkillBaseData::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.flags)
}

// int32 index = 6;
inline void CGSkillBaseData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::index() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.index)
  return _internal_index();
}
inline void CGSkillBaseData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CGSkillBaseData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.index)
}

// int32 level = 7;
inline void CGSkillBaseData::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.level)
  return _internal_level();
}
inline void CGSkillBaseData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGSkillBaseData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.level)
}

// int32 maxLevel = 8;
inline void CGSkillBaseData::clear_maxlevel() {
  maxlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_maxlevel() const {
  return maxlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::maxlevel() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.maxLevel)
  return _internal_maxlevel();
}
inline void CGSkillBaseData::_internal_set_maxlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxlevel_ = value;
}
inline void CGSkillBaseData::set_maxlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.maxLevel)
}

// bool available = 9;
inline void CGSkillBaseData::clear_available() {
  available_ = false;
}
inline bool CGSkillBaseData::_internal_available() const {
  return available_;
}
inline bool CGSkillBaseData::available() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.available)
  return _internal_available();
}
inline void CGSkillBaseData::_internal_set_available(bool value) {
  
  available_ = value;
}
inline void CGSkillBaseData::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.available)
}

// int32 xp = 10;
inline void CGSkillBaseData::clear_xp() {
  xp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_xp() const {
  return xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::xp() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.xp)
  return _internal_xp();
}
inline void CGSkillBaseData::_internal_set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xp_ = value;
}
inline void CGSkillBaseData::set_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.xp)
}

// int32 maxxp = 11;
inline void CGSkillBaseData::clear_maxxp() {
  maxxp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::_internal_maxxp() const {
  return maxxp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSkillBaseData::maxxp() const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.maxxp)
  return _internal_maxxp();
}
inline void CGSkillBaseData::_internal_set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxxp_ = value;
}
inline void CGSkillBaseData::set_maxxp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxxp(value);
  // @@protoc_insertion_point(field_set:CGData.CGSkillBaseData.maxxp)
}

// repeated .CGData.CGSkillBaseData subskills = 12;
inline int CGSkillBaseData::_internal_subskills_size() const {
  return subskills_.size();
}
inline int CGSkillBaseData::subskills_size() const {
  return _internal_subskills_size();
}
inline void CGSkillBaseData::clear_subskills() {
  subskills_.Clear();
}
inline ::CGData::CGSkillBaseData* CGSkillBaseData::mutable_subskills(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGSkillBaseData.subskills)
  return subskills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
CGSkillBaseData::mutable_subskills() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGSkillBaseData.subskills)
  return &subskills_;
}
inline const ::CGData::CGSkillBaseData& CGSkillBaseData::_internal_subskills(int index) const {
  return subskills_.Get(index);
}
inline const ::CGData::CGSkillBaseData& CGSkillBaseData::subskills(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGSkillBaseData.subskills)
  return _internal_subskills(index);
}
inline ::CGData::CGSkillBaseData* CGSkillBaseData::_internal_add_subskills() {
  return subskills_.Add();
}
inline ::CGData::CGSkillBaseData* CGSkillBaseData::add_subskills() {
  ::CGData::CGSkillBaseData* _add = _internal_add_subskills();
  // @@protoc_insertion_point(field_add:CGData.CGSkillBaseData.subskills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
CGSkillBaseData::subskills() const {
  // @@protoc_insertion_point(field_list:CGData.CGSkillBaseData.subskills)
  return subskills_;
}

// -------------------------------------------------------------------

// CGAttrBaseData

// int32 points_remain = 1;
inline void CGAttrBaseData::clear_points_remain() {
  points_remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_remain() const {
  return points_remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_remain() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_remain)
  return _internal_points_remain();
}
inline void CGAttrBaseData::_internal_set_points_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_remain_ = value;
}
inline void CGAttrBaseData::set_points_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_remain(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_remain)
}

// int32 points_endurance = 2;
inline void CGAttrBaseData::clear_points_endurance() {
  points_endurance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_endurance() const {
  return points_endurance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_endurance() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_endurance)
  return _internal_points_endurance();
}
inline void CGAttrBaseData::_internal_set_points_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_endurance_ = value;
}
inline void CGAttrBaseData::set_points_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_endurance(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_endurance)
}

// int32 points_strength = 3;
inline void CGAttrBaseData::clear_points_strength() {
  points_strength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_strength() const {
  return points_strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_strength() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_strength)
  return _internal_points_strength();
}
inline void CGAttrBaseData::_internal_set_points_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_strength_ = value;
}
inline void CGAttrBaseData::set_points_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_strength(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_strength)
}

// int32 points_defense = 4;
inline void CGAttrBaseData::clear_points_defense() {
  points_defense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_defense() const {
  return points_defense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_defense() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_defense)
  return _internal_points_defense();
}
inline void CGAttrBaseData::_internal_set_points_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_defense_ = value;
}
inline void CGAttrBaseData::set_points_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_defense(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_defense)
}

// int32 points_agility = 5;
inline void CGAttrBaseData::clear_points_agility() {
  points_agility_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_agility() const {
  return points_agility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_agility() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_agility)
  return _internal_points_agility();
}
inline void CGAttrBaseData::_internal_set_points_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_agility_ = value;
}
inline void CGAttrBaseData::set_points_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_agility(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_agility)
}

// int32 points_magical = 6;
inline void CGAttrBaseData::clear_points_magical() {
  points_magical_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_points_magical() const {
  return points_magical_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::points_magical() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.points_magical)
  return _internal_points_magical();
}
inline void CGAttrBaseData::_internal_set_points_magical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_magical_ = value;
}
inline void CGAttrBaseData::set_points_magical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points_magical(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.points_magical)
}

// int32 value_attack = 7;
inline void CGAttrBaseData::clear_value_attack() {
  value_attack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_value_attack() const {
  return value_attack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::value_attack() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.value_attack)
  return _internal_value_attack();
}
inline void CGAttrBaseData::_internal_set_value_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_attack_ = value;
}
inline void CGAttrBaseData::set_value_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_attack(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.value_attack)
}

// int32 value_defensive = 8;
inline void CGAttrBaseData::clear_value_defensive() {
  value_defensive_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_value_defensive() const {
  return value_defensive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::value_defensive() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.value_defensive)
  return _internal_value_defensive();
}
inline void CGAttrBaseData::_internal_set_value_defensive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_defensive_ = value;
}
inline void CGAttrBaseData::set_value_defensive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_defensive(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.value_defensive)
}

// int32 value_agility = 9;
inline void CGAttrBaseData::clear_value_agility() {
  value_agility_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_value_agility() const {
  return value_agility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::value_agility() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.value_agility)
  return _internal_value_agility();
}
inline void CGAttrBaseData::_internal_set_value_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_agility_ = value;
}
inline void CGAttrBaseData::set_value_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_agility(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.value_agility)
}

// int32 value_spirit = 10;
inline void CGAttrBaseData::clear_value_spirit() {
  value_spirit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_value_spirit() const {
  return value_spirit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::value_spirit() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.value_spirit)
  return _internal_value_spirit();
}
inline void CGAttrBaseData::_internal_set_value_spirit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_spirit_ = value;
}
inline void CGAttrBaseData::set_value_spirit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_spirit(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.value_spirit)
}

// int32 value_recovery = 11;
inline void CGAttrBaseData::clear_value_recovery() {
  value_recovery_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_value_recovery() const {
  return value_recovery_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::value_recovery() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.value_recovery)
  return _internal_value_recovery();
}
inline void CGAttrBaseData::_internal_set_value_recovery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_recovery_ = value;
}
inline void CGAttrBaseData::set_value_recovery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_recovery(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.value_recovery)
}

// int32 resist_poison = 12;
inline void CGAttrBaseData::clear_resist_poison() {
  resist_poison_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_poison() const {
  return resist_poison_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_poison() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_poison)
  return _internal_resist_poison();
}
inline void CGAttrBaseData::_internal_set_resist_poison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_poison_ = value;
}
inline void CGAttrBaseData::set_resist_poison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_poison(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_poison)
}

// int32 resist_sleep = 13;
inline void CGAttrBaseData::clear_resist_sleep() {
  resist_sleep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_sleep() const {
  return resist_sleep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_sleep() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_sleep)
  return _internal_resist_sleep();
}
inline void CGAttrBaseData::_internal_set_resist_sleep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_sleep_ = value;
}
inline void CGAttrBaseData::set_resist_sleep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_sleep(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_sleep)
}

// int32 resist_medusa = 14;
inline void CGAttrBaseData::clear_resist_medusa() {
  resist_medusa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_medusa() const {
  return resist_medusa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_medusa() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_medusa)
  return _internal_resist_medusa();
}
inline void CGAttrBaseData::_internal_set_resist_medusa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_medusa_ = value;
}
inline void CGAttrBaseData::set_resist_medusa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_medusa(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_medusa)
}

// int32 resist_drunk = 15;
inline void CGAttrBaseData::clear_resist_drunk() {
  resist_drunk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_drunk() const {
  return resist_drunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_drunk() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_drunk)
  return _internal_resist_drunk();
}
inline void CGAttrBaseData::_internal_set_resist_drunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_drunk_ = value;
}
inline void CGAttrBaseData::set_resist_drunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_drunk(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_drunk)
}

// int32 resist_chaos = 16;
inline void CGAttrBaseData::clear_resist_chaos() {
  resist_chaos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_chaos() const {
  return resist_chaos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_chaos() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_chaos)
  return _internal_resist_chaos();
}
inline void CGAttrBaseData::_internal_set_resist_chaos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_chaos_ = value;
}
inline void CGAttrBaseData::set_resist_chaos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_chaos(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_chaos)
}

// int32 resist_forget = 17;
inline void CGAttrBaseData::clear_resist_forget() {
  resist_forget_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_resist_forget() const {
  return resist_forget_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::resist_forget() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.resist_forget)
  return _internal_resist_forget();
}
inline void CGAttrBaseData::_internal_set_resist_forget(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resist_forget_ = value;
}
inline void CGAttrBaseData::set_resist_forget(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resist_forget(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.resist_forget)
}

// int32 fix_critical = 18;
inline void CGAttrBaseData::clear_fix_critical() {
  fix_critical_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_fix_critical() const {
  return fix_critical_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::fix_critical() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.fix_critical)
  return _internal_fix_critical();
}
inline void CGAttrBaseData::_internal_set_fix_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fix_critical_ = value;
}
inline void CGAttrBaseData::set_fix_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fix_critical(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.fix_critical)
}

// int32 fix_strikeback = 19;
inline void CGAttrBaseData::clear_fix_strikeback() {
  fix_strikeback_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_fix_strikeback() const {
  return fix_strikeback_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::fix_strikeback() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.fix_strikeback)
  return _internal_fix_strikeback();
}
inline void CGAttrBaseData::_internal_set_fix_strikeback(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fix_strikeback_ = value;
}
inline void CGAttrBaseData::set_fix_strikeback(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fix_strikeback(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.fix_strikeback)
}

// int32 fix_accurancy = 20;
inline void CGAttrBaseData::clear_fix_accurancy() {
  fix_accurancy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_fix_accurancy() const {
  return fix_accurancy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::fix_accurancy() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.fix_accurancy)
  return _internal_fix_accurancy();
}
inline void CGAttrBaseData::_internal_set_fix_accurancy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fix_accurancy_ = value;
}
inline void CGAttrBaseData::set_fix_accurancy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fix_accurancy(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.fix_accurancy)
}

// int32 fix_dodge = 21;
inline void CGAttrBaseData::clear_fix_dodge() {
  fix_dodge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_fix_dodge() const {
  return fix_dodge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::fix_dodge() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.fix_dodge)
  return _internal_fix_dodge();
}
inline void CGAttrBaseData::_internal_set_fix_dodge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fix_dodge_ = value;
}
inline void CGAttrBaseData::set_fix_dodge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fix_dodge(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.fix_dodge)
}

// int32 element_earth = 22;
inline void CGAttrBaseData::clear_element_earth() {
  element_earth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_element_earth() const {
  return element_earth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::element_earth() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.element_earth)
  return _internal_element_earth();
}
inline void CGAttrBaseData::_internal_set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_earth_ = value;
}
inline void CGAttrBaseData::set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_earth(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.element_earth)
}

// int32 element_water = 23;
inline void CGAttrBaseData::clear_element_water() {
  element_water_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_element_water() const {
  return element_water_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::element_water() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.element_water)
  return _internal_element_water();
}
inline void CGAttrBaseData::_internal_set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_water_ = value;
}
inline void CGAttrBaseData::set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_water(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.element_water)
}

// int32 element_fire = 24;
inline void CGAttrBaseData::clear_element_fire() {
  element_fire_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_element_fire() const {
  return element_fire_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::element_fire() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.element_fire)
  return _internal_element_fire();
}
inline void CGAttrBaseData::_internal_set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_fire_ = value;
}
inline void CGAttrBaseData::set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_fire(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.element_fire)
}

// int32 element_wind = 25;
inline void CGAttrBaseData::clear_element_wind() {
  element_wind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::_internal_element_wind() const {
  return element_wind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGAttrBaseData::element_wind() const {
  // @@protoc_insertion_point(field_get:CGData.CGAttrBaseData.element_wind)
  return _internal_element_wind();
}
inline void CGAttrBaseData::_internal_set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_wind_ = value;
}
inline void CGAttrBaseData::set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_wind(value);
  // @@protoc_insertion_point(field_set:CGData.CGAttrBaseData.element_wind)
}

// -------------------------------------------------------------------

// CGCharacterPersDesc

// int32 changeBits = 1;
inline void CGCharacterPersDesc::clear_changebits() {
  changebits_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::_internal_changebits() const {
  return changebits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::changebits() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.changeBits)
  return _internal_changebits();
}
inline void CGCharacterPersDesc::_internal_set_changebits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  changebits_ = value;
}
inline void CGCharacterPersDesc::set_changebits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changebits(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.changeBits)
}

// int32 sellIcon = 2;
inline void CGCharacterPersDesc::clear_sellicon() {
  sellicon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::_internal_sellicon() const {
  return sellicon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::sellicon() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.sellIcon)
  return _internal_sellicon();
}
inline void CGCharacterPersDesc::_internal_set_sellicon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sellicon_ = value;
}
inline void CGCharacterPersDesc::set_sellicon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sellicon(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.sellIcon)
}

// string sellString = 3;
inline void CGCharacterPersDesc::clear_sellstring() {
  sellstring_.ClearToEmpty();
}
inline const std::string& CGCharacterPersDesc::sellstring() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.sellString)
  return _internal_sellstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterPersDesc::set_sellstring(ArgT0&& arg0, ArgT... args) {
 
 sellstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.sellString)
}
inline std::string* CGCharacterPersDesc::mutable_sellstring() {
  std::string* _s = _internal_mutable_sellstring();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterPersDesc.sellString)
  return _s;
}
inline const std::string& CGCharacterPersDesc::_internal_sellstring() const {
  return sellstring_.Get();
}
inline void CGCharacterPersDesc::_internal_set_sellstring(const std::string& value) {
  
  sellstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::_internal_mutable_sellstring() {
  
  return sellstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::release_sellstring() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterPersDesc.sellString)
  return sellstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterPersDesc::set_allocated_sellstring(std::string* sellstring) {
  if (sellstring != nullptr) {
    
  } else {
    
  }
  sellstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sellstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterPersDesc.sellString)
}

// int32 buyIcon = 4;
inline void CGCharacterPersDesc::clear_buyicon() {
  buyicon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::_internal_buyicon() const {
  return buyicon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::buyicon() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.buyIcon)
  return _internal_buyicon();
}
inline void CGCharacterPersDesc::_internal_set_buyicon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buyicon_ = value;
}
inline void CGCharacterPersDesc::set_buyicon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buyicon(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.buyIcon)
}

// string buyString = 5;
inline void CGCharacterPersDesc::clear_buystring() {
  buystring_.ClearToEmpty();
}
inline const std::string& CGCharacterPersDesc::buystring() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.buyString)
  return _internal_buystring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterPersDesc::set_buystring(ArgT0&& arg0, ArgT... args) {
 
 buystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.buyString)
}
inline std::string* CGCharacterPersDesc::mutable_buystring() {
  std::string* _s = _internal_mutable_buystring();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterPersDesc.buyString)
  return _s;
}
inline const std::string& CGCharacterPersDesc::_internal_buystring() const {
  return buystring_.Get();
}
inline void CGCharacterPersDesc::_internal_set_buystring(const std::string& value) {
  
  buystring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::_internal_mutable_buystring() {
  
  return buystring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::release_buystring() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterPersDesc.buyString)
  return buystring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterPersDesc::set_allocated_buystring(std::string* buystring) {
  if (buystring != nullptr) {
    
  } else {
    
  }
  buystring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buystring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterPersDesc.buyString)
}

// int32 wantIcon = 6;
inline void CGCharacterPersDesc::clear_wanticon() {
  wanticon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::_internal_wanticon() const {
  return wanticon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterPersDesc::wanticon() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.wantIcon)
  return _internal_wanticon();
}
inline void CGCharacterPersDesc::_internal_set_wanticon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wanticon_ = value;
}
inline void CGCharacterPersDesc::set_wanticon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wanticon(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.wantIcon)
}

// string wantString = 7;
inline void CGCharacterPersDesc::clear_wantstring() {
  wantstring_.ClearToEmpty();
}
inline const std::string& CGCharacterPersDesc::wantstring() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.wantString)
  return _internal_wantstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterPersDesc::set_wantstring(ArgT0&& arg0, ArgT... args) {
 
 wantstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.wantString)
}
inline std::string* CGCharacterPersDesc::mutable_wantstring() {
  std::string* _s = _internal_mutable_wantstring();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterPersDesc.wantString)
  return _s;
}
inline const std::string& CGCharacterPersDesc::_internal_wantstring() const {
  return wantstring_.Get();
}
inline void CGCharacterPersDesc::_internal_set_wantstring(const std::string& value) {
  
  wantstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::_internal_mutable_wantstring() {
  
  return wantstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::release_wantstring() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterPersDesc.wantString)
  return wantstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterPersDesc::set_allocated_wantstring(std::string* wantstring) {
  if (wantstring != nullptr) {
    
  } else {
    
  }
  wantstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wantstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterPersDesc.wantString)
}

// string descString = 8;
inline void CGCharacterPersDesc::clear_descstring() {
  descstring_.ClearToEmpty();
}
inline const std::string& CGCharacterPersDesc::descstring() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterPersDesc.descString)
  return _internal_descstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterPersDesc::set_descstring(ArgT0&& arg0, ArgT... args) {
 
 descstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterPersDesc.descString)
}
inline std::string* CGCharacterPersDesc::mutable_descstring() {
  std::string* _s = _internal_mutable_descstring();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterPersDesc.descString)
  return _s;
}
inline const std::string& CGCharacterPersDesc::_internal_descstring() const {
  return descstring_.Get();
}
inline void CGCharacterPersDesc::_internal_set_descstring(const std::string& value) {
  
  descstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::_internal_mutable_descstring() {
  
  return descstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterPersDesc::release_descstring() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterPersDesc.descString)
  return descstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterPersDesc::set_allocated_descstring(std::string* descstring) {
  if (descstring != nullptr) {
    
  } else {
    
  }
  descstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterPersDesc.descString)
}

// -------------------------------------------------------------------

// CGCharacterData

// .CGData.CGBaseData base_data = 1;
inline bool CGCharacterData::_internal_has_base_data() const {
  return this != internal_default_instance() && base_data_ != nullptr;
}
inline bool CGCharacterData::has_base_data() const {
  return _internal_has_base_data();
}
inline void CGCharacterData::clear_base_data() {
  if (GetArenaForAllocation() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
}
inline const ::CGData::CGBaseData& CGCharacterData::_internal_base_data() const {
  const ::CGData::CGBaseData* p = base_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGBaseData&>(
      ::CGData::_CGBaseData_default_instance_);
}
inline const ::CGData::CGBaseData& CGCharacterData::base_data() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.base_data)
  return _internal_base_data();
}
inline void CGCharacterData::unsafe_arena_set_allocated_base_data(
    ::CGData::CGBaseData* base_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_);
  }
  base_data_ = base_data;
  if (base_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.CGCharacterData.base_data)
}
inline ::CGData::CGBaseData* CGCharacterData::release_base_data() {
  
  ::CGData::CGBaseData* temp = base_data_;
  base_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGBaseData* CGCharacterData::unsafe_arena_release_base_data() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.base_data)
  
  ::CGData::CGBaseData* temp = base_data_;
  base_data_ = nullptr;
  return temp;
}
inline ::CGData::CGBaseData* CGCharacterData::_internal_mutable_base_data() {
  
  if (base_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGBaseData>(GetArenaForAllocation());
    base_data_ = p;
  }
  return base_data_;
}
inline ::CGData::CGBaseData* CGCharacterData::mutable_base_data() {
  ::CGData::CGBaseData* _msg = _internal_mutable_base_data();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.base_data)
  return _msg;
}
inline void CGCharacterData::set_allocated_base_data(::CGData::CGBaseData* base_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_data_;
  }
  if (base_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGBaseData>::GetOwningArena(base_data);
    if (message_arena != submessage_arena) {
      base_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data, submessage_arena);
    }
    
  } else {
    
  }
  base_data_ = base_data;
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.base_data)
}

// int32 souls = 2;
inline void CGCharacterData::clear_souls() {
  souls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_souls() const {
  return souls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::souls() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.souls)
  return _internal_souls();
}
inline void CGCharacterData::_internal_set_souls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  souls_ = value;
}
inline void CGCharacterData::set_souls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_souls(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.souls)
}

// int32 level = 3;
inline void CGCharacterData::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.level)
  return _internal_level();
}
inline void CGCharacterData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGCharacterData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.level)
}

// int32 gold = 4;
inline void CGCharacterData::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::gold() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.gold)
  return _internal_gold();
}
inline void CGCharacterData::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
}
inline void CGCharacterData::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.gold)
}

// int32 image_id = 5;
inline void CGCharacterData::clear_image_id() {
  image_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_image_id() const {
  return image_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::image_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.image_id)
  return _internal_image_id();
}
inline void CGCharacterData::_internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_id_ = value;
}
inline void CGCharacterData::set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.image_id)
}

// int32 score = 6;
inline void CGCharacterData::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::score() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.score)
  return _internal_score();
}
inline void CGCharacterData::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void CGCharacterData::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.score)
}

// int32 skillslots = 7;
inline void CGCharacterData::clear_skillslots() {
  skillslots_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_skillslots() const {
  return skillslots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::skillslots() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.skillslots)
  return _internal_skillslots();
}
inline void CGCharacterData::_internal_set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skillslots_ = value;
}
inline void CGCharacterData::set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skillslots(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.skillslots)
}

// int32 use_title = 8;
inline void CGCharacterData::clear_use_title() {
  use_title_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_use_title() const {
  return use_title_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::use_title() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.use_title)
  return _internal_use_title();
}
inline void CGCharacterData::_internal_set_use_title(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_title_ = value;
}
inline void CGCharacterData::set_use_title(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_title(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.use_title)
}

// int32 avatar_id = 9;
inline void CGCharacterData::clear_avatar_id() {
  avatar_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_avatar_id() const {
  return avatar_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::avatar_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.avatar_id)
  return _internal_avatar_id();
}
inline void CGCharacterData::_internal_set_avatar_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_id_ = value;
}
inline void CGCharacterData::set_avatar_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.avatar_id)
}

// int32 unitid = 10;
inline void CGCharacterData::clear_unitid() {
  unitid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_unitid() const {
  return unitid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::unitid() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.unitid)
  return _internal_unitid();
}
inline void CGCharacterData::_internal_set_unitid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unitid_ = value;
}
inline void CGCharacterData::set_unitid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unitid(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.unitid)
}

// int32 petid = 11;
inline void CGCharacterData::clear_petid() {
  petid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_petid() const {
  return petid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::petid() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.petid)
  return _internal_petid();
}
inline void CGCharacterData::_internal_set_petid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  petid_ = value;
}
inline void CGCharacterData::set_petid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_petid(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.petid)
}

// bool petriding = 12;
inline void CGCharacterData::clear_petriding() {
  petriding_ = false;
}
inline bool CGCharacterData::_internal_petriding() const {
  return petriding_;
}
inline bool CGCharacterData::petriding() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.petriding)
  return _internal_petriding();
}
inline void CGCharacterData::_internal_set_petriding(bool value) {
  
  petriding_ = value;
}
inline void CGCharacterData::set_petriding(bool value) {
  _internal_set_petriding(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.petriding)
}

// int32 direction = 13;
inline void CGCharacterData::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::direction() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.direction)
  return _internal_direction();
}
inline void CGCharacterData::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void CGCharacterData::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.direction)
}

// int32 punchclock = 14;
inline void CGCharacterData::clear_punchclock() {
  punchclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_punchclock() const {
  return punchclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::punchclock() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.punchclock)
  return _internal_punchclock();
}
inline void CGCharacterData::_internal_set_punchclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  punchclock_ = value;
}
inline void CGCharacterData::set_punchclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_punchclock(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.punchclock)
}

// bool usingpunchclock = 15;
inline void CGCharacterData::clear_usingpunchclock() {
  usingpunchclock_ = false;
}
inline bool CGCharacterData::_internal_usingpunchclock() const {
  return usingpunchclock_;
}
inline bool CGCharacterData::usingpunchclock() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.usingpunchclock)
  return _internal_usingpunchclock();
}
inline void CGCharacterData::_internal_set_usingpunchclock(bool value) {
  
  usingpunchclock_ = value;
}
inline void CGCharacterData::set_usingpunchclock(bool value) {
  _internal_set_usingpunchclock(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.usingpunchclock)
}

// string job = 16;
inline void CGCharacterData::clear_job() {
  job_.ClearToEmpty();
}
inline const std::string& CGCharacterData::job() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.job)
  return _internal_job();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterData::set_job(ArgT0&& arg0, ArgT... args) {
 
 job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.job)
}
inline std::string* CGCharacterData::mutable_job() {
  std::string* _s = _internal_mutable_job();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.job)
  return _s;
}
inline const std::string& CGCharacterData::_internal_job() const {
  return job_.Get();
}
inline void CGCharacterData::_internal_set_job(const std::string& value) {
  
  job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterData::_internal_mutable_job() {
  
  return job_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterData::release_job() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.job)
  return job_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterData::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    
  } else {
    
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.job)
}

// repeated string titles = 17;
inline int CGCharacterData::_internal_titles_size() const {
  return titles_.size();
}
inline int CGCharacterData::titles_size() const {
  return _internal_titles_size();
}
inline void CGCharacterData::clear_titles() {
  titles_.Clear();
}
inline std::string* CGCharacterData::add_titles() {
  std::string* _s = _internal_add_titles();
  // @@protoc_insertion_point(field_add_mutable:CGData.CGCharacterData.titles)
  return _s;
}
inline const std::string& CGCharacterData::_internal_titles(int index) const {
  return titles_.Get(index);
}
inline const std::string& CGCharacterData::titles(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.titles)
  return _internal_titles(index);
}
inline std::string* CGCharacterData::mutable_titles(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.titles)
  return titles_.Mutable(index);
}
inline void CGCharacterData::set_titles(int index, const std::string& value) {
  titles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::set_titles(int index, std::string&& value) {
  titles_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::set_titles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  titles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::set_titles(int index, const char* value, size_t size) {
  titles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGData.CGCharacterData.titles)
}
inline std::string* CGCharacterData::_internal_add_titles() {
  return titles_.Add();
}
inline void CGCharacterData::add_titles(const std::string& value) {
  titles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::add_titles(std::string&& value) {
  titles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::add_titles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  titles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGData.CGCharacterData.titles)
}
inline void CGCharacterData::add_titles(const char* value, size_t size) {
  titles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGData.CGCharacterData.titles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGCharacterData::titles() const {
  // @@protoc_insertion_point(field_list:CGData.CGCharacterData.titles)
  return titles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGCharacterData::mutable_titles() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGCharacterData.titles)
  return &titles_;
}

// int32 manu_endurance = 18;
inline void CGCharacterData::clear_manu_endurance() {
  manu_endurance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_manu_endurance() const {
  return manu_endurance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::manu_endurance() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.manu_endurance)
  return _internal_manu_endurance();
}
inline void CGCharacterData::_internal_set_manu_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  manu_endurance_ = value;
}
inline void CGCharacterData::set_manu_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manu_endurance(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.manu_endurance)
}

// int32 manu_skillful = 19;
inline void CGCharacterData::clear_manu_skillful() {
  manu_skillful_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_manu_skillful() const {
  return manu_skillful_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::manu_skillful() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.manu_skillful)
  return _internal_manu_skillful();
}
inline void CGCharacterData::_internal_set_manu_skillful(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  manu_skillful_ = value;
}
inline void CGCharacterData::set_manu_skillful(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manu_skillful(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.manu_skillful)
}

// int32 manu_intelligence = 20;
inline void CGCharacterData::clear_manu_intelligence() {
  manu_intelligence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_manu_intelligence() const {
  return manu_intelligence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::manu_intelligence() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.manu_intelligence)
  return _internal_manu_intelligence();
}
inline void CGCharacterData::_internal_set_manu_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  manu_intelligence_ = value;
}
inline void CGCharacterData::set_manu_intelligence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manu_intelligence(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.manu_intelligence)
}

// int32 value_charisma = 21;
inline void CGCharacterData::clear_value_charisma() {
  value_charisma_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_value_charisma() const {
  return value_charisma_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::value_charisma() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.value_charisma)
  return _internal_value_charisma();
}
inline void CGCharacterData::_internal_set_value_charisma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_charisma_ = value;
}
inline void CGCharacterData::set_value_charisma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_charisma(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.value_charisma)
}

// int32 x = 22;
inline void CGCharacterData::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::x() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.x)
  return _internal_x();
}
inline void CGCharacterData::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CGCharacterData::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.x)
}

// int32 y = 23;
inline void CGCharacterData::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::y() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.y)
  return _internal_y();
}
inline void CGCharacterData::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CGCharacterData::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.y)
}

// string map_name = 24;
inline void CGCharacterData::clear_map_name() {
  map_name_.ClearToEmpty();
}
inline const std::string& CGCharacterData::map_name() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterData::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.map_name)
}
inline std::string* CGCharacterData::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.map_name)
  return _s;
}
inline const std::string& CGCharacterData::_internal_map_name() const {
  return map_name_.Get();
}
inline void CGCharacterData::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterData::_internal_mutable_map_name() {
  
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterData::release_map_name() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterData::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.map_name)
}

// int32 map_number = 25;
inline void CGCharacterData::clear_map_number() {
  map_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_map_number() const {
  return map_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::map_number() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.map_number)
  return _internal_map_number();
}
inline void CGCharacterData::_internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_number_ = value;
}
inline void CGCharacterData::set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_number(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.map_number)
}

// int32 server_line = 26;
inline void CGCharacterData::clear_server_line() {
  server_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_server_line() const {
  return server_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::server_line() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.server_line)
  return _internal_server_line();
}
inline void CGCharacterData::_internal_set_server_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_line_ = value;
}
inline void CGCharacterData::set_server_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_line(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.server_line)
}

// .CGData.CGAttrBaseData detail = 27;
inline bool CGCharacterData::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool CGCharacterData::has_detail() const {
  return _internal_has_detail();
}
inline void CGCharacterData::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::CGData::CGAttrBaseData& CGCharacterData::_internal_detail() const {
  const ::CGData::CGAttrBaseData* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGAttrBaseData&>(
      ::CGData::_CGAttrBaseData_default_instance_);
}
inline const ::CGData::CGAttrBaseData& CGCharacterData::detail() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.detail)
  return _internal_detail();
}
inline void CGCharacterData::unsafe_arena_set_allocated_detail(
    ::CGData::CGAttrBaseData* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.CGCharacterData.detail)
}
inline ::CGData::CGAttrBaseData* CGCharacterData::release_detail() {
  
  ::CGData::CGAttrBaseData* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGAttrBaseData* CGCharacterData::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.detail)
  
  ::CGData::CGAttrBaseData* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::CGData::CGAttrBaseData* CGCharacterData::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGAttrBaseData>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::CGData::CGAttrBaseData* CGCharacterData::mutable_detail() {
  ::CGData::CGAttrBaseData* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.detail)
  return _msg;
}
inline void CGCharacterData::set_allocated_detail(::CGData::CGAttrBaseData* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGAttrBaseData>::GetOwningArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.detail)
}

// repeated .CGData.CGSkillBaseData skill = 28;
inline int CGCharacterData::_internal_skill_size() const {
  return skill_.size();
}
inline int CGCharacterData::skill_size() const {
  return _internal_skill_size();
}
inline void CGCharacterData::clear_skill() {
  skill_.Clear();
}
inline ::CGData::CGSkillBaseData* CGCharacterData::mutable_skill(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.skill)
  return skill_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
CGCharacterData::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGCharacterData.skill)
  return &skill_;
}
inline const ::CGData::CGSkillBaseData& CGCharacterData::_internal_skill(int index) const {
  return skill_.Get(index);
}
inline const ::CGData::CGSkillBaseData& CGCharacterData::skill(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.skill)
  return _internal_skill(index);
}
inline ::CGData::CGSkillBaseData* CGCharacterData::_internal_add_skill() {
  return skill_.Add();
}
inline ::CGData::CGSkillBaseData* CGCharacterData::add_skill() {
  ::CGData::CGSkillBaseData* _add = _internal_add_skill();
  // @@protoc_insertion_point(field_add:CGData.CGCharacterData.skill)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
CGCharacterData::skill() const {
  // @@protoc_insertion_point(field_list:CGData.CGCharacterData.skill)
  return skill_;
}

// string nick = 29;
inline void CGCharacterData::clear_nick() {
  nick_.ClearToEmpty();
}
inline const std::string& CGCharacterData::nick() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCharacterData::set_nick(ArgT0&& arg0, ArgT... args) {
 
 nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.nick)
}
inline std::string* CGCharacterData::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.nick)
  return _s;
}
inline const std::string& CGCharacterData::_internal_nick() const {
  return nick_.Get();
}
inline void CGCharacterData::_internal_set_nick(const std::string& value) {
  
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGCharacterData::_internal_mutable_nick() {
  
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGCharacterData::release_nick() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.nick)
  return nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGCharacterData::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.nick)
}

// .CGData.CGCharacterPersDesc pers_desc = 30;
inline bool CGCharacterData::_internal_has_pers_desc() const {
  return this != internal_default_instance() && pers_desc_ != nullptr;
}
inline bool CGCharacterData::has_pers_desc() const {
  return _internal_has_pers_desc();
}
inline void CGCharacterData::clear_pers_desc() {
  if (GetArenaForAllocation() == nullptr && pers_desc_ != nullptr) {
    delete pers_desc_;
  }
  pers_desc_ = nullptr;
}
inline const ::CGData::CGCharacterPersDesc& CGCharacterData::_internal_pers_desc() const {
  const ::CGData::CGCharacterPersDesc* p = pers_desc_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGCharacterPersDesc&>(
      ::CGData::_CGCharacterPersDesc_default_instance_);
}
inline const ::CGData::CGCharacterPersDesc& CGCharacterData::pers_desc() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.pers_desc)
  return _internal_pers_desc();
}
inline void CGCharacterData::unsafe_arena_set_allocated_pers_desc(
    ::CGData::CGCharacterPersDesc* pers_desc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pers_desc_);
  }
  pers_desc_ = pers_desc;
  if (pers_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.CGCharacterData.pers_desc)
}
inline ::CGData::CGCharacterPersDesc* CGCharacterData::release_pers_desc() {
  
  ::CGData::CGCharacterPersDesc* temp = pers_desc_;
  pers_desc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGCharacterPersDesc* CGCharacterData::unsafe_arena_release_pers_desc() {
  // @@protoc_insertion_point(field_release:CGData.CGCharacterData.pers_desc)
  
  ::CGData::CGCharacterPersDesc* temp = pers_desc_;
  pers_desc_ = nullptr;
  return temp;
}
inline ::CGData::CGCharacterPersDesc* CGCharacterData::_internal_mutable_pers_desc() {
  
  if (pers_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGCharacterPersDesc>(GetArenaForAllocation());
    pers_desc_ = p;
  }
  return pers_desc_;
}
inline ::CGData::CGCharacterPersDesc* CGCharacterData::mutable_pers_desc() {
  ::CGData::CGCharacterPersDesc* _msg = _internal_mutable_pers_desc();
  // @@protoc_insertion_point(field_mutable:CGData.CGCharacterData.pers_desc)
  return _msg;
}
inline void CGCharacterData::set_allocated_pers_desc(::CGData::CGCharacterPersDesc* pers_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pers_desc_;
  }
  if (pers_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGCharacterPersDesc>::GetOwningArena(pers_desc);
    if (message_arena != submessage_arena) {
      pers_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pers_desc, submessage_arena);
    }
    
  } else {
    
  }
  pers_desc_ = pers_desc;
  // @@protoc_insertion_point(field_set_allocated:CGData.CGCharacterData.pers_desc)
}

// int32 battle_position = 31;
inline void CGCharacterData::clear_battle_position() {
  battle_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_battle_position() const {
  return battle_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::battle_position() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.battle_position)
  return _internal_battle_position();
}
inline void CGCharacterData::_internal_set_battle_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battle_position_ = value;
}
inline void CGCharacterData::set_battle_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battle_position(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.battle_position)
}

// int32 bank_gold = 32;
inline void CGCharacterData::clear_bank_gold() {
  bank_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_bank_gold() const {
  return bank_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::bank_gold() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.bank_gold)
  return _internal_bank_gold();
}
inline void CGCharacterData::_internal_set_bank_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bank_gold_ = value;
}
inline void CGCharacterData::set_bank_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bank_gold(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.bank_gold)
}

// optional int32 big_line = 33;
inline bool CGCharacterData::_internal_has_big_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCharacterData::has_big_line() const {
  return _internal_has_big_line();
}
inline void CGCharacterData::clear_big_line() {
  big_line_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::_internal_big_line() const {
  return big_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGCharacterData::big_line() const {
  // @@protoc_insertion_point(field_get:CGData.CGCharacterData.big_line)
  return _internal_big_line();
}
inline void CGCharacterData::_internal_set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  big_line_ = value;
}
inline void CGCharacterData::set_big_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_big_line(value);
  // @@protoc_insertion_point(field_set:CGData.CGCharacterData.big_line)
}

// -------------------------------------------------------------------

// CGPetData

// .CGData.CGBaseData base_data = 1;
inline bool CGPetData::_internal_has_base_data() const {
  return this != internal_default_instance() && base_data_ != nullptr;
}
inline bool CGPetData::has_base_data() const {
  return _internal_has_base_data();
}
inline void CGPetData::clear_base_data() {
  if (GetArenaForAllocation() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
}
inline const ::CGData::CGBaseData& CGPetData::_internal_base_data() const {
  const ::CGData::CGBaseData* p = base_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGBaseData&>(
      ::CGData::_CGBaseData_default_instance_);
}
inline const ::CGData::CGBaseData& CGPetData::base_data() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.base_data)
  return _internal_base_data();
}
inline void CGPetData::unsafe_arena_set_allocated_base_data(
    ::CGData::CGBaseData* base_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_);
  }
  base_data_ = base_data;
  if (base_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.CGPetData.base_data)
}
inline ::CGData::CGBaseData* CGPetData::release_base_data() {
  
  ::CGData::CGBaseData* temp = base_data_;
  base_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGBaseData* CGPetData::unsafe_arena_release_base_data() {
  // @@protoc_insertion_point(field_release:CGData.CGPetData.base_data)
  
  ::CGData::CGBaseData* temp = base_data_;
  base_data_ = nullptr;
  return temp;
}
inline ::CGData::CGBaseData* CGPetData::_internal_mutable_base_data() {
  
  if (base_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGBaseData>(GetArenaForAllocation());
    base_data_ = p;
  }
  return base_data_;
}
inline ::CGData::CGBaseData* CGPetData::mutable_base_data() {
  ::CGData::CGBaseData* _msg = _internal_mutable_base_data();
  // @@protoc_insertion_point(field_mutable:CGData.CGPetData.base_data)
  return _msg;
}
inline void CGPetData::set_allocated_base_data(::CGData::CGBaseData* base_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_data_;
  }
  if (base_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGBaseData>::GetOwningArena(base_data);
    if (message_arena != submessage_arena) {
      base_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data, submessage_arena);
    }
    
  } else {
    
  }
  base_data_ = base_data;
  // @@protoc_insertion_point(field_set_allocated:CGData.CGPetData.base_data)
}

// int32 index = 2;
inline void CGPetData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::index() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.index)
  return _internal_index();
}
inline void CGPetData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CGPetData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.index)
}

// int32 flags = 3;
inline void CGPetData::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::flags() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.flags)
  return _internal_flags();
}
inline void CGPetData::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void CGPetData::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.flags)
}

// int32 battle_flags = 4;
inline void CGPetData::clear_battle_flags() {
  battle_flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_battle_flags() const {
  return battle_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::battle_flags() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.battle_flags)
  return _internal_battle_flags();
}
inline void CGPetData::_internal_set_battle_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battle_flags_ = value;
}
inline void CGPetData::set_battle_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battle_flags(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.battle_flags)
}

// int32 loyality = 5;
inline void CGPetData::clear_loyality() {
  loyality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_loyality() const {
  return loyality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::loyality() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.loyality)
  return _internal_loyality();
}
inline void CGPetData::_internal_set_loyality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loyality_ = value;
}
inline void CGPetData::set_loyality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loyality(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.loyality)
}

// bool default_battle = 6;
inline void CGPetData::clear_default_battle() {
  default_battle_ = false;
}
inline bool CGPetData::_internal_default_battle() const {
  return default_battle_;
}
inline bool CGPetData::default_battle() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.default_battle)
  return _internal_default_battle();
}
inline void CGPetData::_internal_set_default_battle(bool value) {
  
  default_battle_ = value;
}
inline void CGPetData::set_default_battle(bool value) {
  _internal_set_default_battle(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.default_battle)
}

// int32 state = 7;
inline void CGPetData::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::state() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.state)
  return _internal_state();
}
inline void CGPetData::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void CGPetData::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.state)
}

// int32 grade = 8;
inline void CGPetData::clear_grade() {
  grade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_grade() const {
  return grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::grade() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.grade)
  return _internal_grade();
}
inline void CGPetData::_internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grade_ = value;
}
inline void CGPetData::set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.grade)
}

// int32 lossMinGrade = 9;
inline void CGPetData::clear_lossmingrade() {
  lossmingrade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_lossmingrade() const {
  return lossmingrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::lossmingrade() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.lossMinGrade)
  return _internal_lossmingrade();
}
inline void CGPetData::_internal_set_lossmingrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lossmingrade_ = value;
}
inline void CGPetData::set_lossmingrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lossmingrade(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.lossMinGrade)
}

// int32 lossMaxGrade = 10;
inline void CGPetData::clear_lossmaxgrade() {
  lossmaxgrade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_lossmaxgrade() const {
  return lossmaxgrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::lossmaxgrade() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.lossMaxGrade)
  return _internal_lossmaxgrade();
}
inline void CGPetData::_internal_set_lossmaxgrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lossmaxgrade_ = value;
}
inline void CGPetData::set_lossmaxgrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lossmaxgrade(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.lossMaxGrade)
}

// repeated .CGData.CGSkillBaseData skill = 11;
inline int CGPetData::_internal_skill_size() const {
  return skill_.size();
}
inline int CGPetData::skill_size() const {
  return _internal_skill_size();
}
inline void CGPetData::clear_skill() {
  skill_.Clear();
}
inline ::CGData::CGSkillBaseData* CGPetData::mutable_skill(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGPetData.skill)
  return skill_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >*
CGPetData::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGPetData.skill)
  return &skill_;
}
inline const ::CGData::CGSkillBaseData& CGPetData::_internal_skill(int index) const {
  return skill_.Get(index);
}
inline const ::CGData::CGSkillBaseData& CGPetData::skill(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.skill)
  return _internal_skill(index);
}
inline ::CGData::CGSkillBaseData* CGPetData::_internal_add_skill() {
  return skill_.Add();
}
inline ::CGData::CGSkillBaseData* CGPetData::add_skill() {
  ::CGData::CGSkillBaseData* _add = _internal_add_skill();
  // @@protoc_insertion_point(field_add:CGData.CGPetData.skill)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGSkillBaseData >&
CGPetData::skill() const {
  // @@protoc_insertion_point(field_list:CGData.CGPetData.skill)
  return skill_;
}

// .CGData.CGAttrBaseData detail = 12;
inline bool CGPetData::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool CGPetData::has_detail() const {
  return _internal_has_detail();
}
inline void CGPetData::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::CGData::CGAttrBaseData& CGPetData::_internal_detail() const {
  const ::CGData::CGAttrBaseData* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGData::CGAttrBaseData&>(
      ::CGData::_CGAttrBaseData_default_instance_);
}
inline const ::CGData::CGAttrBaseData& CGPetData::detail() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.detail)
  return _internal_detail();
}
inline void CGPetData::unsafe_arena_set_allocated_detail(
    ::CGData::CGAttrBaseData* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGData.CGPetData.detail)
}
inline ::CGData::CGAttrBaseData* CGPetData::release_detail() {
  
  ::CGData::CGAttrBaseData* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CGData::CGAttrBaseData* CGPetData::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:CGData.CGPetData.detail)
  
  ::CGData::CGAttrBaseData* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::CGData::CGAttrBaseData* CGPetData::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::CGData::CGAttrBaseData>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::CGData::CGAttrBaseData* CGPetData::mutable_detail() {
  ::CGData::CGAttrBaseData* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:CGData.CGPetData.detail)
  return _msg;
}
inline void CGPetData::set_allocated_detail(::CGData::CGAttrBaseData* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CGData::CGAttrBaseData>::GetOwningArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:CGData.CGPetData.detail)
}

// string real_name = 13;
inline void CGPetData::clear_real_name() {
  real_name_.ClearToEmpty();
}
inline const std::string& CGPetData::real_name() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGPetData::set_real_name(ArgT0&& arg0, ArgT... args) {
 
 real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGPetData.real_name)
}
inline std::string* CGPetData::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGPetData.real_name)
  return _s;
}
inline const std::string& CGPetData::_internal_real_name() const {
  return real_name_.Get();
}
inline void CGPetData::_internal_set_real_name(const std::string& value) {
  
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGPetData::_internal_mutable_real_name() {
  
  return real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGPetData::release_real_name() {
  // @@protoc_insertion_point(field_release:CGData.CGPetData.real_name)
  return real_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGPetData::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    
  } else {
    
  }
  real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGPetData.real_name)
}

// int32 race = 14;
inline void CGPetData::clear_race() {
  race_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_race() const {
  return race_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::race() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.race)
  return _internal_race();
}
inline void CGPetData::_internal_set_race(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  race_ = value;
}
inline void CGPetData::set_race(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.race)
}

// int32 skillslots = 15;
inline void CGPetData::clear_skillslots() {
  skillslots_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::_internal_skillslots() const {
  return skillslots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetData::skillslots() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetData.skillslots)
  return _internal_skillslots();
}
inline void CGPetData::_internal_set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skillslots_ = value;
}
inline void CGPetData::set_skillslots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skillslots(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetData.skillslots)
}

// -------------------------------------------------------------------

// CGItemData

// int32 image_id = 1;
inline void CGItemData::clear_image_id() {
  image_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_image_id() const {
  return image_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::image_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.image_id)
  return _internal_image_id();
}
inline void CGItemData::_internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_id_ = value;
}
inline void CGItemData::set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.image_id)
}

// int32 item_id = 2;
inline void CGItemData::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::item_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.item_id)
  return _internal_item_id();
}
inline void CGItemData::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void CGItemData::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.item_id)
}

// string name = 3;
inline void CGItemData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGItemData::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemData.name)
}
inline std::string* CGItemData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemData.name)
  return _s;
}
inline const std::string& CGItemData::_internal_name() const {
  return name_.Get();
}
inline void CGItemData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemData::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGItemData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemData.name)
}

// int32 type = 4;
inline void CGItemData::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::type() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.type)
  return _internal_type();
}
inline void CGItemData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CGItemData::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.type)
}

// int32 level = 5;
inline void CGItemData::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.level)
  return _internal_level();
}
inline void CGItemData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGItemData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.level)
}

// string attr = 6;
inline void CGItemData::clear_attr() {
  attr_.ClearToEmpty();
}
inline const std::string& CGItemData::attr() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.attr)
  return _internal_attr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemData::set_attr(ArgT0&& arg0, ArgT... args) {
 
 attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemData.attr)
}
inline std::string* CGItemData::mutable_attr() {
  std::string* _s = _internal_mutable_attr();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemData.attr)
  return _s;
}
inline const std::string& CGItemData::_internal_attr() const {
  return attr_.Get();
}
inline void CGItemData::_internal_set_attr(const std::string& value) {
  
  attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemData::_internal_mutable_attr() {
  
  return attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemData::release_attr() {
  // @@protoc_insertion_point(field_release:CGData.CGItemData.attr)
  return attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemData::set_allocated_attr(std::string* attr) {
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemData.attr)
}

// string info = 7;
inline void CGItemData::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& CGItemData::info() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemData::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemData.info)
}
inline std::string* CGItemData::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemData.info)
  return _s;
}
inline const std::string& CGItemData::_internal_info() const {
  return info_.Get();
}
inline void CGItemData::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemData::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemData::release_info() {
  // @@protoc_insertion_point(field_release:CGData.CGItemData.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemData::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemData.info)
}

// int32 pos = 8;
inline void CGItemData::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::pos() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.pos)
  return _internal_pos();
}
inline void CGItemData::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
}
inline void CGItemData::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.pos)
}

// bool assessed = 9;
inline void CGItemData::clear_assessed() {
  assessed_ = false;
}
inline bool CGItemData::_internal_assessed() const {
  return assessed_;
}
inline bool CGItemData::assessed() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.assessed)
  return _internal_assessed();
}
inline void CGItemData::_internal_set_assessed(bool value) {
  
  assessed_ = value;
}
inline void CGItemData::set_assessed(bool value) {
  _internal_set_assessed(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.assessed)
}

// int32 count = 10;
inline void CGItemData::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemData::count() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemData.count)
  return _internal_count();
}
inline void CGItemData::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CGItemData::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemData.count)
}

// -------------------------------------------------------------------

// CGStoreMapRequest

// int32 map_number = 1;
inline void CGStoreMapRequest::clear_map_number() {
  map_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreMapRequest::_internal_map_number() const {
  return map_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreMapRequest::map_number() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreMapRequest.map_number)
  return _internal_map_number();
}
inline void CGStoreMapRequest::_internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_number_ = value;
}
inline void CGStoreMapRequest::set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_number(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreMapRequest.map_number)
}

// string map_name = 2;
inline void CGStoreMapRequest::clear_map_name() {
  map_name_.ClearToEmpty();
}
inline const std::string& CGStoreMapRequest::map_name() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreMapRequest.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGStoreMapRequest::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGStoreMapRequest.map_name)
}
inline std::string* CGStoreMapRequest::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGStoreMapRequest.map_name)
  return _s;
}
inline const std::string& CGStoreMapRequest::_internal_map_name() const {
  return map_name_.Get();
}
inline void CGStoreMapRequest::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGStoreMapRequest::_internal_mutable_map_name() {
  
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGStoreMapRequest::release_map_name() {
  // @@protoc_insertion_point(field_release:CGData.CGStoreMapRequest.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGStoreMapRequest::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGStoreMapRequest.map_name)
}

// -------------------------------------------------------------------

// CGStoreMapResponse

// -------------------------------------------------------------------

// CGMapDataRequest

// -------------------------------------------------------------------

// CGMapDataResponse

// repeated .CGData.CGMapData maps = 1;
inline int CGMapDataResponse::_internal_maps_size() const {
  return maps_.size();
}
inline int CGMapDataResponse::maps_size() const {
  return _internal_maps_size();
}
inline void CGMapDataResponse::clear_maps() {
  maps_.Clear();
}
inline ::CGData::CGMapData* CGMapDataResponse::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGMapDataResponse.maps)
  return maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGMapData >*
CGMapDataResponse::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGMapDataResponse.maps)
  return &maps_;
}
inline const ::CGData::CGMapData& CGMapDataResponse::_internal_maps(int index) const {
  return maps_.Get(index);
}
inline const ::CGData::CGMapData& CGMapDataResponse::maps(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGMapDataResponse.maps)
  return _internal_maps(index);
}
inline ::CGData::CGMapData* CGMapDataResponse::_internal_add_maps() {
  return maps_.Add();
}
inline ::CGData::CGMapData* CGMapDataResponse::add_maps() {
  ::CGData::CGMapData* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:CGData.CGMapDataResponse.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGMapData >&
CGMapDataResponse::maps() const {
  // @@protoc_insertion_point(field_list:CGData.CGMapDataResponse.maps)
  return maps_;
}

// -------------------------------------------------------------------

// CGMapData

// uint64 id = 1;
inline void CGMapData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGMapData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGMapData::id() const {
  // @@protoc_insertion_point(field_get:CGData.CGMapData.id)
  return _internal_id();
}
inline void CGMapData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CGMapData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGMapData.id)
}

// int32 map_number = 2;
inline void CGMapData::clear_map_number() {
  map_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGMapData::_internal_map_number() const {
  return map_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGMapData::map_number() const {
  // @@protoc_insertion_point(field_get:CGData.CGMapData.map_number)
  return _internal_map_number();
}
inline void CGMapData::_internal_set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_number_ = value;
}
inline void CGMapData::set_map_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_number(value);
  // @@protoc_insertion_point(field_set:CGData.CGMapData.map_number)
}

// string map_name = 3;
inline void CGMapData::clear_map_name() {
  map_name_.ClearToEmpty();
}
inline const std::string& CGMapData::map_name() const {
  // @@protoc_insertion_point(field_get:CGData.CGMapData.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGMapData::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGMapData.map_name)
}
inline std::string* CGMapData::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGMapData.map_name)
  return _s;
}
inline const std::string& CGMapData::_internal_map_name() const {
  return map_name_.Get();
}
inline void CGMapData::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGMapData::_internal_mutable_map_name() {
  
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGMapData::release_map_name() {
  // @@protoc_insertion_point(field_release:CGData.CGMapData.map_name)
  return map_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGMapData::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGMapData.map_name)
}

// string desc = 4;
inline void CGMapData::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& CGMapData::desc() const {
  // @@protoc_insertion_point(field_get:CGData.CGMapData.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGMapData::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGMapData.desc)
}
inline std::string* CGMapData::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CGData.CGMapData.desc)
  return _s;
}
inline const std::string& CGMapData::_internal_desc() const {
  return desc_.Get();
}
inline void CGMapData::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGMapData::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGMapData::release_desc() {
  // @@protoc_insertion_point(field_release:CGData.CGMapData.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGMapData::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGMapData.desc)
}

// int32 often = 5;
inline void CGMapData::clear_often() {
  often_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGMapData::_internal_often() const {
  return often_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGMapData::often() const {
  // @@protoc_insertion_point(field_get:CGData.CGMapData.often)
  return _internal_often();
}
inline void CGMapData::_internal_set_often(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  often_ = value;
}
inline void CGMapData::set_often(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_often(value);
  // @@protoc_insertion_point(field_set:CGData.CGMapData.often)
}

// -------------------------------------------------------------------

// CGPetGradeCalcRequest

// -------------------------------------------------------------------

// CGPetGradeCalcResponse

// repeated .CGData.CGPetGradeCalcData pet = 1;
inline int CGPetGradeCalcResponse::_internal_pet_size() const {
  return pet_.size();
}
inline int CGPetGradeCalcResponse::pet_size() const {
  return _internal_pet_size();
}
inline void CGPetGradeCalcResponse::clear_pet() {
  pet_.Clear();
}
inline ::CGData::CGPetGradeCalcData* CGPetGradeCalcResponse::mutable_pet(int index) {
  // @@protoc_insertion_point(field_mutable:CGData.CGPetGradeCalcResponse.pet)
  return pet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetGradeCalcData >*
CGPetGradeCalcResponse::mutable_pet() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGPetGradeCalcResponse.pet)
  return &pet_;
}
inline const ::CGData::CGPetGradeCalcData& CGPetGradeCalcResponse::_internal_pet(int index) const {
  return pet_.Get(index);
}
inline const ::CGData::CGPetGradeCalcData& CGPetGradeCalcResponse::pet(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcResponse.pet)
  return _internal_pet(index);
}
inline ::CGData::CGPetGradeCalcData* CGPetGradeCalcResponse::_internal_add_pet() {
  return pet_.Add();
}
inline ::CGData::CGPetGradeCalcData* CGPetGradeCalcResponse::add_pet() {
  ::CGData::CGPetGradeCalcData* _add = _internal_add_pet();
  // @@protoc_insertion_point(field_add:CGData.CGPetGradeCalcResponse.pet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGData::CGPetGradeCalcData >&
CGPetGradeCalcResponse::pet() const {
  // @@protoc_insertion_point(field_list:CGData.CGPetGradeCalcResponse.pet)
  return pet_;
}

// -------------------------------------------------------------------

// CGPetGradeCalcData

// uint64 id = 1;
inline void CGPetGradeCalcData::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGPetGradeCalcData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGPetGradeCalcData::id() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.id)
  return _internal_id();
}
inline void CGPetGradeCalcData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CGPetGradeCalcData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.id)
}

// int32 number = 2;
inline void CGPetGradeCalcData::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::number() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.number)
  return _internal_number();
}
inline void CGPetGradeCalcData::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void CGPetGradeCalcData::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.number)
}

// string name = 3;
inline void CGPetGradeCalcData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGPetGradeCalcData::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGPetGradeCalcData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.name)
}
inline std::string* CGPetGradeCalcData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGPetGradeCalcData.name)
  return _s;
}
inline const std::string& CGPetGradeCalcData::_internal_name() const {
  return name_.Get();
}
inline void CGPetGradeCalcData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGPetGradeCalcData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGPetGradeCalcData::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGPetGradeCalcData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGPetGradeCalcData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGPetGradeCalcData.name)
}

// int32 raceType = 4;
inline void CGPetGradeCalcData::clear_racetype() {
  racetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_racetype() const {
  return racetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::racetype() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.raceType)
  return _internal_racetype();
}
inline void CGPetGradeCalcData::_internal_set_racetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  racetype_ = value;
}
inline void CGPetGradeCalcData::set_racetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_racetype(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.raceType)
}

// string raceTypeName = 5;
inline void CGPetGradeCalcData::clear_racetypename() {
  racetypename_.ClearToEmpty();
}
inline const std::string& CGPetGradeCalcData::racetypename() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.raceTypeName)
  return _internal_racetypename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGPetGradeCalcData::set_racetypename(ArgT0&& arg0, ArgT... args) {
 
 racetypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.raceTypeName)
}
inline std::string* CGPetGradeCalcData::mutable_racetypename() {
  std::string* _s = _internal_mutable_racetypename();
  // @@protoc_insertion_point(field_mutable:CGData.CGPetGradeCalcData.raceTypeName)
  return _s;
}
inline const std::string& CGPetGradeCalcData::_internal_racetypename() const {
  return racetypename_.Get();
}
inline void CGPetGradeCalcData::_internal_set_racetypename(const std::string& value) {
  
  racetypename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGPetGradeCalcData::_internal_mutable_racetypename() {
  
  return racetypename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGPetGradeCalcData::release_racetypename() {
  // @@protoc_insertion_point(field_release:CGData.CGPetGradeCalcData.raceTypeName)
  return racetypename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGPetGradeCalcData::set_allocated_racetypename(std::string* racetypename) {
  if (racetypename != nullptr) {
    
  } else {
    
  }
  racetypename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), racetypename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGPetGradeCalcData.raceTypeName)
}

// double baseBP = 6;
inline void CGPetGradeCalcData::clear_basebp() {
  basebp_ = 0;
}
inline double CGPetGradeCalcData::_internal_basebp() const {
  return basebp_;
}
inline double CGPetGradeCalcData::basebp() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.baseBP)
  return _internal_basebp();
}
inline void CGPetGradeCalcData::_internal_set_basebp(double value) {
  
  basebp_ = value;
}
inline void CGPetGradeCalcData::set_basebp(double value) {
  _internal_set_basebp(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.baseBP)
}

// int32 totalGrade = 7;
inline void CGPetGradeCalcData::clear_totalgrade() {
  totalgrade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_totalgrade() const {
  return totalgrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::totalgrade() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.totalGrade)
  return _internal_totalgrade();
}
inline void CGPetGradeCalcData::_internal_set_totalgrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalgrade_ = value;
}
inline void CGPetGradeCalcData::set_totalgrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalgrade(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.totalGrade)
}

// repeated double bestBPGrade = 8;
inline int CGPetGradeCalcData::_internal_bestbpgrade_size() const {
  return bestbpgrade_.size();
}
inline int CGPetGradeCalcData::bestbpgrade_size() const {
  return _internal_bestbpgrade_size();
}
inline void CGPetGradeCalcData::clear_bestbpgrade() {
  bestbpgrade_.Clear();
}
inline double CGPetGradeCalcData::_internal_bestbpgrade(int index) const {
  return bestbpgrade_.Get(index);
}
inline double CGPetGradeCalcData::bestbpgrade(int index) const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.bestBPGrade)
  return _internal_bestbpgrade(index);
}
inline void CGPetGradeCalcData::set_bestbpgrade(int index, double value) {
  bestbpgrade_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.bestBPGrade)
}
inline void CGPetGradeCalcData::_internal_add_bestbpgrade(double value) {
  bestbpgrade_.Add(value);
}
inline void CGPetGradeCalcData::add_bestbpgrade(double value) {
  _internal_add_bestbpgrade(value);
  // @@protoc_insertion_point(field_add:CGData.CGPetGradeCalcData.bestBPGrade)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CGPetGradeCalcData::_internal_bestbpgrade() const {
  return bestbpgrade_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CGPetGradeCalcData::bestbpgrade() const {
  // @@protoc_insertion_point(field_list:CGData.CGPetGradeCalcData.bestBPGrade)
  return _internal_bestbpgrade();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CGPetGradeCalcData::_internal_mutable_bestbpgrade() {
  return &bestbpgrade_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CGPetGradeCalcData::mutable_bestbpgrade() {
  // @@protoc_insertion_point(field_mutable_list:CGData.CGPetGradeCalcData.bestBPGrade)
  return _internal_mutable_bestbpgrade();
}

// int32 can_catch = 9;
inline void CGPetGradeCalcData::clear_can_catch() {
  can_catch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_can_catch() const {
  return can_catch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::can_catch() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.can_catch)
  return _internal_can_catch();
}
inline void CGPetGradeCalcData::_internal_set_can_catch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  can_catch_ = value;
}
inline void CGPetGradeCalcData::set_can_catch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_catch(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.can_catch)
}

// int32 card_type = 10;
inline void CGPetGradeCalcData::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::card_type() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.card_type)
  return _internal_card_type();
}
inline void CGPetGradeCalcData::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void CGPetGradeCalcData::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.card_type)
}

// int32 image_id = 11;
inline void CGPetGradeCalcData::clear_image_id() {
  image_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_image_id() const {
  return image_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::image_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.image_id)
  return _internal_image_id();
}
inline void CGPetGradeCalcData::_internal_set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_id_ = value;
}
inline void CGPetGradeCalcData::set_image_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.image_id)
}

// int32 rate_endurance = 12;
inline void CGPetGradeCalcData::clear_rate_endurance() {
  rate_endurance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_rate_endurance() const {
  return rate_endurance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::rate_endurance() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.rate_endurance)
  return _internal_rate_endurance();
}
inline void CGPetGradeCalcData::_internal_set_rate_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rate_endurance_ = value;
}
inline void CGPetGradeCalcData::set_rate_endurance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_endurance(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.rate_endurance)
}

// int32 rate_strength = 13;
inline void CGPetGradeCalcData::clear_rate_strength() {
  rate_strength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_rate_strength() const {
  return rate_strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::rate_strength() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.rate_strength)
  return _internal_rate_strength();
}
inline void CGPetGradeCalcData::_internal_set_rate_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rate_strength_ = value;
}
inline void CGPetGradeCalcData::set_rate_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_strength(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.rate_strength)
}

// int32 rate_defense = 14;
inline void CGPetGradeCalcData::clear_rate_defense() {
  rate_defense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_rate_defense() const {
  return rate_defense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::rate_defense() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.rate_defense)
  return _internal_rate_defense();
}
inline void CGPetGradeCalcData::_internal_set_rate_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rate_defense_ = value;
}
inline void CGPetGradeCalcData::set_rate_defense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_defense(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.rate_defense)
}

// int32 rate_agility = 15;
inline void CGPetGradeCalcData::clear_rate_agility() {
  rate_agility_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_rate_agility() const {
  return rate_agility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::rate_agility() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.rate_agility)
  return _internal_rate_agility();
}
inline void CGPetGradeCalcData::_internal_set_rate_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rate_agility_ = value;
}
inline void CGPetGradeCalcData::set_rate_agility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_agility(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.rate_agility)
}

// int32 rate_magical = 16;
inline void CGPetGradeCalcData::clear_rate_magical() {
  rate_magical_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_rate_magical() const {
  return rate_magical_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::rate_magical() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.rate_magical)
  return _internal_rate_magical();
}
inline void CGPetGradeCalcData::_internal_set_rate_magical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rate_magical_ = value;
}
inline void CGPetGradeCalcData::set_rate_magical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rate_magical(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.rate_magical)
}

// int32 element_earth = 17;
inline void CGPetGradeCalcData::clear_element_earth() {
  element_earth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_element_earth() const {
  return element_earth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::element_earth() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.element_earth)
  return _internal_element_earth();
}
inline void CGPetGradeCalcData::_internal_set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_earth_ = value;
}
inline void CGPetGradeCalcData::set_element_earth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_earth(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.element_earth)
}

// int32 element_water = 18;
inline void CGPetGradeCalcData::clear_element_water() {
  element_water_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_element_water() const {
  return element_water_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::element_water() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.element_water)
  return _internal_element_water();
}
inline void CGPetGradeCalcData::_internal_set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_water_ = value;
}
inline void CGPetGradeCalcData::set_element_water(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_water(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.element_water)
}

// int32 element_fire = 19;
inline void CGPetGradeCalcData::clear_element_fire() {
  element_fire_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_element_fire() const {
  return element_fire_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::element_fire() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.element_fire)
  return _internal_element_fire();
}
inline void CGPetGradeCalcData::_internal_set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_fire_ = value;
}
inline void CGPetGradeCalcData::set_element_fire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_fire(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.element_fire)
}

// int32 element_wind = 20;
inline void CGPetGradeCalcData::clear_element_wind() {
  element_wind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_element_wind() const {
  return element_wind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::element_wind() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.element_wind)
  return _internal_element_wind();
}
inline void CGPetGradeCalcData::_internal_set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_wind_ = value;
}
inline void CGPetGradeCalcData::set_element_wind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_wind(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.element_wind)
}

// int32 skill_slots = 21;
inline void CGPetGradeCalcData::clear_skill_slots() {
  skill_slots_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::_internal_skill_slots() const {
  return skill_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPetGradeCalcData::skill_slots() const {
  // @@protoc_insertion_point(field_get:CGData.CGPetGradeCalcData.skill_slots)
  return _internal_skill_slots();
}
inline void CGPetGradeCalcData::_internal_set_skill_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skill_slots_ = value;
}
inline void CGPetGradeCalcData::set_skill_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skill_slots(value);
  // @@protoc_insertion_point(field_set:CGData.CGPetGradeCalcData.skill_slots)
}

// -------------------------------------------------------------------

// CGItemRequest

// int32 item_id = 1;
inline void CGItemRequest::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemRequest::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemRequest.item_id)
  return _internal_item_id();
}
inline void CGItemRequest::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void CGItemRequest::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemRequest.item_id)
}

// -------------------------------------------------------------------

// CGItemResponse

// uint64 id = 1;
inline void CGItemResponse::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGItemResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGItemResponse::id() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.id)
  return _internal_id();
}
inline void CGItemResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CGItemResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.id)
}

// int32 item_id = 2;
inline void CGItemResponse::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::item_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.item_id)
  return _internal_item_id();
}
inline void CGItemResponse::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void CGItemResponse::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.item_id)
}

// string name = 3;
inline void CGItemResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGItemResponse::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.name)
}
inline std::string* CGItemResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemResponse.name)
  return _s;
}
inline const std::string& CGItemResponse::_internal_name() const {
  return name_.Get();
}
inline void CGItemResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemResponse::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGItemResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemResponse.name)
}

// int32 type = 4;
inline void CGItemResponse::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::type() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.type)
  return _internal_type();
}
inline void CGItemResponse::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CGItemResponse::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.type)
}

// int32 price = 5;
inline void CGItemResponse::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::price() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.price)
  return _internal_price();
}
inline void CGItemResponse::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void CGItemResponse::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.price)
}

// int32 maxpile = 6;
inline void CGItemResponse::clear_maxpile() {
  maxpile_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_maxpile() const {
  return maxpile_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::maxpile() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.maxpile)
  return _internal_maxpile();
}
inline void CGItemResponse::_internal_set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxpile_ = value;
}
inline void CGItemResponse::set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxpile(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.maxpile)
}

// int32 level = 7;
inline void CGItemResponse::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.level)
  return _internal_level();
}
inline void CGItemResponse::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGItemResponse::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.level)
}

// int32 sellLimitCount = 8;
inline void CGItemResponse::clear_selllimitcount() {
  selllimitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::_internal_selllimitcount() const {
  return selllimitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGItemResponse::selllimitcount() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.sellLimitCount)
  return _internal_selllimitcount();
}
inline void CGItemResponse::_internal_set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selllimitcount_ = value;
}
inline void CGItemResponse::set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selllimitcount(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.sellLimitCount)
}

// string attribute = 9;
inline void CGItemResponse::clear_attribute() {
  attribute_.ClearToEmpty();
}
inline const std::string& CGItemResponse::attribute() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemResponse::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.attribute)
}
inline std::string* CGItemResponse::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemResponse.attribute)
  return _s;
}
inline const std::string& CGItemResponse::_internal_attribute() const {
  return attribute_.Get();
}
inline void CGItemResponse::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemResponse::_internal_mutable_attribute() {
  
  return attribute_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemResponse::release_attribute() {
  // @@protoc_insertion_point(field_release:CGData.CGItemResponse.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemResponse::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemResponse.attribute)
}

// string desc = 10;
inline void CGItemResponse::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& CGItemResponse::desc() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGItemResponse::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.desc)
}
inline std::string* CGItemResponse::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CGData.CGItemResponse.desc)
  return _s;
}
inline const std::string& CGItemResponse::_internal_desc() const {
  return desc_.Get();
}
inline void CGItemResponse::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGItemResponse::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGItemResponse::release_desc() {
  // @@protoc_insertion_point(field_release:CGData.CGItemResponse.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGItemResponse::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGItemResponse.desc)
}

// bool exist = 11;
inline void CGItemResponse::clear_exist() {
  exist_ = false;
}
inline bool CGItemResponse::_internal_exist() const {
  return exist_;
}
inline bool CGItemResponse::exist() const {
  // @@protoc_insertion_point(field_get:CGData.CGItemResponse.exist)
  return _internal_exist();
}
inline void CGItemResponse::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void CGItemResponse::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:CGData.CGItemResponse.exist)
}

// -------------------------------------------------------------------

// CGStoreItemRequest

// int32 item_id = 1;
inline void CGStoreItemRequest::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.item_id)
  return _internal_item_id();
}
inline void CGStoreItemRequest::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void CGStoreItemRequest::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.item_id)
}

// string name = 2;
inline void CGStoreItemRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CGStoreItemRequest::name() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGStoreItemRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.name)
}
inline std::string* CGStoreItemRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGData.CGStoreItemRequest.name)
  return _s;
}
inline const std::string& CGStoreItemRequest::_internal_name() const {
  return name_.Get();
}
inline void CGStoreItemRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::release_name() {
  // @@protoc_insertion_point(field_release:CGData.CGStoreItemRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGStoreItemRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGStoreItemRequest.name)
}

// int32 type = 3;
inline void CGStoreItemRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::type() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.type)
  return _internal_type();
}
inline void CGStoreItemRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CGStoreItemRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.type)
}

// int32 price = 4;
inline void CGStoreItemRequest::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::price() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.price)
  return _internal_price();
}
inline void CGStoreItemRequest::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void CGStoreItemRequest::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.price)
}

// int32 maxpile = 5;
inline void CGStoreItemRequest::clear_maxpile() {
  maxpile_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_maxpile() const {
  return maxpile_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::maxpile() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.maxpile)
  return _internal_maxpile();
}
inline void CGStoreItemRequest::_internal_set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxpile_ = value;
}
inline void CGStoreItemRequest::set_maxpile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxpile(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.maxpile)
}

// int32 level = 6;
inline void CGStoreItemRequest::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::level() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.level)
  return _internal_level();
}
inline void CGStoreItemRequest::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CGStoreItemRequest::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.level)
}

// int32 sellLimitCount = 7;
inline void CGStoreItemRequest::clear_selllimitcount() {
  selllimitcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::_internal_selllimitcount() const {
  return selllimitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemRequest::selllimitcount() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.sellLimitCount)
  return _internal_selllimitcount();
}
inline void CGStoreItemRequest::_internal_set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selllimitcount_ = value;
}
inline void CGStoreItemRequest::set_selllimitcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selllimitcount(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.sellLimitCount)
}

// string attribute = 8;
inline void CGStoreItemRequest::clear_attribute() {
  attribute_.ClearToEmpty();
}
inline const std::string& CGStoreItemRequest::attribute() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGStoreItemRequest::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.attribute)
}
inline std::string* CGStoreItemRequest::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:CGData.CGStoreItemRequest.attribute)
  return _s;
}
inline const std::string& CGStoreItemRequest::_internal_attribute() const {
  return attribute_.Get();
}
inline void CGStoreItemRequest::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::_internal_mutable_attribute() {
  
  return attribute_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::release_attribute() {
  // @@protoc_insertion_point(field_release:CGData.CGStoreItemRequest.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGStoreItemRequest::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGStoreItemRequest.attribute)
}

// string desc = 9;
inline void CGStoreItemRequest::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& CGStoreItemRequest::desc() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGStoreItemRequest::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.desc)
}
inline std::string* CGStoreItemRequest::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CGData.CGStoreItemRequest.desc)
  return _s;
}
inline const std::string& CGStoreItemRequest::_internal_desc() const {
  return desc_.Get();
}
inline void CGStoreItemRequest::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGStoreItemRequest::release_desc() {
  // @@protoc_insertion_point(field_release:CGData.CGStoreItemRequest.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGStoreItemRequest::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGStoreItemRequest.desc)
}

// bool assessed = 10;
inline void CGStoreItemRequest::clear_assessed() {
  assessed_ = false;
}
inline bool CGStoreItemRequest::_internal_assessed() const {
  return assessed_;
}
inline bool CGStoreItemRequest::assessed() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemRequest.assessed)
  return _internal_assessed();
}
inline void CGStoreItemRequest::_internal_set_assessed(bool value) {
  
  assessed_ = value;
}
inline void CGStoreItemRequest::set_assessed(bool value) {
  _internal_set_assessed(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemRequest.assessed)
}

// -------------------------------------------------------------------

// CGStoreItemResponse

// int32 id = 1;
inline void CGStoreItemResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGStoreItemResponse::id() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemResponse.id)
  return _internal_id();
}
inline void CGStoreItemResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CGStoreItemResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemResponse.id)
}

// string maybeName = 2;
inline void CGStoreItemResponse::clear_maybename() {
  maybename_.ClearToEmpty();
}
inline const std::string& CGStoreItemResponse::maybename() const {
  // @@protoc_insertion_point(field_get:CGData.CGStoreItemResponse.maybeName)
  return _internal_maybename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGStoreItemResponse::set_maybename(ArgT0&& arg0, ArgT... args) {
 
 maybename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGData.CGStoreItemResponse.maybeName)
}
inline std::string* CGStoreItemResponse::mutable_maybename() {
  std::string* _s = _internal_mutable_maybename();
  // @@protoc_insertion_point(field_mutable:CGData.CGStoreItemResponse.maybeName)
  return _s;
}
inline const std::string& CGStoreItemResponse::_internal_maybename() const {
  return maybename_.Get();
}
inline void CGStoreItemResponse::_internal_set_maybename(const std::string& value) {
  
  maybename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGStoreItemResponse::_internal_mutable_maybename() {
  
  return maybename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGStoreItemResponse::release_maybename() {
  // @@protoc_insertion_point(field_release:CGData.CGStoreItemResponse.maybeName)
  return maybename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CGStoreItemResponse::set_allocated_maybename(std::string* maybename) {
  if (maybename != nullptr) {
    
  } else {
    
  }
  maybename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maybename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CGData.CGStoreItemResponse.maybeName)
}

// -------------------------------------------------------------------

// CGVoidData

// -------------------------------------------------------------------

// CGBoolData

// bool val = 1;
inline void CGBoolData::clear_val() {
  val_ = false;
}
inline bool CGBoolData::_internal_val() const {
  return val_;
}
inline bool CGBoolData::val() const {
  // @@protoc_insertion_point(field_get:CGData.CGBoolData.val)
  return _internal_val();
}
inline void CGBoolData::_internal_set_val(bool value) {
  
  val_ = value;
}
inline void CGBoolData::set_val(bool value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:CGData.CGBoolData.val)
}

// -------------------------------------------------------------------

// CGIntData

// int32 val = 1;
inline void CGIntData::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGIntData::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGIntData::val() const {
  // @@protoc_insertion_point(field_get:CGData.CGIntData.val)
  return _internal_val();
}
inline void CGIntData::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
}
inline void CGIntData::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:CGData.CGIntData.val)
}

// -------------------------------------------------------------------

// CGSysTimeResponse

// int32 years = 1;
inline void CGSysTimeResponse::clear_years() {
  years_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_years() const {
  return years_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::years() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.years)
  return _internal_years();
}
inline void CGSysTimeResponse::_internal_set_years(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  years_ = value;
}
inline void CGSysTimeResponse::set_years(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_years(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.years)
}

// int32 month = 2;
inline void CGSysTimeResponse::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::month() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.month)
  return _internal_month();
}
inline void CGSysTimeResponse::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void CGSysTimeResponse::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.month)
}

// int32 days = 3;
inline void CGSysTimeResponse::clear_days() {
  days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::days() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.days)
  return _internal_days();
}
inline void CGSysTimeResponse::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  days_ = value;
}
inline void CGSysTimeResponse::set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.days)
}

// int32 hours = 4;
inline void CGSysTimeResponse::clear_hours() {
  hours_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::hours() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.hours)
  return _internal_hours();
}
inline void CGSysTimeResponse::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hours_ = value;
}
inline void CGSysTimeResponse::set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.hours)
}

// int32 mins = 5;
inline void CGSysTimeResponse::clear_mins() {
  mins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_mins() const {
  return mins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::mins() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.mins)
  return _internal_mins();
}
inline void CGSysTimeResponse::_internal_set_mins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins_ = value;
}
inline void CGSysTimeResponse::set_mins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.mins)
}

// int32 secs = 6;
inline void CGSysTimeResponse::clear_secs() {
  secs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_secs() const {
  return secs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::secs() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.secs)
  return _internal_secs();
}
inline void CGSysTimeResponse::_internal_set_secs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secs_ = value;
}
inline void CGSysTimeResponse::set_secs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secs(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.secs)
}

// int32 local_time = 7;
inline void CGSysTimeResponse::clear_local_time() {
  local_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_local_time() const {
  return local_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::local_time() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.local_time)
  return _internal_local_time();
}
inline void CGSysTimeResponse::_internal_set_local_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  local_time_ = value;
}
inline void CGSysTimeResponse::set_local_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_local_time(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.local_time)
}

// int32 server_time = 8;
inline void CGSysTimeResponse::clear_server_time() {
  server_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGSysTimeResponse::server_time() const {
  // @@protoc_insertion_point(field_get:CGData.CGSysTimeResponse.server_time)
  return _internal_server_time();
}
inline void CGSysTimeResponse::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_time_ = value;
}
inline void CGSysTimeResponse::set_server_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CGData.CGSysTimeResponse.server_time)
}

// -------------------------------------------------------------------

// CGPlayerFlagEnabledData

// int32 index = 1;
inline void CGPlayerFlagEnabledData::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPlayerFlagEnabledData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGPlayerFlagEnabledData::index() const {
  // @@protoc_insertion_point(field_get:CGData.CGPlayerFlagEnabledData.index)
  return _internal_index();
}
inline void CGPlayerFlagEnabledData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void CGPlayerFlagEnabledData::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CGData.CGPlayerFlagEnabledData.index)
}

// bool enable = 2;
inline void CGPlayerFlagEnabledData::clear_enable() {
  enable_ = false;
}
inline bool CGPlayerFlagEnabledData::_internal_enable() const {
  return enable_;
}
inline bool CGPlayerFlagEnabledData::enable() const {
  // @@protoc_insertion_point(field_get:CGData.CGPlayerFlagEnabledData.enable)
  return _internal_enable();
}
inline void CGPlayerFlagEnabledData::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void CGPlayerFlagEnabledData::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:CGData.CGPlayerFlagEnabledData.enable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CGData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CGData_2eproto
