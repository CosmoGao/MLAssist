// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CGData.proto

#include "CGData.pb.h"
#include "CGData.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CGData {

static const char* MLRpcService_method_names[] = {
  "/CGData.MLRpcService/Initialize",
  "/CGData.MLRpcService/Connect",
  "/CGData.MLRpcService/IsInGame",
  "/CGData.MLRpcService/GetWorldStatus",
  "/CGData.MLRpcService/GetGameStatus",
  "/CGData.MLRpcService/GetBGMIndex",
  "/CGData.MLRpcService/GetSysTime",
  "/CGData.MLRpcService/GetPlayerInfo",
  "/CGData.MLRpcService/SetPlayerFlagEnabled",
};

std::unique_ptr< MLRpcService::Stub> MLRpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MLRpcService::Stub> stub(new MLRpcService::Stub(channel, options));
  return stub;
}

MLRpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Initialize_(MLRpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(MLRpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsInGame_(MLRpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorldStatus_(MLRpcService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGameStatus_(MLRpcService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBGMIndex_(MLRpcService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSysTime_(MLRpcService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerInfo_(MLRpcService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlayerFlagEnabled_(MLRpcService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MLRpcService::Stub::Initialize(::grpc::ClientContext* context, const ::CGData::CGGmeTypeRequest& request, ::CGData::CGVoidData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGGmeTypeRequest, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void MLRpcService::Stub::async::Initialize(::grpc::ClientContext* context, const ::CGData::CGGmeTypeRequest* request, ::CGData::CGVoidData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGGmeTypeRequest, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::Initialize(::grpc::ClientContext* context, const ::CGData::CGGmeTypeRequest* request, ::CGData::CGVoidData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* MLRpcService::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::CGData::CGGmeTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGVoidData, ::CGData::CGGmeTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Initialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* MLRpcService::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::CGData::CGGmeTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::Connect(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGBoolData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGBoolData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void MLRpcService::Stub::async::Connect(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGBoolData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGBoolData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::Connect(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGBoolData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGBoolData>* MLRpcService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGBoolData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGBoolData>* MLRpcService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::IsInGame(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGIntData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsInGame_, context, request, response);
}

void MLRpcService::Stub::async::IsInGame(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsInGame_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::IsInGame(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsInGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::PrepareAsyncIsInGameRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGIntData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsInGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::AsyncIsInGameRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsInGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::GetWorldStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGIntData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWorldStatus_, context, request, response);
}

void MLRpcService::Stub::async::GetWorldStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorldStatus_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::GetWorldStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorldStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::PrepareAsyncGetWorldStatusRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGIntData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWorldStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::AsyncGetWorldStatusRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorldStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::GetGameStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGIntData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGameStatus_, context, request, response);
}

void MLRpcService::Stub::async::GetGameStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameStatus_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::GetGameStatus(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::PrepareAsyncGetGameStatusRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGIntData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGameStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::AsyncGetGameStatusRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGameStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::GetBGMIndex(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGIntData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBGMIndex_, context, request, response);
}

void MLRpcService::Stub::async::GetBGMIndex(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBGMIndex_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::GetBGMIndex(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBGMIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::PrepareAsyncGetBGMIndexRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGIntData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBGMIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGIntData>* MLRpcService::Stub::AsyncGetBGMIndexRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBGMIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::GetSysTime(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGSysTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGSysTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSysTime_, context, request, response);
}

void MLRpcService::Stub::async::GetSysTime(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGSysTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGSysTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSysTime_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::GetSysTime(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGSysTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSysTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGSysTimeResponse>* MLRpcService::Stub::PrepareAsyncGetSysTimeRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGSysTimeResponse, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSysTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGSysTimeResponse>* MLRpcService::Stub::AsyncGetSysTimeRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSysTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::GetPlayerInfo(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGCharacterData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGCharacterData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlayerInfo_, context, request, response);
}

void MLRpcService::Stub::async::GetPlayerInfo(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGCharacterData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGCharacterData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::GetPlayerInfo(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGCharacterData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGCharacterData>* MLRpcService::Stub::PrepareAsyncGetPlayerInfoRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGCharacterData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlayerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGCharacterData>* MLRpcService::Stub::AsyncGetPlayerInfoRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlayerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MLRpcService::Stub::SetPlayerFlagEnabled(::grpc::ClientContext* context, const ::CGData::CGPlayerFlagEnabledData& request, ::CGData::CGVoidData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGPlayerFlagEnabledData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPlayerFlagEnabled_, context, request, response);
}

void MLRpcService::Stub::async::SetPlayerFlagEnabled(::grpc::ClientContext* context, const ::CGData::CGPlayerFlagEnabledData* request, ::CGData::CGVoidData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGPlayerFlagEnabledData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerFlagEnabled_, context, request, response, std::move(f));
}

void MLRpcService::Stub::async::SetPlayerFlagEnabled(::grpc::ClientContext* context, const ::CGData::CGPlayerFlagEnabledData* request, ::CGData::CGVoidData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerFlagEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* MLRpcService::Stub::PrepareAsyncSetPlayerFlagEnabledRaw(::grpc::ClientContext* context, const ::CGData::CGPlayerFlagEnabledData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGVoidData, ::CGData::CGPlayerFlagEnabledData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPlayerFlagEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* MLRpcService::Stub::AsyncSetPlayerFlagEnabledRaw(::grpc::ClientContext* context, const ::CGData::CGPlayerFlagEnabledData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPlayerFlagEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

MLRpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGGmeTypeRequest, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGGmeTypeRequest* req,
             ::CGData::CGVoidData* resp) {
               return service->Initialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGBoolData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGBoolData* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGIntData* resp) {
               return service->IsInGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGIntData* resp) {
               return service->GetWorldStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGIntData* resp) {
               return service->GetGameStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGIntData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGIntData* resp) {
               return service->GetBGMIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGSysTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGSysTimeResponse* resp) {
               return service->GetSysTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGVoidData, ::CGData::CGCharacterData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGCharacterData* resp) {
               return service->GetPlayerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MLRpcService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MLRpcService::Service, ::CGData::CGPlayerFlagEnabledData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MLRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGPlayerFlagEnabledData* req,
             ::CGData::CGVoidData* resp) {
               return service->SetPlayerFlagEnabled(ctx, req, resp);
             }, this)));
}

MLRpcService::Service::~Service() {
}

::grpc::Status MLRpcService::Service::Initialize(::grpc::ServerContext* context, const ::CGData::CGGmeTypeRequest* request, ::CGData::CGVoidData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::Connect(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGBoolData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::IsInGame(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::GetWorldStatus(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::GetGameStatus(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::GetBGMIndex(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGIntData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::GetSysTime(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGSysTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::GetPlayerInfo(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGCharacterData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MLRpcService::Service::SetPlayerFlagEnabled(::grpc::ServerContext* context, const ::CGData::CGPlayerFlagEnabledData* request, ::CGData::CGVoidData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CGRpcService_method_names[] = {
  "/CGData.CGRpcService/GetCGItemData",
  "/CGData.CGRpcService/GetConnectState",
  "/CGData.CGRpcService/GetPetGradeCalcData",
  "/CGData.CGRpcService/GetServerStoreMapData",
  "/CGData.CGRpcService/StoreCGItemData",
  "/CGData.CGRpcService/StoreCGMapData",
  "/CGData.CGRpcService/UploadGidData",
  "/CGData.CGRpcService/UploadGidBankData",
  "/CGData.CGRpcService/UploadMapData",
  "/CGData.CGRpcService/DownloadMapData",
  "/CGData.CGRpcService/UploadCharcterServer",
  "/CGData.CGRpcService/Publish",
  "/CGData.CGRpcService/Subscribe",
  "/CGData.CGRpcService/SelectAccountGidData",
  "/CGData.CGRpcService/SelectGidData",
  "/CGData.CGRpcService/SelectDstTypeGidData",
  "/CGData.CGRpcService/SelectCharacterServer",
  "/CGData.CGRpcService/SelectTaskInfo",
  "/CGData.CGRpcService/SelectCharacterData",
};

std::unique_ptr< CGRpcService::Stub> CGRpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CGRpcService::Stub> stub(new CGRpcService::Stub(channel, options));
  return stub;
}

CGRpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCGItemData_(CGRpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConnectState_(CGRpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPetGradeCalcData_(CGRpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerStoreMapData_(CGRpcService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreCGItemData_(CGRpcService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreCGMapData_(CGRpcService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadGidData_(CGRpcService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadGidBankData_(CGRpcService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadMapData_(CGRpcService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DownloadMapData_(CGRpcService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UploadCharcterServer_(CGRpcService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Publish_(CGRpcService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(CGRpcService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SelectAccountGidData_(CGRpcService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectGidData_(CGRpcService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectDstTypeGidData_(CGRpcService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectCharacterServer_(CGRpcService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectTaskInfo_(CGRpcService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectCharacterData_(CGRpcService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CGRpcService::Stub::GetCGItemData(::grpc::ClientContext* context, const ::CGData::CGItemRequest& request, ::CGData::CGItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGItemRequest, ::CGData::CGItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCGItemData_, context, request, response);
}

void CGRpcService::Stub::async::GetCGItemData(::grpc::ClientContext* context, const ::CGData::CGItemRequest* request, ::CGData::CGItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGItemRequest, ::CGData::CGItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCGItemData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::GetCGItemData(::grpc::ClientContext* context, const ::CGData::CGItemRequest* request, ::CGData::CGItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCGItemData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGItemResponse>* CGRpcService::Stub::PrepareAsyncGetCGItemDataRaw(::grpc::ClientContext* context, const ::CGData::CGItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGItemResponse, ::CGData::CGItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCGItemData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGItemResponse>* CGRpcService::Stub::AsyncGetCGItemDataRaw(::grpc::ClientContext* context, const ::CGData::CGItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCGItemDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::GetConnectState(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::CGData::CGVoidData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGVoidData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConnectState_, context, request, response);
}

void CGRpcService::Stub::async::GetConnectState(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGVoidData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGVoidData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnectState_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::GetConnectState(::grpc::ClientContext* context, const ::CGData::CGVoidData* request, ::CGData::CGVoidData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnectState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* CGRpcService::Stub::PrepareAsyncGetConnectStateRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGVoidData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConnectState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGVoidData>* CGRpcService::Stub::AsyncGetConnectStateRaw(::grpc::ClientContext* context, const ::CGData::CGVoidData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConnectStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::GetPetGradeCalcData(::grpc::ClientContext* context, const ::CGData::CGPetGradeCalcRequest& request, ::CGData::CGPetGradeCalcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGPetGradeCalcRequest, ::CGData::CGPetGradeCalcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPetGradeCalcData_, context, request, response);
}

void CGRpcService::Stub::async::GetPetGradeCalcData(::grpc::ClientContext* context, const ::CGData::CGPetGradeCalcRequest* request, ::CGData::CGPetGradeCalcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGPetGradeCalcRequest, ::CGData::CGPetGradeCalcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPetGradeCalcData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::GetPetGradeCalcData(::grpc::ClientContext* context, const ::CGData::CGPetGradeCalcRequest* request, ::CGData::CGPetGradeCalcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPetGradeCalcData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGPetGradeCalcResponse>* CGRpcService::Stub::PrepareAsyncGetPetGradeCalcDataRaw(::grpc::ClientContext* context, const ::CGData::CGPetGradeCalcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGPetGradeCalcResponse, ::CGData::CGPetGradeCalcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPetGradeCalcData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGPetGradeCalcResponse>* CGRpcService::Stub::AsyncGetPetGradeCalcDataRaw(::grpc::ClientContext* context, const ::CGData::CGPetGradeCalcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPetGradeCalcDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::GetServerStoreMapData(::grpc::ClientContext* context, const ::CGData::CGMapDataRequest& request, ::CGData::CGMapDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGMapDataRequest, ::CGData::CGMapDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerStoreMapData_, context, request, response);
}

void CGRpcService::Stub::async::GetServerStoreMapData(::grpc::ClientContext* context, const ::CGData::CGMapDataRequest* request, ::CGData::CGMapDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGMapDataRequest, ::CGData::CGMapDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerStoreMapData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::GetServerStoreMapData(::grpc::ClientContext* context, const ::CGData::CGMapDataRequest* request, ::CGData::CGMapDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerStoreMapData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGMapDataResponse>* CGRpcService::Stub::PrepareAsyncGetServerStoreMapDataRaw(::grpc::ClientContext* context, const ::CGData::CGMapDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGMapDataResponse, ::CGData::CGMapDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerStoreMapData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGMapDataResponse>* CGRpcService::Stub::AsyncGetServerStoreMapDataRaw(::grpc::ClientContext* context, const ::CGData::CGMapDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerStoreMapDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::StoreCGItemData(::grpc::ClientContext* context, const ::CGData::CGStoreItemRequest& request, ::CGData::CGStoreItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGStoreItemRequest, ::CGData::CGStoreItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreCGItemData_, context, request, response);
}

void CGRpcService::Stub::async::StoreCGItemData(::grpc::ClientContext* context, const ::CGData::CGStoreItemRequest* request, ::CGData::CGStoreItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGStoreItemRequest, ::CGData::CGStoreItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCGItemData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::StoreCGItemData(::grpc::ClientContext* context, const ::CGData::CGStoreItemRequest* request, ::CGData::CGStoreItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCGItemData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGStoreItemResponse>* CGRpcService::Stub::PrepareAsyncStoreCGItemDataRaw(::grpc::ClientContext* context, const ::CGData::CGStoreItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGStoreItemResponse, ::CGData::CGStoreItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreCGItemData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGStoreItemResponse>* CGRpcService::Stub::AsyncStoreCGItemDataRaw(::grpc::ClientContext* context, const ::CGData::CGStoreItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreCGItemDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::StoreCGMapData(::grpc::ClientContext* context, const ::CGData::CGStoreMapRequest& request, ::CGData::CGStoreMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::CGStoreMapRequest, ::CGData::CGStoreMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreCGMapData_, context, request, response);
}

void CGRpcService::Stub::async::StoreCGMapData(::grpc::ClientContext* context, const ::CGData::CGStoreMapRequest* request, ::CGData::CGStoreMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::CGStoreMapRequest, ::CGData::CGStoreMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCGMapData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::StoreCGMapData(::grpc::ClientContext* context, const ::CGData::CGStoreMapRequest* request, ::CGData::CGStoreMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCGMapData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGStoreMapResponse>* CGRpcService::Stub::PrepareAsyncStoreCGMapDataRaw(::grpc::ClientContext* context, const ::CGData::CGStoreMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::CGStoreMapResponse, ::CGData::CGStoreMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreCGMapData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::CGStoreMapResponse>* CGRpcService::Stub::AsyncStoreCGMapDataRaw(::grpc::ClientContext* context, const ::CGData::CGStoreMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreCGMapDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::UploadGidData(::grpc::ClientContext* context, const ::CGData::UploadGidDataRequest& request, ::CGData::UploadGidDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::UploadGidDataRequest, ::CGData::UploadGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadGidData_, context, request, response);
}

void CGRpcService::Stub::async::UploadGidData(::grpc::ClientContext* context, const ::CGData::UploadGidDataRequest* request, ::CGData::UploadGidDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::UploadGidDataRequest, ::CGData::UploadGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGidData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::UploadGidData(::grpc::ClientContext* context, const ::CGData::UploadGidDataRequest* request, ::CGData::UploadGidDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGidData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadGidDataResponse>* CGRpcService::Stub::PrepareAsyncUploadGidDataRaw(::grpc::ClientContext* context, const ::CGData::UploadGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::UploadGidDataResponse, ::CGData::UploadGidDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadGidData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadGidDataResponse>* CGRpcService::Stub::AsyncUploadGidDataRaw(::grpc::ClientContext* context, const ::CGData::UploadGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadGidDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::UploadGidBankData(::grpc::ClientContext* context, const ::CGData::UploadGidBankDataRequest& request, ::CGData::UploadGidBankDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::UploadGidBankDataRequest, ::CGData::UploadGidBankDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadGidBankData_, context, request, response);
}

void CGRpcService::Stub::async::UploadGidBankData(::grpc::ClientContext* context, const ::CGData::UploadGidBankDataRequest* request, ::CGData::UploadGidBankDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::UploadGidBankDataRequest, ::CGData::UploadGidBankDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGidBankData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::UploadGidBankData(::grpc::ClientContext* context, const ::CGData::UploadGidBankDataRequest* request, ::CGData::UploadGidBankDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGidBankData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadGidBankDataResponse>* CGRpcService::Stub::PrepareAsyncUploadGidBankDataRaw(::grpc::ClientContext* context, const ::CGData::UploadGidBankDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::UploadGidBankDataResponse, ::CGData::UploadGidBankDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadGidBankData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadGidBankDataResponse>* CGRpcService::Stub::AsyncUploadGidBankDataRaw(::grpc::ClientContext* context, const ::CGData::UploadGidBankDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadGidBankDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::CGData::UploadMapDataRequest>* CGRpcService::Stub::UploadMapDataRaw(::grpc::ClientContext* context, ::CGData::UploadMapDataResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::CGData::UploadMapDataRequest>::Create(channel_.get(), rpcmethod_UploadMapData_, context, response);
}

void CGRpcService::Stub::async::UploadMapData(::grpc::ClientContext* context, ::CGData::UploadMapDataResponse* response, ::grpc::ClientWriteReactor< ::CGData::UploadMapDataRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::CGData::UploadMapDataRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadMapData_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::CGData::UploadMapDataRequest>* CGRpcService::Stub::AsyncUploadMapDataRaw(::grpc::ClientContext* context, ::CGData::UploadMapDataResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::CGData::UploadMapDataRequest>::Create(channel_.get(), cq, rpcmethod_UploadMapData_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::CGData::UploadMapDataRequest>* CGRpcService::Stub::PrepareAsyncUploadMapDataRaw(::grpc::ClientContext* context, ::CGData::UploadMapDataResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::CGData::UploadMapDataRequest>::Create(channel_.get(), cq, rpcmethod_UploadMapData_, context, response, false, nullptr);
}

::grpc::ClientReader< ::CGData::DownloadMapDataResponse>* CGRpcService::Stub::DownloadMapDataRaw(::grpc::ClientContext* context, const ::CGData::DownloadMapDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::CGData::DownloadMapDataResponse>::Create(channel_.get(), rpcmethod_DownloadMapData_, context, request);
}

void CGRpcService::Stub::async::DownloadMapData(::grpc::ClientContext* context, const ::CGData::DownloadMapDataRequest* request, ::grpc::ClientReadReactor< ::CGData::DownloadMapDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::CGData::DownloadMapDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadMapData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::CGData::DownloadMapDataResponse>* CGRpcService::Stub::AsyncDownloadMapDataRaw(::grpc::ClientContext* context, const ::CGData::DownloadMapDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CGData::DownloadMapDataResponse>::Create(channel_.get(), cq, rpcmethod_DownloadMapData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CGData::DownloadMapDataResponse>* CGRpcService::Stub::PrepareAsyncDownloadMapDataRaw(::grpc::ClientContext* context, const ::CGData::DownloadMapDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CGData::DownloadMapDataResponse>::Create(channel_.get(), cq, rpcmethod_DownloadMapData_, context, request, false, nullptr);
}

::grpc::Status CGRpcService::Stub::UploadCharcterServer(::grpc::ClientContext* context, const ::CGData::UploadCharcterServerRequest& request, ::CGData::UploadCharcterServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::UploadCharcterServerRequest, ::CGData::UploadCharcterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadCharcterServer_, context, request, response);
}

void CGRpcService::Stub::async::UploadCharcterServer(::grpc::ClientContext* context, const ::CGData::UploadCharcterServerRequest* request, ::CGData::UploadCharcterServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::UploadCharcterServerRequest, ::CGData::UploadCharcterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCharcterServer_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::UploadCharcterServer(::grpc::ClientContext* context, const ::CGData::UploadCharcterServerRequest* request, ::CGData::UploadCharcterServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCharcterServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadCharcterServerResponse>* CGRpcService::Stub::PrepareAsyncUploadCharcterServerRaw(::grpc::ClientContext* context, const ::CGData::UploadCharcterServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::UploadCharcterServerResponse, ::CGData::UploadCharcterServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadCharcterServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::UploadCharcterServerResponse>* CGRpcService::Stub::AsyncUploadCharcterServerRaw(::grpc::ClientContext* context, const ::CGData::UploadCharcterServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadCharcterServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::Publish(::grpc::ClientContext* context, const ::CGData::StringPub& request, ::CGData::StringPub* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::StringPub, ::CGData::StringPub, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void CGRpcService::Stub::async::Publish(::grpc::ClientContext* context, const ::CGData::StringPub* request, ::CGData::StringPub* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::StringPub, ::CGData::StringPub, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::Publish(::grpc::ClientContext* context, const ::CGData::StringPub* request, ::CGData::StringPub* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::StringPub>* CGRpcService::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::CGData::StringPub& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::StringPub, ::CGData::StringPub, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Publish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::StringPub>* CGRpcService::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::CGData::StringPub& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::CGData::StringPub>* CGRpcService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::CGData::StringPub& request) {
  return ::grpc::internal::ClientReaderFactory< ::CGData::StringPub>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void CGRpcService::Stub::async::Subscribe(::grpc::ClientContext* context, const ::CGData::StringPub* request, ::grpc::ClientReadReactor< ::CGData::StringPub>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::CGData::StringPub>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::CGData::StringPub>* CGRpcService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::CGData::StringPub& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CGData::StringPub>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CGData::StringPub>* CGRpcService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::CGData::StringPub& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CGData::StringPub>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status CGRpcService::Stub::SelectAccountGidData(::grpc::ClientContext* context, const ::CGData::SelectAccountGidDataRequest& request, ::CGData::SelectAccountGidDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectAccountGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectAccountGidData_, context, request, response);
}

void CGRpcService::Stub::async::SelectAccountGidData(::grpc::ClientContext* context, const ::CGData::SelectAccountGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectAccountGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectAccountGidData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectAccountGidData(::grpc::ClientContext* context, const ::CGData::SelectAccountGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectAccountGidData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectAccountGidDataResponse>* CGRpcService::Stub::PrepareAsyncSelectAccountGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectAccountGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectAccountGidDataResponse, ::CGData::SelectAccountGidDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectAccountGidData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectAccountGidDataResponse>* CGRpcService::Stub::AsyncSelectAccountGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectAccountGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectAccountGidDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::SelectGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::CGData::SelectGidDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectGidDataRequest, ::CGData::SelectGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectGidData_, context, request, response);
}

void CGRpcService::Stub::async::SelectGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectGidDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectGidDataRequest, ::CGData::SelectGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectGidData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectGidDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectGidData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectGidDataResponse>* CGRpcService::Stub::PrepareAsyncSelectGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectGidDataResponse, ::CGData::SelectGidDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectGidData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectGidDataResponse>* CGRpcService::Stub::AsyncSelectGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectGidDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::SelectDstTypeGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::CGData::SelectAccountGidDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectDstTypeGidData_, context, request, response);
}

void CGRpcService::Stub::async::SelectDstTypeGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectDstTypeGidData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectDstTypeGidData(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectDstTypeGidData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectAccountGidDataResponse>* CGRpcService::Stub::PrepareAsyncSelectDstTypeGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectAccountGidDataResponse, ::CGData::SelectGidDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectDstTypeGidData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectAccountGidDataResponse>* CGRpcService::Stub::AsyncSelectDstTypeGidDataRaw(::grpc::ClientContext* context, const ::CGData::SelectGidDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectDstTypeGidDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::SelectCharacterServer(::grpc::ClientContext* context, const ::CGData::SelectCharacterServerRequest& request, ::CGData::SelectCharacterServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectCharacterServerRequest, ::CGData::SelectCharacterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectCharacterServer_, context, request, response);
}

void CGRpcService::Stub::async::SelectCharacterServer(::grpc::ClientContext* context, const ::CGData::SelectCharacterServerRequest* request, ::CGData::SelectCharacterServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectCharacterServerRequest, ::CGData::SelectCharacterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectCharacterServer_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectCharacterServer(::grpc::ClientContext* context, const ::CGData::SelectCharacterServerRequest* request, ::CGData::SelectCharacterServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectCharacterServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectCharacterServerResponse>* CGRpcService::Stub::PrepareAsyncSelectCharacterServerRaw(::grpc::ClientContext* context, const ::CGData::SelectCharacterServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectCharacterServerResponse, ::CGData::SelectCharacterServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectCharacterServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectCharacterServerResponse>* CGRpcService::Stub::AsyncSelectCharacterServerRaw(::grpc::ClientContext* context, const ::CGData::SelectCharacterServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectCharacterServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::SelectTaskInfo(::grpc::ClientContext* context, const ::CGData::SelectTaskInfoRequest& request, ::CGData::SelectTaskInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectTaskInfoRequest, ::CGData::SelectTaskInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectTaskInfo_, context, request, response);
}

void CGRpcService::Stub::async::SelectTaskInfo(::grpc::ClientContext* context, const ::CGData::SelectTaskInfoRequest* request, ::CGData::SelectTaskInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectTaskInfoRequest, ::CGData::SelectTaskInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectTaskInfo_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectTaskInfo(::grpc::ClientContext* context, const ::CGData::SelectTaskInfoRequest* request, ::CGData::SelectTaskInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectTaskInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectTaskInfoResponse>* CGRpcService::Stub::PrepareAsyncSelectTaskInfoRaw(::grpc::ClientContext* context, const ::CGData::SelectTaskInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectTaskInfoResponse, ::CGData::SelectTaskInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectTaskInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectTaskInfoResponse>* CGRpcService::Stub::AsyncSelectTaskInfoRaw(::grpc::ClientContext* context, const ::CGData::SelectTaskInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectTaskInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CGRpcService::Stub::SelectCharacterData(::grpc::ClientContext* context, const ::CGData::SelectCharacterDataRequest& request, ::CGData::SelectCharacterDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CGData::SelectCharacterDataRequest, ::CGData::SelectCharacterDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectCharacterData_, context, request, response);
}

void CGRpcService::Stub::async::SelectCharacterData(::grpc::ClientContext* context, const ::CGData::SelectCharacterDataRequest* request, ::CGData::SelectCharacterDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CGData::SelectCharacterDataRequest, ::CGData::SelectCharacterDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectCharacterData_, context, request, response, std::move(f));
}

void CGRpcService::Stub::async::SelectCharacterData(::grpc::ClientContext* context, const ::CGData::SelectCharacterDataRequest* request, ::CGData::SelectCharacterDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectCharacterData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectCharacterDataResponse>* CGRpcService::Stub::PrepareAsyncSelectCharacterDataRaw(::grpc::ClientContext* context, const ::CGData::SelectCharacterDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CGData::SelectCharacterDataResponse, ::CGData::SelectCharacterDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectCharacterData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CGData::SelectCharacterDataResponse>* CGRpcService::Stub::AsyncSelectCharacterDataRaw(::grpc::ClientContext* context, const ::CGData::SelectCharacterDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectCharacterDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

CGRpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGItemRequest, ::CGData::CGItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGItemRequest* req,
             ::CGData::CGItemResponse* resp) {
               return service->GetCGItemData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGVoidData, ::CGData::CGVoidData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGVoidData* req,
             ::CGData::CGVoidData* resp) {
               return service->GetConnectState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGPetGradeCalcRequest, ::CGData::CGPetGradeCalcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGPetGradeCalcRequest* req,
             ::CGData::CGPetGradeCalcResponse* resp) {
               return service->GetPetGradeCalcData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGMapDataRequest, ::CGData::CGMapDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGMapDataRequest* req,
             ::CGData::CGMapDataResponse* resp) {
               return service->GetServerStoreMapData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGStoreItemRequest, ::CGData::CGStoreItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGStoreItemRequest* req,
             ::CGData::CGStoreItemResponse* resp) {
               return service->StoreCGItemData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::CGStoreMapRequest, ::CGData::CGStoreMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::CGStoreMapRequest* req,
             ::CGData::CGStoreMapResponse* resp) {
               return service->StoreCGMapData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::UploadGidDataRequest, ::CGData::UploadGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::UploadGidDataRequest* req,
             ::CGData::UploadGidDataResponse* resp) {
               return service->UploadGidData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::UploadGidBankDataRequest, ::CGData::UploadGidBankDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::UploadGidBankDataRequest* req,
             ::CGData::UploadGidBankDataResponse* resp) {
               return service->UploadGidBankData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[8],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CGRpcService::Service, ::CGData::UploadMapDataRequest, ::CGData::UploadMapDataResponse>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::CGData::UploadMapDataRequest>* reader,
             ::CGData::UploadMapDataResponse* resp) {
               return service->UploadMapData(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CGRpcService::Service, ::CGData::DownloadMapDataRequest, ::CGData::DownloadMapDataResponse>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::DownloadMapDataRequest* req,
             ::grpc::ServerWriter<::CGData::DownloadMapDataResponse>* writer) {
               return service->DownloadMapData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::UploadCharcterServerRequest, ::CGData::UploadCharcterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::UploadCharcterServerRequest* req,
             ::CGData::UploadCharcterServerResponse* resp) {
               return service->UploadCharcterServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::StringPub, ::CGData::StringPub, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::StringPub* req,
             ::CGData::StringPub* resp) {
               return service->Publish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CGRpcService::Service, ::CGData::StringPub, ::CGData::StringPub>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::StringPub* req,
             ::grpc::ServerWriter<::CGData::StringPub>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectAccountGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectAccountGidDataRequest* req,
             ::CGData::SelectAccountGidDataResponse* resp) {
               return service->SelectAccountGidData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectGidDataRequest, ::CGData::SelectGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectGidDataRequest* req,
             ::CGData::SelectGidDataResponse* resp) {
               return service->SelectGidData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectGidDataRequest, ::CGData::SelectAccountGidDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectGidDataRequest* req,
             ::CGData::SelectAccountGidDataResponse* resp) {
               return service->SelectDstTypeGidData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectCharacterServerRequest, ::CGData::SelectCharacterServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectCharacterServerRequest* req,
             ::CGData::SelectCharacterServerResponse* resp) {
               return service->SelectCharacterServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectTaskInfoRequest, ::CGData::SelectTaskInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectTaskInfoRequest* req,
             ::CGData::SelectTaskInfoResponse* resp) {
               return service->SelectTaskInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CGRpcService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CGRpcService::Service, ::CGData::SelectCharacterDataRequest, ::CGData::SelectCharacterDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CGRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CGData::SelectCharacterDataRequest* req,
             ::CGData::SelectCharacterDataResponse* resp) {
               return service->SelectCharacterData(ctx, req, resp);
             }, this)));
}

CGRpcService::Service::~Service() {
}

::grpc::Status CGRpcService::Service::GetCGItemData(::grpc::ServerContext* context, const ::CGData::CGItemRequest* request, ::CGData::CGItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::GetConnectState(::grpc::ServerContext* context, const ::CGData::CGVoidData* request, ::CGData::CGVoidData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::GetPetGradeCalcData(::grpc::ServerContext* context, const ::CGData::CGPetGradeCalcRequest* request, ::CGData::CGPetGradeCalcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::GetServerStoreMapData(::grpc::ServerContext* context, const ::CGData::CGMapDataRequest* request, ::CGData::CGMapDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::StoreCGItemData(::grpc::ServerContext* context, const ::CGData::CGStoreItemRequest* request, ::CGData::CGStoreItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::StoreCGMapData(::grpc::ServerContext* context, const ::CGData::CGStoreMapRequest* request, ::CGData::CGStoreMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::UploadGidData(::grpc::ServerContext* context, const ::CGData::UploadGidDataRequest* request, ::CGData::UploadGidDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::UploadGidBankData(::grpc::ServerContext* context, const ::CGData::UploadGidBankDataRequest* request, ::CGData::UploadGidBankDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::UploadMapData(::grpc::ServerContext* context, ::grpc::ServerReader< ::CGData::UploadMapDataRequest>* reader, ::CGData::UploadMapDataResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::DownloadMapData(::grpc::ServerContext* context, const ::CGData::DownloadMapDataRequest* request, ::grpc::ServerWriter< ::CGData::DownloadMapDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::UploadCharcterServer(::grpc::ServerContext* context, const ::CGData::UploadCharcterServerRequest* request, ::CGData::UploadCharcterServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::Publish(::grpc::ServerContext* context, const ::CGData::StringPub* request, ::CGData::StringPub* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::Subscribe(::grpc::ServerContext* context, const ::CGData::StringPub* request, ::grpc::ServerWriter< ::CGData::StringPub>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectAccountGidData(::grpc::ServerContext* context, const ::CGData::SelectAccountGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectGidData(::grpc::ServerContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectGidDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectDstTypeGidData(::grpc::ServerContext* context, const ::CGData::SelectGidDataRequest* request, ::CGData::SelectAccountGidDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectCharacterServer(::grpc::ServerContext* context, const ::CGData::SelectCharacterServerRequest* request, ::CGData::SelectCharacterServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectTaskInfo(::grpc::ServerContext* context, const ::CGData::SelectTaskInfoRequest* request, ::CGData::SelectTaskInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CGRpcService::Service::SelectCharacterData(::grpc::ServerContext* context, const ::CGData::SelectCharacterDataRequest* request, ::CGData::SelectCharacterDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CGData

